// Edge function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ–µ–≤–æ–π –∫–∞—Ä—Ç—ã
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface BattleEventData {
  sessionId: string;
  eventType: 'combat_start' | 'initiative_roll' | 'token_spawn' | 'fog_reveal';
  eventData: any;
  userId: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    const { sessionId, eventType, eventData, userId } = await req.json() as BattleEventData;

    console.log(`üéÆ Battle event: ${eventType} for session ${sessionId} by user ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏
    const { data: session, error: sessionError } = await supabase
      .from('game_sessions')
      .select('id, dm_id')
      .eq('session_code', sessionId)
      .eq('is_active', true)
      .single();

    if (sessionError || !session) {
      return new Response(
        JSON.stringify({ error: 'Session not found or inactive' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–µ—Å—Å–∏–∏
    const { data: participant } = await supabase
      .from('session_players')
      .select('id, user_id')
      .eq('session_id', session.id)
      .eq('user_id', userId)
      .single();

    const isDM = session.dm_id === userId;
    const isParticipant = !!participant;

    if (!isDM && !isParticipant) {
      return new Response(
        JSON.stringify({ error: 'Access denied' }),
        { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let result = {};

    switch (eventType) {
      case 'combat_start':
        // –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –±–æ—è
        result = await handleCombatStart(supabase, session.id, eventData, userId);
        break;

      case 'initiative_roll':
        // –õ–æ–≥–∏–∫–∞ –±—Ä–æ—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
        result = await handleInitiativeRoll(supabase, session.id, eventData, userId);
        break;

      case 'token_spawn':
        // –õ–æ–≥–∏–∫–∞ —Å–ø–∞–≤–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –î–ú)
        if (!isDM) {
          return new Response(
            JSON.stringify({ error: 'Only DM can spawn tokens' }),
            { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
        result = await handleTokenSpawn(supabase, session.id, eventData, userId);
        break;

      case 'fog_reveal':
        // –õ–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç—É–º–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –î–ú)
        if (!isDM) {
          return new Response(
            JSON.stringify({ error: 'Only DM can modify fog of war' }),
            { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
        result = await handleFogReveal(supabase, session.id, eventData, userId);
        break;

      default:
        return new Response(
          JSON.stringify({ error: 'Unknown event type' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return new Response(
      JSON.stringify({ 
        success: true, 
        result,
        timestamp: new Date().toISOString()
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('‚ùå Battle event error:', error);
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

async function handleCombatStart(supabase: any, sessionId: string, eventData: any, userId: string) {
  console.log('‚öîÔ∏è Starting combat for session:', sessionId);
  
  // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const { data, error } = await supabase
    .from('combat_states')
    .insert({
      session_id: sessionId,
      state: 'active',
      initiative_order: eventData.initiativeOrder || [],
      current_turn: 0,
      round: 1,
      created_by: userId
    });

  if (error) {
    console.error('Error saving combat state:', error);
    throw error;
  }

  return { combatId: data?.[0]?.id, message: 'Combat started successfully' };
}

async function handleInitiativeRoll(supabase: any, sessionId: string, eventData: any, userId: string) {
  console.log('üé≤ Initiative roll:', eventData);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
  const { data, error } = await supabase
    .from('initiative_rolls')
    .insert({
      session_id: sessionId,
      user_id: userId,
      character_name: eventData.characterName,
      roll_result: eventData.rollResult,
      modifier: eventData.modifier || 0,
      total: eventData.rollResult + (eventData.modifier || 0)
    });

  if (error) {
    console.error('Error saving initiative:', error);
    throw error;
  }

  return { message: 'Initiative roll saved' };
}

async function handleTokenSpawn(supabase: any, sessionId: string, eventData: any, userId: string) {
  console.log('üëπ Token spawn:', eventData);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞–≤–Ω–µ —Ç–æ–∫–µ–Ω–∞
  const { data, error } = await supabase
    .from('battle_tokens')
    .insert({
      session_id: sessionId,
      token_type: eventData.tokenType,
      name: eventData.name,
      position_x: eventData.position.x,
      position_y: eventData.position.y,
      hp: eventData.hp,
      max_hp: eventData.maxHp,
      ac: eventData.ac,
      is_enemy: eventData.isEnemy || false,
      created_by: userId
    });

  if (error) {
    console.error('Error saving token:', error);
    throw error;
  }

  return { tokenId: data?.[0]?.id, message: 'Token spawned successfully' };
}

async function handleFogReveal(supabase: any, sessionId: string, eventData: any, userId: string) {
  console.log('üå´Ô∏è Fog reveal:', eventData);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
  const { data, error } = await supabase
    .from('fog_states')
    .upsert({
      session_id: sessionId,
      fog_data: eventData.fogData,
      updated_by: userId,
      updated_at: new Date().toISOString()
    });

  if (error) {
    console.error('Error saving fog state:', error);
    throw error;
  }

  return { message: 'Fog of war updated' };
}