
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useCharacter } from '@/contexts/CharacterContext';
import { socketService, GameSession } from '@/services/socket';
import { Users, Play, Loader2 } from 'lucide-react';

interface JoinSessionPanelProps {
  onSessionJoined?: (session: GameSession) => void;
}

const JoinSessionPanel: React.FC<JoinSessionPanelProps> = ({ onSessionJoined }) => {
  const [sessionCode, setSessionCode] = useState('');
  const [playerName, setPlayerName] = useState('');
  const [isJoining, setIsJoining] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const { character } = useCharacter();
  const { toast } = useToast();

  React.useEffect(() => {
    const initConnection = async () => {
      try {
        const connected = await socketService.connect();
        setIsConnected(connected);
        if (connected) {
          socketService.startHeartbeat();
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      }
    };

    initConnection();
  }, []);

  const handleJoinSession = async () => {
    if (!sessionCode.trim() || !playerName.trim()) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        description: "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏ –∏ –≤–∞—à–µ –∏–º—è",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsJoining(true);
      console.log('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏:', sessionCode, '–∫–∞–∫:', playerName);
      
      const session = await socketService.joinSession(
        sessionCode.toUpperCase(),
        playerName,
        character || undefined
      );
      
      toast({
        title: "üéâ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!",
        description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Å—Å–∏—é "${session.name}"`,
      });

      onSessionJoined?.(session);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
        description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive"
      });
    } finally {
      setIsJoining(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6">
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="flex items-center justify-center gap-2 text-2xl">
            <Users className="h-8 w-8 text-blue-500" />
            –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
          </CardTitle>
          <p className="text-muted-foreground">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="session-code">–ö–æ–¥ —Å–µ—Å—Å–∏–∏</Label>
            <Input
              id="session-code"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: ABC123"
              value={sessionCode}
              onChange={(e) => setSessionCode(e.target.value.toUpperCase())}
              className="text-center text-lg font-mono"
              maxLength={6}
            />
            <p className="text-xs text-muted-foreground">
              –ö–æ–¥ —Å–µ—Å—Å–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –ú–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="player-name">–í–∞—à–µ –∏–º—è</Label>
            <Input
              id="player-name"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–≥—Ä–æ–∫–∞"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleJoinSession()}
            />
          </div>

          {character && (
            <Card className="bg-muted/30">
              <CardContent className="pt-4">
                <p className="text-sm font-medium mb-2">üßô –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:</p>
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">{character.name}</p>
                    <p className="text-sm text-muted-foreground">
                      {character.race} {character.class}, –£—Ä–æ–≤–µ–Ω—å {character.level}
                    </p>
                  </div>
                  <Badge variant="outline">–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ</Badge>
                </div>
              </CardContent>
            </Card>
          )}

          <Button 
            onClick={handleJoinSession} 
            className="w-full h-12 text-lg"
            disabled={!isConnected || isJoining || !sessionCode.trim() || !playerName.trim()}
          >
            {isJoining ? (
              <>
                <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...
              </>
            ) : (
              <>
                <Play className="h-5 w-5 mr-2" />
                {isConnected ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ' : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...'}
              </>
            )}
          </Button>

          {!isConnected && (
            <p className="text-sm text-muted-foreground text-center">
              ‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º...
            </p>
          )}

          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              –ï—â–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞? <a href="/character" className="text-primary hover:underline">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</a>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default JoinSessionPanel;
