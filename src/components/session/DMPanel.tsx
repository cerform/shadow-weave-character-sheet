
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { socketService, GameSession, SessionPlayer, SessionMessage, DiceRollResult } from '@/services/socket';
import { Copy, Users, Crown, MessageSquare, Dice6, Settings, Play, Square, Map, Zap, Scroll, Shield } from 'lucide-react';
import BattleMapPanel from '@/components/battle/BattleMapPanel';

const DMPanel: React.FC = () => {
  const [sessionName, setSessionName] = useState('');
  const [currentSession, setCurrentSession] = useState<GameSession | null>(null);
  const [players, setPlayers] = useState<SessionPlayer[]>([]);
  const [messages, setMessages] = useState<SessionMessage[]>([]);
  const [diceRolls, setDiceRolls] = useState<DiceRollResult[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [activeTab, setActiveTab] = useState('session');
  const [isCreating, setIsCreating] = useState(false);
  const [sessionStats, setSessionStats] = useState({
    totalMessages: 0,
    totalDiceRolls: 0,
    sessionDuration: 0
  });
  
  // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç CharacterContext –¥–ª—è DMPanel
  const character = null; // DM –ø–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const { toast } = useToast();

  useEffect(() => {
    console.log('üéØ DMPanel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    initializeConnection();

    return () => {
      console.log('üéØ DMPanel: –û—á–∏—Å—Ç–∫–∞');
      cleanup();
    };
  }, []);

  const initializeConnection = async () => {
    try {
      const connected = await socketService.connect();
      setIsConnected(connected);
      
      if (connected) {
        setupEventListeners();
        socketService.startHeartbeat();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const savedSession = localStorage.getItem('dm-active-session');
        if (savedSession) {
          try {
            const sessionData = JSON.parse(savedSession);
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', sessionData);
            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é:', error);
            localStorage.removeItem('dm-active-session');
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      setIsConnected(false);
    }
  };

  const setupEventListeners = () => {
    const handleSessionUpdate = (session: GameSession) => {
      console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', session.name);
      setCurrentSession(session);
      setPlayers(session.players);
      setMessages(session.messages || []);
      setDiceRolls(session.diceRolls || []);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ª–æ–∫–∞–ª—å–Ω–æ
      localStorage.setItem('dm-active-session', JSON.stringify({
        id: session.id,
        code: session.code,
        name: session.name
      }));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setSessionStats({
        totalMessages: session.messages?.length || 0,
        totalDiceRolls: session.diceRolls?.length || 0,
        sessionDuration: Math.floor((Date.now() - new Date(session.createdAt).getTime()) / 1000 / 60)
      });
    };

    const handlePlayerUpdate = (updatedPlayers: SessionPlayer[]) => {
      console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:', updatedPlayers.length);
      setPlayers(updatedPlayers);
    };

    const handleMessage = (message: SessionMessage) => {
      console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.sender);
      setMessages(prev => [...prev, message]);
      setSessionStats(prev => ({ ...prev, totalMessages: prev.totalMessages + 1 }));
    };

    const handleDiceRoll = (roll: DiceRollResult) => {
      console.log('üé≤ –ù–æ–≤—ã–π –±—Ä–æ—Å–æ–∫:', roll.playerName, roll.total);
      setDiceRolls(prev => [...prev, roll]);
      setSessionStats(prev => ({ ...prev, totalDiceRolls: prev.totalDiceRolls + 1 }));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±—Ä–æ—Å–∫–µ
      const diceMessage: SessionMessage = {
        id: `dice_${roll.id}`,
        type: 'dice',
        sender: roll.playerName,
        content: `üé≤ –ë—Ä–æ—Å–∏–ª ${roll.diceType}${roll.reason ? ` (${roll.reason})` : ''}: [${roll.rolls?.join(', ') || roll.result}]${roll.modifier !== 0 ? ` + ${roll.modifier}` : ''} = **${roll.total}**`,
        timestamp: roll.timestamp,
        sessionId: currentSession?.id || ''
      };
      setMessages(prev => [...prev, diceMessage]);
    };

    socketService.onSessionUpdate(handleSessionUpdate);
    socketService.onPlayerUpdate(handlePlayerUpdate);
    socketService.onMessage(handleMessage);
    socketService.onDiceRoll(handleDiceRoll);
  };

  const cleanup = () => {
    socketService.removeSessionUpdateListener(() => {});
    socketService.removePlayerUpdateListener(() => {});
    socketService.removeMessageListener(() => {});
    socketService.removeDiceListener(() => {});
  };

  const createSession = async () => {
    if (!sessionName.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsCreating(true);
      console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', sessionName);
      
      const session = await socketService.createSession(
        sessionName, 
        '–ú–∞—Å—Ç–µ—Ä', 
        character || undefined
      );
      
      setCurrentSession(session);
      setSessionName('');
      
      toast({
        title: "üéÆ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
        description: `–ö–æ–¥ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤: ${session.code}`,
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      navigator.clipboard.writeText(session.code);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏",
        description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive"
      });
    } finally {
      setIsCreating(false);
    }
  };

  const copySessionCode = () => {
    if (currentSession) {
      navigator.clipboard.writeText(currentSession.code);
      toast({
        title: "üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω",
        description: `–ö–æ–¥ ${currentSession.code} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`,
      });
    }
  };

  const sendMessage = () => {
    if (newMessage.trim()) {
      socketService.sendMessage(newMessage, 'chat');
      setNewMessage('');
    }
  };

  const sendSystemMessage = (message: string) => {
    socketService.sendMessage(`üéØ **–ú–∞—Å—Ç–µ—Ä**: ${message}`, 'system');
  };

  const endSession = () => {
    if (currentSession) {
      console.log('üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', currentSession.name);
      socketService.endSession();
      setCurrentSession(null);
      setPlayers([]);
      setMessages([]);
      setDiceRolls([]);
      localStorage.removeItem('dm-active-session');
      
      toast({
        title: "üèÅ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        description: "–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      });
    }
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isCreating) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardContent className="p-8">
            <div className="flex flex-col items-center justify-center space-y-4">
              <div className="animate-spin h-8 w-8 border-3 border-primary border-t-transparent rounded-full"></div>
              <h3 className="text-lg font-semibold">–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...</h3>
              <p className="text-sm text-muted-foreground">–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë –¥–ª—è —ç–ø–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
  if (!currentSession) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader className="text-center">
            <CardTitle className="flex items-center justify-center gap-2 text-2xl">
              <Crown className="h-8 w-8 text-yellow-500" />
              –ü–∞–Ω–µ–ª—å –ú–∞—Å—Ç–µ—Ä–∞ –ü–æ–¥–∑–µ–º–µ–ª–∏–π
            </CardTitle>
            <p className="text-muted-foreground">–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é D&D</p>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è</label>
              <Input
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–∑–µ–º–µ–ª—å—è –ó–∞–≤–µ—Ç–∞ –î—Ä–∞–∫–æ–Ω–∞"
                value={sessionName}
                onChange={(e) => setSessionName(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && createSession()}
                className="text-lg"
              />
            </div>
            
            {character && (
              <Card className="bg-muted/30">
                <CardContent className="pt-4">
                  <p className="text-sm font-medium mb-2">üßô –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ DM:</p>
                  <p className="text-sm">
                    {character.name} - {character.race} {character.class}, –£—Ä–æ–≤–µ–Ω—å {character.level}
                  </p>
                </CardContent>
              </Card>
            )}
            
            <Button 
              onClick={createSession} 
              className="w-full h-12 text-lg"
              disabled={!isConnected || isCreating}
            >
              <Play className="h-5 w-5 mr-2" />
              {isConnected ? 'üéÆ –ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ' : 'üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...'}
            </Button>
            
            {!isConnected && (
              <p className="text-sm text-muted-foreground text-center">
                ‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º...
              </p>
            )}
          </CardContent>
        </Card>
      </div>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DM
  return (
    <div className="max-w-7xl mx-auto p-6">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <div className="flex items-center justify-between">
          <TabsList className="grid w-fit grid-cols-4">
            <TabsTrigger value="session" className="flex items-center gap-2">
              <Crown className="h-4 w-4" />
              –°–µ—Å—Å–∏—è
            </TabsTrigger>
            <TabsTrigger value="battle" className="flex items-center gap-2">
              <Map className="h-4 w-4" />
              –ë–æ–µ–≤–∞—è –∫–∞—Ä—Ç–∞
            </TabsTrigger>
            <TabsTrigger value="initiative" className="flex items-center gap-2">
              <Zap className="h-4 w-4" />
              –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
            </TabsTrigger>
            <TabsTrigger value="tools" className="flex items-center gap-2">
              <Settings className="h-4 w-4" />
              –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            </TabsTrigger>
          </TabsList>
          
          <div className="flex items-center gap-4">
            <Badge variant="default" className="text-lg px-4 py-2">
              üìã {currentSession.code}
              <Button
                size="sm"
                variant="ghost"
                className="ml-2 h-6 w-6 p-0"
                onClick={copySessionCode}
              >
                <Copy className="h-3 w-3" />
              </Button>
            </Badge>
            <Button onClick={endSession} variant="destructive">
              <Square className="h-4 w-4 mr-2" />
              –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
            </Button>
          </div>
        </div>

        <TabsContent value="session" className="space-y-6">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">{players.length}</div>
                <div className="text-sm text-muted-foreground">–ò–≥—Ä–æ–∫–æ–≤</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">{sessionStats.totalMessages}</div>
                <div className="text-sm text-muted-foreground">–°–æ–æ–±—â–µ–Ω–∏–π</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">{sessionStats.totalDiceRolls}</div>
                <div className="text-sm text-muted-foreground">–ë—Ä–æ—Å–∫–æ–≤</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-orange-600">{sessionStats.sessionDuration}</div>
                <div className="text-sm text-muted-foreground">–ú–∏–Ω—É—Ç</div>
              </CardContent>
            </Card>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π */}
            <div className="lg:col-span-2 space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Crown className="h-5 w-5 text-yellow-500" />
                    üéÆ {currentSession.name}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">
                    –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º <strong>{currentSession.code}</strong> —Å –∏–≥—Ä–æ–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                  </p>
                  
                  {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã DM */}
                  <div className="flex flex-wrap gap-2">
                    <Button size="sm" variant="outline" onClick={() => sendSystemMessage('–î–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ ‚òï')}>
                      ‚òï –ü–µ—Ä–µ—Ä—ã–≤
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => sendSystemMessage('–í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π ‚öîÔ∏è')}>
                      ‚öîÔ∏è –ë–æ–π
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => sendSystemMessage('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É üé≤')}>
                      üé≤ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞
                    </Button>
                    <Button size="sm" variant="outline" onClick={() => sendSystemMessage('–°–¥–µ–ª–∞–π—Ç–µ —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ üõ°Ô∏è')}>
                      üõ°Ô∏è –°–ø–∞—Å–±—Ä–æ—Å–æ–∫
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* –ò–≥—Ä–æ–∫–∏ */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5" />
                    üë• –ò–≥—Ä–æ–∫–∏ ({players.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {players.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <Users className="h-12 w-12 mx-auto mb-4 opacity-50" />
                      <p>–û–∂–∏–¥–∞–µ–º –≥–µ—Ä–æ–µ–≤...</p>
                      <p className="text-sm">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å–µ—Å—Å–∏–∏ —Å –∏–≥—Ä–æ–∫–∞–º–∏!</p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {players.map((player) => (
                        <div key={player.id} className="flex items-center justify-between p-3 border rounded-lg bg-card">
                          <div className="flex items-center gap-3">
                            <div className={`w-3 h-3 rounded-full ${player.isOnline ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`} />
                            <div>
                              <div className="flex items-center gap-2">
                                <p className="font-medium">{player.name}</p>
                                {player.isDM && <Crown className="h-4 w-4 text-yellow-500" />}
                              </div>
                              {player.character && (
                                <p className="text-sm text-muted-foreground">
                                  üßô {player.character.name} - {player.character.race} {player.character.class}
                                </p>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Badge variant={player.isOnline ? "default" : "secondary"}>
                              {player.isOnline ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"}
                            </Badge>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* –ß–∞—Ç */}
            <div>
              <Card className="h-[600px] flex flex-col">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5" />
                    üí¨ –ß–∞—Ç —Å–µ—Å—Å–∏–∏
                  </CardTitle>
                </CardHeader>
                <CardContent className="flex-grow flex flex-col">
                  <ScrollArea className="flex-grow mb-4">
                    <div className="space-y-3">
                      {messages.map((message) => (
                        <div key={message.id} className={`p-3 rounded-lg ${
                          message.type === 'system' ? 'bg-yellow-50 border-l-4 border-yellow-400' : 
                          message.type === 'dice' ? 'bg-blue-50 border-l-4 border-blue-400' :
                          message.isDM ? 'bg-purple-50 border-l-4 border-purple-400' :
                          'bg-muted/30'
                        }`}>
                          <div className="flex justify-between text-sm">
                            <span className="font-medium flex items-center gap-1">
                              {message.isDM && <Crown className="h-3 w-3 text-yellow-500" />}
                              {message.sender}
                            </span>
                            <span className="text-muted-foreground">
                              {new Date(message.timestamp).toLocaleTimeString()}
                            </span>
                          </div>
                          <div className="mt-1" dangerouslySetInnerHTML={{ 
                            __html: message.content.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') 
                          }} />
                          {message.type === 'dice' && (
                            <Dice6 className="h-4 w-4 inline ml-2 text-blue-500" />
                          )}
                        </div>
                      ))}
                    </div>
                  </ScrollArea>
                  
                  <Separator className="my-2" />
                  
                  <div className="space-y-2">
                    <div className="flex gap-2">
                      <Input
                        placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å—Ç–µ—Ä–∞..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                      />
                      <Button onClick={sendMessage} disabled={!newMessage.trim()}>
                        üì§
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        <TabsContent value="battle">
          <BattleMapPanel 
            isDM={true} 
            sessionId={currentSession.id}
          />
        </TabsContent>

        <TabsContent value="initiative">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5" />
                ‚ö° –¢—Ä–µ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8 text-muted-foreground">
                <Zap className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>–¢—Ä–µ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="tools">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Scroll className="h-5 w-5" />
                  üìú –ó–∞–º–µ—Ç–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">–°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è DM –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  üõ°Ô∏è NPC –ú–µ–Ω–µ–¥–∂–µ—Ä
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NPC –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏</p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏–º–µ–Ω, —Å–æ–∫—Ä–æ–≤–∏—â –∏ —Å–æ–±—ã—Ç–∏–π</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default DMPanel;
