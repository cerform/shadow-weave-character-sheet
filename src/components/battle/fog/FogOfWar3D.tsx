// 3D —Å–∏—Å—Ç–µ–º–∞ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
import React, { useRef, useEffect, useMemo } from 'react';
import { useFrame } from '@react-three/fiber';
import { useFogOfWarStore } from '@/stores/fogOfWarStore';
import { useUnifiedBattleStore } from '@/stores/unifiedBattleStore';
import * as THREE from 'three';

interface FogOfWar3DProps {
  enabled?: boolean;
}

export const FogOfWar3D: React.FC<FogOfWar3DProps> = ({ enabled = true }) => {
  const meshRef = useRef<THREE.Mesh>(null);
  const materialRef = useRef<THREE.ShaderMaterial>(null);
  
  const { 
    fogGrid, 
    gridWidth, 
    gridHeight, 
    cellSize,
    isInitialized,
    initializeFog 
  } = useFogOfWarStore();
  
  const { isDM } = useUnifiedBattleStore();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É–º–∞–Ω –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  useEffect(() => {
    if (!isInitialized) {
      // –ö–∞—Ä—Ç–∞ 24x24 –∫–ª–µ—Ç–∫–∏ –≤ –º–∏—Ä–µ 3D (–∫–∞–∂–¥–∞—è –∫–ª–µ—Ç–∫–∞ = 1 unit)
      initializeFog(24, 24, 1);
      console.log('üå´Ô∏è FogOfWar3D: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ç—É–º–∞–Ω 24x24');
    }
  }, [isInitialized, initializeFog]);

  // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Ç—É–º–∞–Ω–∞
  const fogTexture = useMemo(() => {
    if (!fogGrid.length) return null;
    
    const width = gridWidth;
    const height = gridHeight;
    const data = new Uint8Array(width * height);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: 0 = —Ç—É–º–∞–Ω, 255 = —Ä–∞—Å–∫—Ä—ã—Ç–æ
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const index = y * width + x;
        data[index] = fogGrid[y][x] === 0 ? 0 : 255; // –ï—Å–ª–∏ —Ç—É–º–∞–Ω - —á–µ—Ä–Ω—ã–π, –µ—Å–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç–æ - –±–µ–ª—ã–π
      }
    }
    
    const texture = new THREE.DataTexture(data, width, height, THREE.RedFormat);
    texture.needsUpdate = true;
    texture.magFilter = THREE.NearestFilter;
    texture.minFilter = THREE.NearestFilter;
    
    console.log('üå´Ô∏è FogOfWar3D: –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ —Ç—É–º–∞–Ω–∞', width, 'x', height);
    return texture;
  }, [fogGrid, gridWidth, gridHeight]);

  // –®–µ–π–¥–µ—Ä –¥–ª—è —Ç—É–º–∞–Ω–∞
  const fogShader = useMemo(() => ({
    vertexShader: `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform sampler2D fogTexture;
      uniform float opacity;
      varying vec2 vUv;
      
      void main() {
        float fogValue = texture2D(fogTexture, vUv).r;
        
        // –ï—Å–ª–∏ —Ç—É–º–∞–Ω (0), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–Ω—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        // –ï—Å–ª–∏ —Ä–∞—Å–∫—Ä—ã—Ç–æ (1), –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ
        if (fogValue > 0.5) {
          discard; // –†–∞—Å–∫—Ä—ã—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–≤–∏–¥–∏–º—ã
        }
        
        gl_FragColor = vec4(0.0, 0.0, 0.0, opacity);
      }
    `,
    uniforms: {
      fogTexture: { value: fogTexture },
      opacity: { value: isDM ? 0.3 : 0.8 } // –î–ú –≤–∏–¥–∏—Ç —Ç—É–º–∞–Ω —Å–ª–∞–±–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞
    }
  }), [fogTexture, isDM]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—É–º–∞–Ω–∞
  useEffect(() => {
    if (fogTexture && materialRef.current) {
      materialRef.current.uniforms.fogTexture.value = fogTexture;
      materialRef.current.uniforms.opacity.value = isDM ? 0.3 : 0.8;
      console.log('üå´Ô∏è FogOfWar3D: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ —Ç—É–º–∞–Ω–∞');
    }
  }, [fogTexture, isDM]);

  if (!enabled || !fogTexture) {
    return null;
  }

  return (
    <mesh
      ref={meshRef}
      position={[0, 0.05, 0]} // –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–¥ –∑–µ–º–ª–µ–π
      rotation={[-Math.PI / 2, 0, 0]} // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –ª–µ–∂–∞–ª –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
    >
      <planeGeometry args={[24, 24]} /> {/* –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –º–∏—Ä–µ */}
      <shaderMaterial
        ref={materialRef}
        vertexShader={fogShader.vertexShader}
        fragmentShader={fogShader.fragmentShader}
        uniforms={fogShader.uniforms}
        transparent
        depthWrite={false}
        blending={THREE.NormalBlending}
      />
    </mesh>
  );
};