// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
import React, { useCallback, useEffect } from 'react';
import { useUnifiedBattleStore } from '@/stores/unifiedBattleStore';
import { useFogOfWarStore } from '@/stores/fogOfWarStore';
import { useMonstersStore } from '@/stores/monstersStore';
import type { EnhancedToken } from '@/stores/enhancedBattleStore';
import type { Monster } from '@/types/monsters';

interface Enhanced3DTokenManagerProps {
  onSpawnMonster?: (monster: Monster, position: [number, number, number]) => void;
  onTokenClick?: (tokenId: string) => void;
}

export const Enhanced3DTokenManager: React.FC<Enhanced3DTokenManagerProps> = ({
  onSpawnMonster,
  onTokenClick
}) => {
  const { 
    tokens, 
    addToken, 
    updateToken, 
    removeToken,
    selectedTokenId,
    activeId,
    addCombatEvent
  } = useUnifiedBattleStore();
  
  const { updatePlayerVision } = useFogOfWarStore();
  const { getAllMonsters } = useMonstersStore();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –º–æ–Ω—Å—Ç—Ä–∞
  const createTokenFromMonster = useCallback((monster: Monster, position: [number, number, number]): EnhancedToken => {
    // –ü–∞—Ä—Å–∏–º HP –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
    let hp = 20; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const hitPoints = (monster as any).hitPoints;
    if (typeof hitPoints === 'string') {
      const hpMatch = hitPoints.match(/\d+/);
      hp = hpMatch ? parseInt(hpMatch[0]) : 20;
    } else if (typeof hitPoints === 'number') {
      hp = hitPoints;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ–∫–µ–Ω–∞
    let tokenSize = 1;
    const size = monster.size as string;
    if (size === 'Large') tokenSize = 2;
    else if (size === 'Huge') tokenSize = 3;
    else if (size === 'Gargantuan') tokenSize = 4;

    return {
      id: crypto.randomUUID(),
      name: monster.name,
      hp: hp,
      maxHp: hp,
      ac: monster.armorClass || 10,
      position: position,
      conditions: [],
      isEnemy: true,
      isVisible: true,
      size: tokenSize,
      speed: (monster.speed as any)?.walk || 6,
      hasMovedThisTurn: false,
      class: `${monster.type} CR ${monster.challengeRating}`,
      color: '#dc2626', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—Ä–∞–≥–æ–≤
      initiative: Math.floor(Math.random() * 20) + 1
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
  const createPlayerToken = useCallback((name: string, position: [number, number, number], playerClass: string = '–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç'): EnhancedToken => {
    return {
      id: crypto.randomUUID(),
      name: name,
      hp: 30,
      maxHp: 30,
      ac: 15,
      position: position,
      conditions: [],
      isEnemy: false,
      isVisible: true,
      size: 1,
      speed: 6,
      hasMovedThisTurn: false,
      class: playerClass,
      color: '#3b82f6', // –°–∏–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
      initiative: Math.floor(Math.random() * 20) + 1
    };
  }, []);

  // –°–ø–∞–≤–Ω –º–æ–Ω—Å—Ç—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
  const spawnMonster = useCallback((monsterId: string, position: [number, number, number]) => {
    const monsters = getAllMonsters();
    const monster = monsters.find(m => m.id === monsterId);
    
    if (!monster) {
      console.error('Monster not found:', monsterId);
      return;
    }

    const token = createTokenFromMonster(monster, position);
    addToken(token);
    
    addCombatEvent({
      actor: '–î–ú',
      action: '–°–ø–∞–≤–Ω',
      description: `–°–æ–∑–¥–∞–Ω ${monster.name} (CR ${monster.challengeRating})`,
      playerName: '–ú–∞—Å—Ç–µ—Ä'
    });

    console.log('üê≤ –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –º–æ–Ω—Å—Ç—Ä–∞:', token.name, '–≤ –ø–æ–∑–∏—Ü–∏–∏:', position);
    
    if (onSpawnMonster) {
      onSpawnMonster(monster, position);
    }
  }, [getAllMonsters, createTokenFromMonster, addToken, addCombatEvent, onSpawnMonster]);

  // –°–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞
  const spawnPlayer = useCallback((name: string, position: [number, number, number], playerClass?: string) => {
    const token = createPlayerToken(name, position, playerClass);
    addToken(token);
    
    addCombatEvent({
      actor: '–î–ú',
      action: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞',
      description: `–î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫ ${name}`,
      playerName: '–ú–∞—Å—Ç–µ—Ä'
    });

    console.log('üë§ –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞:', token.name, '–≤ –ø–æ–∑–∏—Ü–∏–∏:', position);
  }, [createPlayerToken, addToken, addCombatEvent]);

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
  const moveToken = useCallback((tokenId: string, newPosition: [number, number, number]) => {
    const token = tokens.find(t => t.id === tokenId);
    if (!token) return;

    updateToken(tokenId, { 
      position: newPosition,
      hasMovedThisTurn: true
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    if (!token.isEnemy) {
      const [x, y, z] = newPosition;
      const gridX = Math.floor(x + 12);
      const gridY = 23 - Math.floor(z + 12);
      updatePlayerVision(tokenId, gridX, gridY);
    }

    addCombatEvent({
      actor: token.name,
      action: '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ',
      description: `${token.name} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è`,
      playerName: token.name
    });
  }, [tokens, updateToken, updatePlayerVision, addCombatEvent]);

  // –ê—Ç–∞–∫–∞ –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏
  const performAttack = useCallback((attackerId: string, targetId: string, damage: number) => {
    const attacker = tokens.find(t => t.id === attackerId);
    const target = tokens.find(t => t.id === targetId);
    
    if (!attacker || !target) return;

    const newHp = Math.max(0, target.hp - damage);
    updateToken(targetId, { hp: newHp });

    const isKilled = newHp === 0;
    
    addCombatEvent({
      actor: attacker.name,
      action: isKilled ? '–£–±–∏–π—Å—Ç–≤–æ' : '–ê—Ç–∞–∫–∞',
      description: `${attacker.name} ${isKilled ? '—É–±–∏–ª' : '–∞—Ç–∞–∫–æ–≤–∞–ª'} ${target.name} –Ω–∞ ${damage} —É—Ä–æ–Ω–∞`,
      playerName: attacker.name
    });

    if (isKilled) {
      console.log('üíÄ –¢–æ–∫–µ–Ω —É–±–∏—Ç:', target.name);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    }
  }, [tokens, updateToken, addCombatEvent]);

  // –õ–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const healToken = useCallback((tokenId: string, healAmount: number) => {
    const token = tokens.find(t => t.id === tokenId);
    if (!token) return;

    const newHp = Math.min(token.maxHp, token.hp + healAmount);
    updateToken(tokenId, { hp: newHp });

    addCombatEvent({
      actor: '–õ–µ—á–µ–Ω–∏–µ',
      action: '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
      description: `${token.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª ${healAmount} HP`,
      playerName: token.name
    });
  }, [tokens, updateToken, addCombatEvent]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  const addCondition = useCallback((tokenId: string, condition: string) => {
    const token = tokens.find(t => t.id === tokenId);
    if (!token || token.conditions.includes(condition)) return;

    updateToken(tokenId, { 
      conditions: [...token.conditions, condition] 
    });

    addCombatEvent({
      actor: token.name,
      action: '–°–æ—Å—Ç–æ—è–Ω–∏–µ',
      description: `${token.name} –ø–æ–ª—É—á–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${condition}`,
      playerName: token.name
    });
  }, [tokens, updateToken, addCombatEvent]);

  const removeCondition = useCallback((tokenId: string, condition: string) => {
    const token = tokens.find(t => t.id === tokenId);
    if (!token) return;

    updateToken(tokenId, { 
      conditions: token.conditions.filter(c => c !== condition) 
    });

    addCombatEvent({
      actor: token.name,
      action: '–°–æ—Å—Ç–æ—è–Ω–∏–µ',
      description: `${token.name} –∏–∑–±–∞–≤–∏–ª—Å—è –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${condition}`,
      playerName: token.name
    });
  }, [tokens, updateToken, addCombatEvent]);

  // –°–±—Ä–æ—Å —Ö–æ–¥–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
  const resetTurnFlags = useCallback(() => {
    tokens.forEach(token => {
      if (token.hasMovedThisTurn) {
        updateToken(token.id, { hasMovedThisTurn: false });
      }
    });

    addCombatEvent({
      actor: '–°–∏—Å—Ç–µ–º–∞',
      action: '–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥',
      description: '–ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –±–æ—è',
      playerName: '–°–∏—Å—Ç–µ–º–∞'
    });
  }, [tokens, updateToken, addCombatEvent]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
  const handleTokenClick = useCallback((tokenId: string) => {
    console.log('üéØ –ö–ª–∏–∫ –ø–æ —Ç–æ–∫–µ–Ω—É:', tokenId);
    if (onTokenClick) {
      onTokenClick(tokenId);
    }
  }, [onTokenClick]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  return {
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
    spawnMonster,
    spawnPlayer,
    moveToken,
    performAttack,
    healToken,
    addCondition,
    removeCondition,
    resetTurnFlags,
    handleTokenClick,
    
    // –î–∞–Ω–Ω—ã–µ
    tokens,
    selectedTokenId,
    activeId
  } as any; // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-—É—Ç–∏–ª–∏—Ç–∞, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ
};