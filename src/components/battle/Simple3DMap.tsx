import React, { Suspense } from 'react';
import { Canvas, useLoader } from '@react-three/fiber';
import { OrbitControls, Text } from '@react-three/drei';
import * as THREE from 'three';

interface Simple3DMapProps {
  mapImageUrl?: string;
  tokens?: Array<{
    id: string;
    name: string;
    x: number;
    y: number;
    color: string;
    size: number;
    type: string;
  }>;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫–∞—Ä—Ç—ã
const TexturedPlane: React.FC<{ imageUrl?: string }> = ({ imageUrl }) => {
  let texture = null;
  
  try {
    if (imageUrl) {
      texture = useLoader(THREE.TextureLoader, imageUrl);
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.RepeatWrapping;
      texture.flipY = false;
    }
  } catch (error) {
    console.warn('Failed to load texture:', error);
  }

  return (
    <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]} receiveShadow>
      <planeGeometry args={[24, 16]} />
      <meshStandardMaterial 
        map={texture} 
        color={texture ? '#ffffff' : '#4a5568'}
      />
    </mesh>
  );
};

// –¢–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
const Token3D: React.FC<{
  position: [number, number, number];
  color: string;
  name: string;
}> = ({ position, color, name }) => {
  return (
    <group position={position}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω */}
      <mesh castShadow>
        <cylinderGeometry args={[0.4, 0.4, 0.8, 12]} />
        <meshStandardMaterial color={color || '#3b82f6'} />
      </mesh>
      
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ */}
      <Text
        position={[0, 1.2, 0]}
        fontSize={0.3}
        color="white"
        anchorX="center"
        anchorY="middle"
        outlineWidth={0.05}
        outlineColor="black"
      >
        {name}
      </Text>
      
      {/* –¢–µ–Ω—å –ø–æ–¥ —Ç–æ–∫–µ–Ω–æ–º */}
      <mesh position={[0, -0.4, 0]} rotation={[-Math.PI / 2, 0, 0]}>
        <circleGeometry args={[0.5, 16]} />
        <meshBasicMaterial color="#000000" opacity={0.3} transparent />
      </mesh>
    </group>
  );
};

const Simple3DMap: React.FC<Simple3DMapProps> = ({ mapImageUrl, tokens = [] }) => {
  console.log('üó∫Ô∏è Simple3DMap rendering with:', { mapImageUrl, tokensCount: tokens.length });
  
  return (
    <div className="w-full h-full">
      <Canvas 
        camera={{ position: [12, 8, 12], fov: 60 }}
        shadows
      >
        <Suspense fallback={null}>
          {/* –û—Å–≤–µ—â–µ–Ω–∏–µ */}
          <ambientLight intensity={0.4} />
          <directionalLight 
            position={[10, 10, 5]} 
            intensity={0.8} 
            castShadow
            shadow-mapSize-width={2048}
            shadow-mapSize-height={2048}
          />
          
          {/* –ü–ª–æ—Å–∫–æ—Å—Ç—å —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫–∞—Ä—Ç—ã */}
          <TexturedPlane imageUrl={mapImageUrl} />
          
          {/* –¢–æ–∫–µ–Ω—ã */}
          {tokens.map((token) => {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –≤ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ 1200x800 –ø–∏–∫—Å–µ–ª–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 24x16 –µ–¥–∏–Ω–∏—Ü–∞–º –≤ 3D
            const x = ((token.x || 0) / 1200) * 24 - 12; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ X
            const z = ((token.y || 0) / 800) * 16 - 8;   // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ Z
            
            return (
              <Token3D
                key={token.id}
                position={[x, 0.4, -z]} // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Z –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                color={token.color || '#3b82f6'}
                name={token.name || 'Token'}
              />
            );
          })}
          
          {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã */}
          <OrbitControls 
            enablePan 
            enableZoom 
            enableRotate
            minDistance={5}
            maxDistance={30}
            maxPolarAngle={Math.PI / 2}
          />
        </Suspense>
      </Canvas>
    </div>
  );
};

export default Simple3DMap;