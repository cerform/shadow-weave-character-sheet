import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { equipmentHelpers } from '@/stores/assetEquipStore';
import { SlotName } from '@/utils/CharacterManager';
import { useEnhancedBattleStore } from '@/stores/enhancedBattleStore';

const slotOptions: { value: SlotName; label: string }[] = [
  { value: 'head', label: '–ì–æ–ª–æ–≤–∞' },
  { value: 'body', label: '–¢–µ–ª–æ' },
  { value: 'mainHand', label: '–û—Å–Ω–æ–≤–Ω–∞—è —Ä—É–∫–∞' },
  { value: 'offHand', label: '–í—Ç–æ—Ä–∞—è —Ä—É–∫–∞' },
  { value: 'back', label: '–°–ø–∏–Ω–∞' },
  { value: 'misc', label: '–†–∞–∑–Ω–æ–µ' }
];

const commonBones = [
  'Head',
  'mixamorigHead',
  'RightHand',
  'LeftHand',
  'mixamorigRightHand',
  'mixamorigLeftHand',
  'Spine',
  'mixamorigSpine'
];

export const EquipmentPanel: React.FC = () => {
  const { tokens } = useEnhancedBattleStore();
  const [characterId, setCharacterId] = useState('hero-1');
  const [assetUrl, setAssetUrl] = useState('');
  const [selectedSlot, setSelectedSlot] = useState<SlotName>('head');
  const [boneName, setBoneName] = useState('');
  const [scale, setScale] = useState(1);

  const handleAddCharacter = () => {
    if (!characterId || !assetUrl) return;
    
    equipmentHelpers.addCharacter(characterId, assetUrl);
    setAssetUrl('');
  };

  const handleAddEquipment = () => {
    if (!characterId || !assetUrl || !selectedSlot) return;
    
    equipmentHelpers.addEquipment(characterId, assetUrl, selectedSlot, {
      boneName: boneName || undefined,
      scale: scale !== 1 ? scale : undefined
    });
    
    setAssetUrl('');
    setBoneName('');
    setScale(1);
  };

  const handleQuickEquip = (slot: SlotName, url: string, bone?: string) => {
    if (!characterId) return;
    
    equipmentHelpers.addEquipment(characterId, url, slot, {
      boneName: bone,
      scale: 1
    });
  };

  return (
    <Card className="fixed bottom-4 left-4 w-96 bg-background/95 backdrop-blur-sm border-border z-40">
      <CardHeader>
        <CardTitle className="text-primary">–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Character ID */}
        <div className="space-y-2">
          <Label htmlFor="character-id">–ü–µ—Ä—Å–æ–Ω–∞–∂</Label>
          <Select value={characterId} onValueChange={setCharacterId}>
            <SelectTrigger>
              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞" />
            </SelectTrigger>
            <SelectContent>
              {tokens.map((token) => (
                <SelectItem key={token.id} value={token.id}>
                  {token.name} ({token.id})
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Asset URL */}
        <div className="space-y-2">
          <Label htmlFor="asset-url">URL –º–æ–¥–µ–ª–∏ (.glb)</Label>
          <Input
            id="asset-url"
            value={assetUrl}
            onChange={(e) => setAssetUrl(e.target.value)}
            placeholder="/models/character.glb"
          />
        </div>

        {/* Quick actions for character */}
        <div className="flex gap-2">
          <Button 
            onClick={handleAddCharacter}
            variant="outline"
            className="flex-1"
            disabled={!characterId || !assetUrl}
          >
            –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          </Button>
        </div>

        <hr className="border-border" />

        {/* Equipment section */}
        <div className="space-y-3">
          <h4 className="font-semibold text-sm">–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</h4>
          
          {/* Slot selection */}
          <div className="space-y-2">
            <Label>–°–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</Label>
            <Select value={selectedSlot} onValueChange={(value) => setSelectedSlot(value as SlotName)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {slotOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Bone name */}
          <div className="space-y-2">
            <Label htmlFor="bone-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
            <Select value={boneName} onValueChange={setBoneName}>
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Å—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">–ë–µ–∑ –∫–æ—Å—Ç–∏ (—è–∫–æ—Ä–Ω–∞—è —Ç–æ—á–∫–∞)</SelectItem>
                {commonBones.map((bone) => (
                  <SelectItem key={bone} value={bone}>
                    {bone}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Scale */}
          <div className="space-y-2">
            <Label htmlFor="scale">–ú–∞—Å—à—Ç–∞–±: {scale}</Label>
            <input
              id="scale"
              type="range"
              min="0.1"
              max="3"
              step="0.1"
              value={scale}
              onChange={(e) => setScale(parseFloat(e.target.value))}
              className="w-full"
            />
          </div>

          {/* Add equipment button */}
          <Button 
            onClick={handleAddEquipment}
            className="w-full"
            disabled={!characterId || !assetUrl || !selectedSlot}
          >
            –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
          </Button>
        </div>

        <hr className="border-border" />

        {/* Quick equipment buttons */}
        <div className="space-y-2">
          <h4 className="font-semibold text-sm">–ë—ã—Å—Ç—Ä–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞</h4>
          <div className="grid grid-cols-2 gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickEquip('head', '/models/hat.glb', 'Head')}
              disabled={!characterId}
            >
              üé© –®–ª—è–ø–∞
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickEquip('mainHand', '/models/sword.glb', 'RightHand')}
              disabled={!characterId}
            >
              ‚öîÔ∏è –ú–µ—á
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickEquip('back', '/models/cloak.glb')}
              disabled={!characterId}
            >
              üß• –ü–ª–∞—â
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleQuickEquip('body', '/models/armor.glb')}
              disabled={!characterId}
            >
              üõ°Ô∏è –î–æ—Å–ø–µ—Ö
            </Button>
          </div>
        </div>

        {/* Instructions */}
        <div className="text-xs text-muted-foreground space-y-1">
          <p>‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∑–∞—Ç–µ–º —ç–∫–∏–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ</p>
          <p>‚Ä¢ –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–∫–µ–ª–µ—Ç, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Å—Ç–∏</p>
          <p>‚Ä¢ –ë–µ–∑ –∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –∫—Ä–µ–ø–∏—Ç—Å—è –∫ —è–∫–æ—Ä–Ω–æ–π —Ç–æ—á–∫–µ —Å–ª–æ—Ç–∞</p>
          <p>‚Ä¢ –ö–ª–∏–∫ –ø–æ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã–±–µ—Ä–µ—Ç –≤—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
        </div>
      </CardContent>
    </Card>
  );
};