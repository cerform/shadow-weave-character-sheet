import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Upload, Download, FolderOpen, X } from 'lucide-react';
import { MapScaleController } from './controls/MapScaleController';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useParams } from 'react-router-dom';

interface MapUploaderProps {
  onMapLoaded: (imageUrl: string, scale?: number) => void;
  currentMapUrl?: string;
  onMapRemove?: () => void;
}

const MapUploader: React.FC<MapUploaderProps> = ({
  onMapLoaded,
  currentMapUrl,
  onMapRemove
}) => {
  const { toast } = useToast();
  const { id: sessionId } = useParams<{ id: string }>();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [uploading, setUploading] = useState(false);
  const [scale, setScale] = useState([100]);

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB)
    if (file.size > 50 * 1024 * 1024) {
      toast({
        title: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
        description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB",
        variant: "destructive"
      });
      return;
    }

    setUploading(true);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', authError);
        toast({
          title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
          description: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å –∫–∞—Ä—Ç—ã",
          variant: "destructive"
        });
        setUploading(false);
        return;
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.id);

      const fileExt = file.name.split('.').pop();
      const fileName = `map_${Date.now()}.${fileExt}`;
      const filePath = fileName;

      console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ bucket battle-maps:', filePath);

      const { error: uploadError, data: uploadData } = await supabase.storage
        .from('battle-maps')
        .upload(filePath, file);

      if (uploadError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ storage:', uploadError);
        throw uploadError;
      }

      console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', uploadData);

      const { data } = supabase.storage
        .from('battle-maps')
        .getPublicUrl(filePath);

      console.log('üîó –ü–æ–ª—É—á–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π URL:', data.publicUrl);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å sessionId
      if (sessionId) {
        try {
          console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –ë–î –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
          
          const { error: dbError } = await supabase
            .from('battle_maps')
            .insert({
              session_id: sessionId,
              name: file.name,
              image_url: data.publicUrl,
              width: 800,
              height: 600,
              grid_size: 25
            });

          if (dbError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError);
          } else {
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          }
        } catch (dbError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', dbError);
        }
      }

      onMapLoaded(data.publicUrl, scale[0]);
      
      toast({
        title: "–ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞",
        description: "–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
      });

    } catch (error: any) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        statusCode: error.statusCode,
        error: error.error,
        hint: error.hint
      });
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    } finally {
      setUploading(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  const handleScaleChange = (newScale: number[]) => {
    setScale(newScale);
    if (currentMapUrl) {
      onMapLoaded(currentMapUrl, newScale[0]);
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FolderOpen className="h-5 w-5" />
          –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {!currentMapUrl ? (
          <>
            <div className="space-y-2">
              <Label htmlFor="map-upload">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã</Label>
              <div className="flex items-center gap-2">
                <Input
                  id="map-upload"
                  type="file"
                  accept="image/*"
                  ref={fileInputRef}
                  onChange={handleFileUpload}
                  disabled={uploading}
                  className="flex-1"
                />
                <Button
                  onClick={() => fileInputRef.current?.click()}
                  disabled={uploading}
                  size="sm"
                >
                  <Upload className="h-4 w-4 mr-2" />
                  {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å'}
                </Button>
              </div>
            </div>

            <div className="text-sm text-muted-foreground space-y-1">
              <p>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP</p>
              <p>‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB</p>
              <p>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 2048x2048 –∏–ª–∏ –≤—ã—à–µ</p>
            </div>
          </>
        ) : (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium">–ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</span>
              <Button
                variant="outline"
                size="sm"
                onClick={onMapRemove}
              >
                <X className="h-4 w-4 mr-2" />
                –£–¥–∞–ª–∏—Ç—å
              </Button>
            </div>

            <MapScaleController
              scale={scale[0]}
              onScaleChange={(newScale) => handleScaleChange([newScale])}
              min={50}
              max={500}
              step={10}
              label="–ú–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã"
            />

            <Button
              variant="outline"
              size="sm"
              onClick={() => fileInputRef.current?.click()}
              disabled={uploading}
              className="w-full"
            >
              <Upload className="h-4 w-4 mr-2" />
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É
            </Button>
            
            <input
              type="file"
              accept="image/*"
              ref={fileInputRef}
              onChange={handleFileUpload}
              className="hidden"
            />
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default MapUploader;