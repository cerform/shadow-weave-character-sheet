// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –±–æ–µ–≤–æ–π –∫–∞—Ä—Ç—ã
import React, { useEffect, useMemo, useState } from 'react';
import { Canvas } from '@react-three/fiber';
import * as THREE from 'three';
import { useUnifiedBattleStore } from '@/stores/unifiedBattleStore';
import { EnhancedBattleToken3D } from '../enhanced/EnhancedBattleToken3D';
import { MovementIndicator } from '../enhanced/MovementIndicator';
import { FogInteractionSystem } from '../fog/FogInteractionSystem';
import { CameraControlSystem } from '../camera/CameraControlSystem';
import { BattleSystemAdapter } from '@/adapters/battleSystemAdapter';
import { interactionManager, InteractionMode } from '@/systems/interaction/InteractionModeManager';

interface BattleEcosystemProps {
  showFog?: boolean;
  showMovement?: boolean;
  enableCameraControls?: boolean;
}

export const BattleEcosystem: React.FC<BattleEcosystemProps> = ({
  showFog = true,
  showMovement = true,
  enableCameraControls = true,
}) => {
  const {
    tokens,
    activeId,
    showMovementGrid,
    mapImageUrl,
    paintMode,
    brushSize,
    characters,
    setCharacters,
    isDM,
    settings,
  } = useUnifiedBattleStore();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [canvasKey, setCanvasKey] = useState(0);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ D&D 5e
  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if (tokens.length === 0 && characters.length === 0) {
      const { initializeBattleScene } = useUnifiedBattleStore.getState();
      initializeBattleScene();
    }
    
    if (tokens.length > 0 && characters.length === 0) {
      const newCharacters = BattleSystemAdapter.createDemoCharactersFromTokens(tokens);
      setCharacters(newCharacters);
    }
  }, [tokens, characters.length, setCharacters]);

  const lighting = useMemo(() => ({
    ambient: { intensity: 0.6 },
    directional: { position: [10, 15, 5], intensity: 1 }
  }), []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π
  const MapPlaneWithTexture = ({ imageUrl }: { imageUrl: string }) => {
    const texture = React.useMemo(() => {
      const loader = new THREE.TextureLoader();
      return loader.load(imageUrl);
    }, [imageUrl]);
    
    return (
      <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.1, 0]}>
        <planeGeometry args={[24, 16]} />
        <meshStandardMaterial 
          map={texture}
          transparent 
          opacity={0.9}
        />
      </mesh>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const MapPlaneDefault = () => (
    <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.1, 0]}>
      <planeGeometry args={[24, 16]} />
      <meshStandardMaterial 
        color="#2d3748" 
        transparent 
        opacity={1.0}
      />
    </mesh>
  );

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ (—Å–∫—Ä—ã—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã)
  const visibleTokens = useMemo(() => {
    if (isDM) {
      return tokens;
    }
    return tokens.filter(token => token.isVisible !== false);
  }, [tokens, isDM]);

  return (
    <Canvas
      key={canvasKey} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      shadows 
      camera={{ position: [0, 25, 0], fov: 45, up: [0, 0, -1] }}
      gl={{ 
        antialias: true,
        preserveDrawingBuffer: true,
        failIfMajorPerformanceCaveat: false,
        powerPreference: "high-performance"
      }}
      onCreated={({ gl, camera }) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è WebGL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const canvas = gl.domElement;
        
        canvas.addEventListener('webglcontextlost', (event) => {
          console.warn('üö® WebGL –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É');
          event.preventDefault();
        });
        
        canvas.addEventListener('webglcontextrestored', () => {
          console.log('‚úÖ WebGL –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Canvas');
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å Canvas —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            setCanvasKey(prev => prev + 1);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
            setTimeout(() => {
              interactionManager.setMode(InteractionMode.TOKENS);
              interactionManager.setActive(true);
              console.log('üîÑ All interaction systems restored after context recovery');
            }, 200);
          }, 100);
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
        camera.position.set(0, 20, 0);
        camera.lookAt(0, 0, 0);
        camera.updateProjectionMatrix();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º renderer
        gl.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        gl.setSize(window.innerWidth, window.innerHeight);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        interactionManager.setMode(InteractionMode.TOKENS);
        interactionManager.setActive(true);
        console.log('üéÆ Battle ecosystem initialized with active TOKENS mode');
      }}
    >
      {/* –û—Å–≤–µ—â–µ–Ω–∏–µ */}
      <ambientLight intensity={lighting.ambient.intensity} />
      <directionalLight 
        castShadow 
        position={lighting.directional.position as [number, number, number]} 
        intensity={lighting.directional.intensity}
        shadow-mapSize={[2048, 2048]}
        shadow-camera-far={50}
        shadow-camera-left={-20}
        shadow-camera-right={20}
        shadow-camera-top={20}
        shadow-camera-bottom={-20}
      />

      {/* –û—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã */}
      {mapImageUrl ? (
        <React.Suspense fallback={<MapPlaneDefault />}>
          <MapPlaneWithTexture imageUrl={mapImageUrl} />
        </React.Suspense>
      ) : (
        <MapPlaneDefault />
      )}

      {/* –°–µ—Ç–∫–∞ –ø–æ–ª—è */}
      <gridHelper 
        args={[24, 24, "#22c55e", "#64748b"]} 
        position={[0, 0, 0]}
      />
      
      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è –î–ú */}
      {settings.showGridNumbers && isDM && (
        <gridHelper 
          args={[24, 24, "#3b82f6", "#475569"]} 
          position={[0, 0.01, 0]}
        />
      )}

      {/* –¢–æ–∫–µ–Ω—ã */}
      {visibleTokens.map((token) => (
        <EnhancedBattleToken3D 
          key={token.id} 
          token={token} 
        />
      ))}

      {/* –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π */}
      {enableCameraControls && <CameraControlSystem />}
      
      {/* –°–∏—Å—Ç–µ–º–∞ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –î–ú) */}
      {showFog && isDM && (
        <FogInteractionSystem 
          paintMode={paintMode}
          brushSize={brushSize}
        />
      )}
    </Canvas>
  );
};