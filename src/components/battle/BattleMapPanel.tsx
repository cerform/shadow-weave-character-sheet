
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import BattleCanvas from './BattleCanvas';
import TokenManager from './TokenManager';
import InitiativePanel from './InitiativePanel';
import MapUploader from '../session/MapUploader';
import { Map, Users, Swords, Plus, Shield, Zap } from 'lucide-react';
import PlayerViewPanel from './PlayerViewPanel';

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç socket
interface BattleToken {
  id: string;
  name: string;
  x: number;
  y: number;
  color: string;
  size: number;
  type: 'player' | 'npc' | 'monster';
  hp?: number;
  maxHp?: number;
}

interface BattleMapPanelProps {
  isDM?: boolean;
  sessionId?: string;
}

const BattleMapPanel: React.FC<BattleMapPanelProps> = ({ 
  isDM = false,
  sessionId
}) => {
  const [tokens, setTokens] = useState<BattleToken[]>([]);
  const [selectedTokenId, setSelectedTokenId] = useState<string | null>(null);
  const [isBattleActive, setIsBattleActive] = useState(false);
  const [mapBackground, setMapBackground] = useState<string | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π –∫–∞—Ä—Ç—ã');
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  const handleTokenAdd = (tokenData: Omit<BattleToken, 'id'>) => {
    const newToken: BattleToken = {
      ...tokenData,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
    };
    
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', newToken);
    setTokens(prev => [...prev, newToken]);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const handleTokenUpdate = (tokenId: string, updates: Partial<BattleToken>) => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', tokenId, updates);
    setTokens(prev => prev.map(token => 
      token.id === tokenId ? { ...token, ...updates } : token
    ));
  };

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const handleTokenMove = (tokenId: string, x: number, y: number) => {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    if (isBattleActive && !isDM) {
      return; // –í–æ –≤—Ä–µ–º—è –±–æ—è —Ç–æ–ª—å–∫–æ DM –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
    }

    // –†–∞–∑—Ä–µ—à–∞–µ–º –∏–≥—Ä–æ–∫–∞–º –¥–≤–∏–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
    const token = tokens.find(t => t.id === tokenId);
    if (!isDM && token?.type !== 'player') {
      return; // –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å –Ω–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
    }

    console.log('üöÄ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', tokenId, 'to', x, y);
    setTokens(prev => prev.map(token =>
      token.id === tokenId ? { ...token, x, y } : token
    ));
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ DM)
  const handleTokenDelete = (tokenId: string) => {
    if (!isDM) return;
    
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', tokenId);
    setTokens(prev => prev.filter(token => token.id !== tokenId));
    
    if (selectedTokenId === tokenId) {
      setSelectedTokenId(null);
    }
  };

  // –ù–∞—á–∞–ª–æ/–æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è (—Ç–æ–ª—å–∫–æ DM)
  const toggleBattle = () => {
    if (!isDM) return;
    
    const newState = !isBattleActive;
    console.log('‚öîÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ—è:', newState ? '–ù–ê–ß–ê–õ–°–Ø' : '–ó–ê–í–ï–†–®–ò–õ–°–Ø');
    setIsBattleActive(newState);
  };

  // –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ DM)
  const clearMap = () => {
    if (!isDM) return;
    
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã');
    setTokens([]);
    setSelectedTokenId(null);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è DM)
  const addTestTokens = () => {
    if (!isDM) return;
    
    const testTokens: Omit<BattleToken, 'id'>[] = [
      {
        name: 'üõ°Ô∏è –ü–∞–ª–∞–¥–∏–Ω',
        x: 120,
        y: 120,
        color: '#3B82F6',
        size: 1,
        type: 'player',
        hp: 35,
        maxHp: 35
      },
      {
        name: 'üîÆ –í–æ–ª—à–µ–±–Ω–∏–∫',
        x: 180,
        y: 120,
        color: '#8B5CF6',
        size: 1,
        type: 'player',
        hp: 22,
        maxHp: 25
      },
      {
        name: 'üèπ –°–ª–µ–¥–æ–ø—ã—Ç',
        x: 240,
        y: 120,
        color: '#10B981',
        size: 1,
        type: 'player',
        hp: 28,
        maxHp: 30
      },
      {
        name: '‚öîÔ∏è –û—Ä–∫-–≤–æ–∏–Ω',
        x: 360,
        y: 240,
        color: '#EF4444',
        size: 1,
        type: 'monster',
        hp: 15,
        maxHp: 15
      },
      {
        name: 'üó°Ô∏è –ì–æ–±–ª–∏–Ω-–ª—É—á–Ω–∏–∫',
        x: 420,
        y: 180,
        color: '#F59E0B',
        size: 1,
        type: 'monster',
        hp: 7,
        maxHp: 7
      },
      {
        name: 'üêâ –ú–æ–ª–æ–¥–æ–π –¥—Ä–∞–∫–æ–Ω',
        x: 480,
        y: 300,
        color: '#DC2626',
        size: 2,
        type: 'monster',
        hp: 75,
        maxHp: 75
      }
    ];
    
    testTokens.forEach(tokenData => handleTokenAdd(tokenData));
  };

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Map className="h-5 w-5" />
              <span>‚öîÔ∏è –ë–æ–µ–≤–∞—è –∫–∞—Ä—Ç–∞</span>
              {isBattleActive && (
                <Badge variant="destructive" className="animate-pulse">
                  <Swords className="h-3 w-3 mr-1" />
                  –ë–æ–π –∞–∫—Ç–∏–≤–µ–Ω
                </Badge>
              )}
            </div>
            {isDM && (
              <div className="flex items-center gap-2">
                <Button size="sm" variant="outline" onClick={addTestTokens}>
                  <Plus className="h-4 w-4 mr-1" />
                  –¢–µ—Å—Ç
                </Button>
                <Button size="sm" variant="outline" onClick={clearMap}>
                  üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
                <Button
                  size="sm"
                  variant={isBattleActive ? "destructive" : "default"}
                  onClick={toggleBattle}
                >
                  {isBattleActive ? (
                    <>
                      <Shield className="h-4 w-4 mr-1" />
                      –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π
                    </>
                  ) : (
                    <>
                      <Swords className="h-4 w-4 mr-1" />
                      –ù–∞—á–∞—Ç—å –±–æ–π
                    </>
                  )}
                </Button>
              </div>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <Users className="h-4 w-4" />
              <span>–¢–æ–∫–µ–Ω–æ–≤: {tokens.length}</span>
            </div>
            {selectedTokenId && (
              <Badge variant="outline">
                üéØ –í—ã–±—Ä–∞–Ω: {tokens.find(t => t.id === selectedTokenId)?.name}
              </Badge>
            )}
            {!isDM && (
              <Badge variant="secondary">
                üëÅÔ∏è –†–µ–∂–∏–º –∏–≥—Ä–æ–∫–∞
              </Badge>
            )}
          </div>
        </CardContent>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 h-[calc(100vh-200px)]">
        {/* –ë–æ–µ–≤–∞—è –∫–∞—Ä—Ç–∞ */}
        <div className="lg:col-span-3 flex flex-col">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>üó∫Ô∏è –ö–∞—Ä—Ç–∞ –±–æ—è</span>
                <div className="flex items-center gap-2">
                  <Badge variant="outline">
                    –¢–æ–∫–µ–Ω–æ–≤: {tokens.length}
                  </Badge>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <BattleCanvas
                width={800}
                height={600}
                gridSize={32}
                isDM={isDM}
                tokens={tokens}
                onTokenMove={handleTokenMove}
                onTokenAdd={isDM ? handleTokenAdd : undefined}
                onTokenSelect={setSelectedTokenId}
              />
            </CardContent>
          </Card>
          
          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–º –¥–ª—è DM */}
          {isDM && (
            <div className="mt-4 flex gap-2 justify-center">
              <Button
                size="lg"
                variant={isBattleActive ? "destructive" : "default"}
                onClick={toggleBattle}
                className="min-w-32"
              >
                {isBattleActive ? (
                  <>
                    <Shield className="h-5 w-5 mr-2" />
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π
                  </>
                ) : (
                  <>
                    <Swords className="h-5 w-5 mr-2" />
                    –ù–∞—á–∞—Ç—å –±–æ–π
                  </>
                )}
              </Button>
            </div>
          )}
        </div>

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ */}
        {isDM && (
          <div className="lg:col-span-1 space-y-4 overflow-y-auto">
            {/* –ü–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –±–æ—è */}
            {isBattleActive && (
              <InitiativePanel
                tokens={tokens}
                isBattleActive={isBattleActive}
                onTokenSelect={setSelectedTokenId}
              />
            )}
            
            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ */}
            <TokenManager
              tokens={tokens}
              selectedTokenId={selectedTokenId}
              onTokenUpdate={handleTokenUpdate}
              onTokenDelete={handleTokenDelete}
              onTokenAdd={handleTokenAdd} // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              onTokenSelect={setSelectedTokenId}
            />
            
            {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã */}
            {!isBattleActive && (
              <MapUploader 
                onMapUpload={setMapBackground}
                currentMap={mapBackground}
              />
            )}
            
            {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
            <PlayerViewPanel
              tokens={tokens}
              showPlayerView={isDM}
              mapBackground={mapBackground}
            />
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
        {!isDM && (
          <div className="lg:col-span-1 space-y-4">
            {/* –ü–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ */}
            {isBattleActive && (
              <InitiativePanel
                tokens={tokens}
                isBattleActive={isBattleActive}
                onTokenSelect={setSelectedTokenId}
              />
            )}
            
            {/* –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–∞ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5" />
                  –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {tokens.filter(t => t.type === 'player').map(token => (
                    <div
                      key={token.id}
                      className={`p-2 border rounded cursor-pointer transition-colors ${
                        selectedTokenId === token.id ? 'border-primary bg-primary/10' : 'hover:bg-muted/50'
                      } ${isBattleActive ? 'opacity-75' : ''}`}
                      onClick={() => setSelectedTokenId(token.id)}
                    >
                      <div className="flex items-center gap-2">
                        <div
                          className="w-4 h-4 rounded-full border"
                          style={{ backgroundColor: token.color }}
                        />
                        <span className="text-sm font-medium">{token.name}</span>
                        {isBattleActive && (
                          <Badge variant="secondary" className="text-xs">
                            üîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω
                          </Badge>
                        )}
                      </div>
                      {token.hp !== undefined && (
                        <div className="mt-1">
                          <Badge variant="outline" className="text-xs">
                            ‚ù§Ô∏è {token.hp}/{token.maxHp}
                          </Badge>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                
                {tokens.filter(t => t.type === 'player').length === 0 && (
                  <div className="text-center py-4 text-muted-foreground">
                    <Users className="h-8 w-8 mx-auto mb-2 opacity-50" />
                    <p className="text-sm">–ù–µ—Ç –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default BattleMapPanel;
