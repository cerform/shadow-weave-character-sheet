// –†–∞–±–æ—á–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—É–º–∞–Ω–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
import React, { useRef, useEffect, useState, useCallback } from 'react';
import { useThree } from '@react-three/fiber';
import * as THREE from 'three';
import { useBattle3DControlStore } from '@/stores/battle3DControlStore';

interface WorkingFogSystemProps {
  paintMode: 'reveal' | 'hide';
  brushSize: number;
}

export const WorkingFogSystem: React.FC<WorkingFogSystemProps> = ({ paintMode, brushSize }) => {
  const { scene, camera, gl } = useThree();
  const { 
    isMouseDown, 
    isDragging, 
    keysPressed, 
    shouldHandleFogInteraction 
  } = useBattle3DControlStore();
  const fogTextureRef = useRef<THREE.DataTexture | null>(null);
  const fogMaterialRef = useRef<THREE.MeshBasicMaterial | null>(null);
  const fogPlaneRef = useRef<THREE.Mesh | null>(null);
  
  const MAP_WIDTH = 24;
  const MAP_HEIGHT = 16;
  const TEXTURE_SIZE = 512;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞
  useEffect(() => {
    console.log('üå´Ô∏è Initializing fog system');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É —Ç—É–º–∞–Ω–∞
    const textureData = new Uint8Array(TEXTURE_SIZE * TEXTURE_SIZE * 4);
    
    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–µ—Å—å —Ç—É–º–∞–Ω (–∞–ª—å—Ñ–∞ = 255)
    for (let i = 0; i < textureData.length; i += 4) {
      textureData[i] = 0;     // R
      textureData[i + 1] = 0; // G  
      textureData[i + 2] = 0; // B
      textureData[i + 3] = 200; // A - —Ç—É–º–∞–Ω
    }
    
    const texture = new THREE.DataTexture(textureData, TEXTURE_SIZE, TEXTURE_SIZE, THREE.RGBAFormat);
    texture.needsUpdate = true;
    texture.flipY = false;
    
    fogTextureRef.current = texture;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    const material = new THREE.MeshBasicMaterial({
      map: texture,
      transparent: true,
      opacity: 0.8,
      color: 0x000000,
      side: THREE.DoubleSide
    });
    
    fogMaterialRef.current = material;
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å —Ç—É–º–∞–Ω–∞
    const geometry = new THREE.PlaneGeometry(MAP_WIDTH, MAP_HEIGHT);
    const mesh = new THREE.Mesh(geometry, material);
    mesh.rotation.x = -Math.PI / 2;
    mesh.position.y = 0.01; // –ß—É—Ç—å –≤—ã—à–µ –∫–∞—Ä—Ç—ã
    mesh.name = 'fog-layer';
    
    fogPlaneRef.current = mesh;
    scene.add(mesh);
    
    console.log('üå´Ô∏è Fog system initialized');
    
    return () => {
      if (fogPlaneRef.current) {
        scene.remove(fogPlaneRef.current);
        console.log('üå´Ô∏è Fog system cleaned up');
      }
      if (fogTextureRef.current) {
        fogTextureRef.current.dispose();
      }
      if (fogMaterialRef.current) {
        fogMaterialRef.current.dispose();
      }
    };
  }, [scene]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–µ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  const paintFog = useCallback((worldX: number, worldZ: number) => {
    if (!fogTextureRef.current) return;
    
    const texture = fogTextureRef.current;
    const data = texture.image.data as Uint8Array;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç—É—Ä—ã
    const texX = Math.floor(((worldX + MAP_WIDTH / 2) / MAP_WIDTH) * TEXTURE_SIZE);
    const texY = Math.floor(((worldZ + MAP_HEIGHT / 2) / MAP_HEIGHT) * TEXTURE_SIZE);
    
    // –†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö —Ç–µ–∫—Å—Ç—É—Ä—ã
    const brushRadius = Math.max(1, brushSize * 10);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    let actualPaintMode = paintMode;
    if (keysPressed.shift) {
      actualPaintMode = 'hide'; // Shift = –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–º–∞–Ω
    } else if (keysPressed.ctrl) {
      actualPaintMode = 'reveal'; // Ctrl = —É–±—Ä–∞—Ç—å —Ç—É–º–∞–Ω
    }
    
    let changed = false;
    
    for (let dy = -brushRadius; dy <= brushRadius; dy++) {
      for (let dx = -brushRadius; dx <= brushRadius; dx++) {
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance <= brushRadius) {
          const x = texX + dx;
          const y = texY + dy;
          
          if (x >= 0 && x < TEXTURE_SIZE && y >= 0 && y < TEXTURE_SIZE) {
            const index = (y * TEXTURE_SIZE + x) * 4;
            
            if (actualPaintMode === 'reveal') {
              // –£–±–∏—Ä–∞–µ–º —Ç—É–º–∞–Ω (–¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º)
              if (data[index + 3] > 0) {
                data[index + 3] = 0;
                changed = true;
              }
            } else {
              // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–º–∞–Ω
              if (data[index + 3] < 200) {
                data[index + 3] = 200;
                changed = true;
              }
            }
          }
        }
      }
    }
    
    if (changed) {
      texture.needsUpdate = true;
      console.log(`üñåÔ∏è Painted fog at world coords (${worldX.toFixed(1)}, ${worldZ.toFixed(1)}), texture coords (${texX}, ${texY}), mode: ${actualPaintMode}, modifiers: ${JSON.stringify(keysPressed)}`);
    }
  }, [paintMode, brushSize, keysPressed]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç—É–º–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—ã—à–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  const previousMouseStateRef = useRef({ isMouseDown: false, isDragging: false });
  
  useEffect(() => {
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã—à—å –Ω–∞–∂–∞—Ç–∞ –∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—É–º–∞–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if (isMouseDown && shouldHandleFogInteraction()) {
      const canvas = gl.domElement;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
      const getMouseWorldPosition = () => {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–Ω–≤–∞—Å–∞
        const lastMouseX = (canvas as any)._lastMouseX || 0;
        const lastMouseY = (canvas as any)._lastMouseY || 0;
        
        const mouse = new THREE.Vector2(lastMouseX, lastMouseY);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–π–∫–∞—Å—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ–π
        const raycaster = new THREE.Raycaster();
        raycaster.setFromCamera(mouse, camera);
        
        // –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –∫–∞—Ä—Ç—ã (y = 0)
        const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);
        const intersectionPoint = raycaster.ray.intersectPlane(plane, new THREE.Vector3());
        
        return intersectionPoint;
      };
      
      // –†–∏—Å—É–µ–º —Ç—É–º–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
      if (!previousMouseStateRef.current.isMouseDown || isDragging) {
        const worldPos = getMouseWorldPosition();
        if (worldPos) {
          console.log('üñåÔ∏è Painting fog at:', worldPos.x, worldPos.z, 'Keys:', keysPressed);
          paintFog(worldPos.x, worldPos.z);
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    previousMouseStateRef.current = { isMouseDown, isDragging };
  }, [isMouseDown, isDragging, shouldHandleFogInteraction, gl, camera, paintFog, keysPressed]);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
  useEffect(() => {
    const canvas = gl.domElement;
    
    const trackMousePosition = (e: MouseEvent) => {
      const rect = canvas.getBoundingClientRect();
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–µ–∑ –¥–≤–æ–π–Ω–æ–π –∏–Ω–≤–µ—Ä—Å–∏–∏
      const mouseX = ((e.clientX - rect.left) / rect.width) * 2 - 1;
      const mouseY = (((e.clientY - rect.top) / rect.height) * 2 - 1);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –≤ DOM —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏
      (canvas as any)._lastMouseX = mouseX;
      (canvas as any)._lastMouseY = mouseY;
    };
    
    canvas.addEventListener('mousemove', trackMousePosition);
    canvas.addEventListener('pointerdown', trackMousePosition);
    canvas.addEventListener('pointermove', trackMousePosition);
    
    return () => {
      canvas.removeEventListener('mousemove', trackMousePosition);
      canvas.removeEventListener('pointerdown', trackMousePosition);
      canvas.removeEventListener('pointermove', trackMousePosition);
    };
  }, [gl]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏/—Å–æ–∫—Ä—ã—Ç–∏—è
  const revealAll = useCallback(() => {
    if (!fogTextureRef.current) return;
    
    const texture = fogTextureRef.current;
    const data = texture.image.data as Uint8Array;
    
    // –î–µ–ª–∞–µ–º –≤—Å—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π
    for (let i = 3; i < data.length; i += 4) {
      data[i] = 0;
    }
    
    texture.needsUpdate = true;
    console.log('üåû Revealed all fog');
  }, []);

  const hideAll = useCallback(() => {
    if (!fogTextureRef.current) return;
    
    const texture = fogTextureRef.current;
    const data = texture.image.data as Uint8Array;
    
    // –î–µ–ª–∞–µ–º –≤—Å—é —Ç–µ–∫—Å—Ç—É—Ä—É –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π
    for (let i = 3; i < data.length; i += 4) {
      data[i] = 200;
    }
    
    texture.needsUpdate = true;
    console.log('üå´Ô∏è Hidden all with fog');
  }, []);

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
  useEffect(() => {
    (window as any).fogControls = {
      revealAll,
      hideAll
    };
    
    return () => {
      delete (window as any).fogControls;
    };
  }, [revealAll, hideAll]);

  return null;
};