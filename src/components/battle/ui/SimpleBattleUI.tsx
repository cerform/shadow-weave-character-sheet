// –ü—Ä–æ—Å—Ç–æ–π UI —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Slider } from '@/components/ui/slider';
import { useToast } from "@/hooks/use-toast";
import { interactionManager, InteractionMode } from '@/systems/interaction/InteractionModeManager';
import { 
  Eye, 
  EyeOff, 
  Upload, 
  RotateCcw, 
  Zap, 
  Settings, 
  Map,
  Users,
  Dice6,
  Sword,
  Shield,
  Heart,
  Move,
  Package
} from 'lucide-react';
import { useEnhancedBattleStore } from '@/stores/enhancedBattleStore';

interface SimpleBattleUIProps {
  paintMode: 'reveal' | 'hide';
  setPaintMode: (mode: 'reveal' | 'hide') => void;
  brushSize: number;
  setBrushSize: (size: number) => void;
  onUploadMap: () => void;
  onClearMap: () => void;
}

export const SimpleBattleUI: React.FC<SimpleBattleUIProps> = ({
  paintMode,
  setPaintMode,
  brushSize,
  setBrushSize,
  onUploadMap,
  onClearMap
}) => {
  const { tokens, activeId, currentRound } = useEnhancedBattleStore();
  const [currentMode, setCurrentMode] = useState<InteractionMode>(InteractionMode.NAVIGATION);
  const { toast } = useToast();
  
  const activeToken = tokens.find(t => t.id === activeId);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    const unsubscribe = interactionManager.subscribe((state) => {
      setCurrentMode(state.mode);
    });
    return () => {
      unsubscribe();
    };
  }, []);

  const handleModeChange = (mode: InteractionMode) => {
    interactionManager.setMode(mode);
    const modeNames = {
      [InteractionMode.NAVIGATION]: '–ù–∞–≤–∏–≥–∞—Ü–∏—è',
      [InteractionMode.TOKENS]: '–¢–æ–∫–µ–Ω—ã', 
      [InteractionMode.FOG]: '–¢—É–º–∞–Ω',
      [InteractionMode.CAMERA]: '–ö–∞–º–µ—Ä–∞',
      [InteractionMode.ASSETS]: '–ê—Å—Å–µ—Ç—ã'
    };
    
    toast({
      title: "–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω",
      description: `–†–µ–∂–∏–º: ${modeNames[mode]}`,
    });
  };

  const handleRevealAll = () => {
    console.log('üîç Revealing all fog');
    toast({
      title: "–¢—É–º–∞–Ω —É–±—Ä–∞–Ω",
      description: "–í–µ—Å—å —Ç—É–º–∞–Ω —É–±—Ä–∞–Ω —Å –∫–∞—Ä—Ç—ã",
    });
    
    if ((window as any).fogControls?.revealAll) {
      (window as any).fogControls.revealAll();
    }
  };

  const handleHideAll = () => {
    console.log('üå´Ô∏è Hiding all with fog');
    toast({
      title: "–¢—É–º–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω",
      description: "–í—Å—è –∫–∞—Ä—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∞ —Ç—É–º–∞–Ω–æ–º",
    });
    
    if ((window as any).fogControls?.hideAll) {
      (window as any).fogControls.hideAll();
    }
  };

  const handleUploadClick = () => {
    console.log('üìÅ Upload button clicked');
    toast({
      title: "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã",
      description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    });
    onUploadMap();
  };

  const handleClearClick = () => {
    console.log('üóëÔ∏è Clear button clicked');
    toast({
      title: "–ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞",
      description: "–ö–∞—Ä—Ç–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞",
    });
    onClearMap();
  };

  return (
    <div className="fixed inset-0 pointer-events-none z-50">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ */}
      <div className="absolute top-4 left-1/2 transform -translate-x-1/2 pointer-events-auto z-50">
        <Card className="bg-background/95 backdrop-blur border shadow-lg">
          <CardContent className="p-2">
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-xs font-medium">–†–∞—É–Ω–¥ {currentRound}</span>
              </div>
              
              <Badge variant="secondary" className="text-xs">
                –†–µ–∂–∏–º: {currentMode === InteractionMode.NAVIGATION && '–ù–∞–≤–∏–≥–∞—Ü–∏—è'}
                {currentMode === InteractionMode.TOKENS && '–¢–æ–∫–µ–Ω—ã'}
                {currentMode === InteractionMode.FOG && '–¢—É–º–∞–Ω'}
                {currentMode === InteractionMode.CAMERA && '–ö–∞–º–µ—Ä–∞'}
                {currentMode === InteractionMode.ASSETS && '–ê—Å—Å–µ—Ç—ã'}
              </Badge>
              
              {activeToken && (
                <>
                  <Separator orientation="vertical" className="h-4" />
                  <Badge variant="outline" className="text-xs">{activeToken.name}</Badge>
                  <div className="flex items-center gap-2 text-xs">
                    <span className="flex items-center gap-1 text-red-600">
                      <Heart className="w-3 h-3" />
                      {activeToken.hp}/{activeToken.maxHp}
                    </span>
                    <span className="flex items-center gap-1 text-blue-600">
                      <Shield className="w-3 h-3" />
                      {activeToken.ac}
                    </span>
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <div className="absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-auto z-40">
        <Card className="bg-background/95 backdrop-blur border shadow-lg">
          <CardContent className="p-3 space-y-2">
            {/* –°–µ–∫—Ü–∏—è –∫–∞—Ä—Ç—ã */}
            <div className="space-y-2">
              <div className="text-xs font-medium text-muted-foreground">–ö–∞—Ä—Ç–∞</div>
              <div className="flex gap-2">
                <Button onClick={handleUploadClick} variant="outline" size="sm">
                  <Upload className="w-3 h-3 mr-1" />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å
                </Button>
                <Button onClick={handleClearClick} variant="outline" size="sm">
                  <RotateCcw className="w-3 h-3 mr-1" />
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </div>

            <Separator />

            {/* –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ */}
            <div className="space-y-2">
              <div className="text-xs font-medium text-muted-foreground">–†–µ–∂–∏–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è</div>
              <div className="grid grid-cols-2 gap-1">
                <Button
                  variant={currentMode === InteractionMode.NAVIGATION ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleModeChange(InteractionMode.NAVIGATION)}
                >
                  <Map className="w-3 h-3 mr-1" />
                  –ö–∞—Ä—Ç–∞
                </Button>
                <Button
                  variant={currentMode === InteractionMode.TOKENS ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleModeChange(InteractionMode.TOKENS)}
                >
                  <Users className="w-3 h-3 mr-1" />
                  –¢–æ–∫–µ–Ω—ã
                </Button>
                <Button
                  variant={currentMode === InteractionMode.FOG ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleModeChange(InteractionMode.FOG)}
                >
                  <Eye className="w-3 h-3 mr-1" />
                  –¢—É–º–∞–Ω
                </Button>
                <Button
                  variant={currentMode === InteractionMode.CAMERA ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleModeChange(InteractionMode.CAMERA)}
                >
                  <Settings className="w-3 h-3 mr-1" />
                  –ö–∞–º–µ—Ä–∞
                </Button>
                <Button
                  variant={currentMode === InteractionMode.ASSETS ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleModeChange(InteractionMode.ASSETS)}
                  className="col-span-2"
                >
                  <Package className="w-3 h-3 mr-1" />
                  –ê—Å—Å–µ—Ç—ã
                </Button>
              </div>
            </div>

            <Separator />

            {/* –°–µ–∫—Ü–∏—è —Ç—É–º–∞–Ω–∞ - —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ç—É–º–∞–Ω–∞ */}
            {currentMode === InteractionMode.FOG && (
              <div className="space-y-2">
                <div className="text-xs font-medium text-muted-foreground">–¢—É–º–∞–Ω –≤–æ–π–Ω—ã</div>
                <div className="flex gap-2">
                  <Button
                    variant={paintMode === 'reveal' ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => {
                      console.log('üîç Setting paint mode to reveal');
                      toast({
                        title: "–†–µ–∂–∏–º —Ç—É–º–∞–Ω–∞",
                        description: "–†–µ–∂–∏–º: –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–ª–∞—Å—Ç–∏",
                      });
                      setPaintMode('reveal');
                    }}
                  >
                    <Eye className="w-3 h-3 mr-1" />
                    –ü–æ–∫–∞–∑–∞—Ç—å
                  </Button>
                  <Button
                    variant={paintMode === 'hide' ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => {
                      console.log('üå´Ô∏è Setting paint mode to hide');
                      toast({
                        title: "–†–µ–∂–∏–º —Ç—É–º–∞–Ω–∞",
                        description: "–†–µ–∂–∏–º: –°–∫—Ä—ã—Ç—å –æ–±–ª–∞—Å—Ç–∏",
                      });
                      setPaintMode('hide');
                    }}
                  >
                    <EyeOff className="w-3 h-3 mr-1" />
                    –°–∫—Ä—ã—Ç—å
                  </Button>
                </div>
                
                <div className="space-y-1">
                  <div className="text-xs">
                    –ö–∏—Å—Ç—å: {brushSize === 0 ? '1 –∫–ª–µ—Ç–∫–∞' : `${brushSize * 2 + 1} –∫–ª–µ—Ç–æ–∫`}
                  </div>
                  <Slider
                    value={[brushSize]}
                    onValueChange={(value) => {
                      console.log('üñåÔ∏è Brush size changed to:', value[0]);
                      toast({
                        title: "–ö–∏—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞",
                        description: `–†–∞–∑–º–µ—Ä: ${value[0] === 0 ? '1 –∫–ª–µ—Ç–∫–∞' : `${value[0] * 2 + 1} –∫–ª–µ—Ç–æ–∫`}`,
                      });
                      setBrushSize(value[0]);
                    }}
                    min={0}
                    max={5}
                    step={1}
                    className="w-full"
                  />
                </div>

                <div className="flex gap-2">
                  <Button onClick={handleRevealAll} variant="secondary" size="sm">
                    –û—Ç–∫—Ä—ã—Ç—å –≤—Å—ë
                  </Button>
                  <Button onClick={handleHideAll} variant="secondary" size="sm">
                    –°–∫—Ä—ã—Ç—å –≤—Å—ë
                  </Button>
                </div>
              </div>
            )}

            {/* –°–µ–∫—Ü–∏—è –∫–∞–º–µ—Ä—ã - —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∫–∞–º–µ—Ä—ã */}
            {currentMode === InteractionMode.CAMERA && (
              <div className="space-y-2">
                <div className="text-xs font-medium text-muted-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π</div>
                <div className="text-xs text-muted-foreground bg-muted/20 p-2 rounded">
                  <div className="font-medium mb-1">–ê–∫—Ç–∏–≤–Ω–æ:</div>
                  <div>‚Ä¢ –ú—ã—à—å - –ø–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã</div>
                  <div>‚Ä¢ –ö–æ–ª–µ—Å–æ - –∑—É–º</div>
                  <div>‚Ä¢ –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ</div>
                </div>
              </div>
            )}

            {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é */}
            <Separator />
            <div className="text-xs text-muted-foreground bg-muted/20 p-2 rounded">
              <div className="font-medium mb-1">–ö–ª–∞–≤–∏—à–∏:</div>
              <div>‚Ä¢ <span className="font-mono">1</span> - –ù–∞–≤–∏–≥–∞—Ü–∏—è</div>
              <div>‚Ä¢ <span className="font-mono">2</span> - –¢–æ–∫–µ–Ω—ã</div>
              <div>‚Ä¢ <span className="font-mono">3</span> - –¢—É–º–∞–Ω –≤–æ–π–Ω—ã</div>
              <div>‚Ä¢ <span className="font-mono">4</span> - –ö–∞–º–µ—Ä–∞</div>
              <div>‚Ä¢ <span className="font-mono">5</span> - –ê—Å—Å–µ—Ç—ã</div>
              {currentMode === InteractionMode.FOG && (
                <>
                  <div className="mt-1 pt-1 border-t border-muted">
                    <div>‚Ä¢ <span className="font-mono">Shift + –∫–ª–∏–∫</span> - –î–æ–±–∞–≤–∏—Ç—å —Ç—É–º–∞–Ω</div>
                    <div>‚Ä¢ <span className="font-mono">Ctrl + –∫–ª–∏–∫</span> - –£–±—Ä–∞—Ç—å —Ç—É–º–∞–Ω</div>
                  </div>
                </>
              )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö */}
            <Separator />
            <div className="space-y-1">
              <div className="text-xs font-medium text-muted-foreground flex items-center gap-1">
                <Users className="w-3 h-3" />
                –¢–æ–∫–µ–Ω—ã ({tokens.length})
              </div>
              {activeToken && (
                <div className="text-xs p-2 bg-muted/30 rounded">
                  <div className="font-medium">{activeToken.name}</div>
                  <div className="flex items-center gap-2 mt-1">
                    <span className="flex items-center gap-1 text-red-500">
                      <Heart className="w-2 h-2" />
                      {activeToken.hp}/{activeToken.maxHp}
                    </span>
                    <span className="flex items-center gap-1 text-blue-500">
                      <Shield className="w-2 h-2" />
                      {activeToken.ac}
                    </span>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};