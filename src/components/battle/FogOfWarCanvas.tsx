// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
import React, { useEffect, useRef, useCallback, useState } from 'react';
import { useFogOfWarStore } from '@/stores/fogOfWarStore';
import { useUnifiedBattleStore } from '@/stores/unifiedBattleStore';
import { ContextMenu } from './ContextMenu';

interface FogOfWarCanvasProps {
  mapWidth: number;
  mapHeight: number;
  mapScale: number;
  mapOffset: { x: number; y: number };
}

export const FogOfWarCanvas: React.FC<FogOfWarCanvasProps> = ({
  mapWidth,
  mapHeight,
  mapScale,
  mapOffset
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { 
    fogGrid, 
    gridWidth, 
    gridHeight, 
    cellSize, 
    spawnPoints,
    isInitialized,
    initializeFog,
    lastUpdated
  } = useFogOfWarStore();
  
  const { isDM } = useUnifiedBattleStore();
  const playerViewCanvasRef = useRef<HTMLCanvasElement>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!isInitialized) {
      initializeFog(mapWidth, mapHeight, 32);
    }
  }, [isInitialized, mapWidth, mapHeight, initializeFog]);
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—É–º–∞–Ω–∞
  const drawFog = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !fogGrid.length) return;
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å
    canvas.width = mapWidth;
    canvas.height = mapHeight;
    
    // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
    ctx.clearRect(0, 0, mapWidth, mapHeight);
    
    // –†–∏—Å—É–µ–º —Ç—É–º–∞–Ω
    ctx.fillStyle = 'rgba(0, 0, 0, 0.85)';
    
    for (let y = 0; y < gridHeight; y++) {
      for (let x = 0; x < gridWidth; x++) {
        if (fogGrid[y][x] === 0) { // –ó–∞–∫—Ä—ã—Ç–æ —Ç—É–º–∞–Ω–æ–º
          const worldX = x * cellSize;
          const worldY = y * cellSize;
          
          ctx.fillRect(worldX, worldY, cellSize, cellSize);
        }
      }
    }
    
    // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –¥–ª—è –î–ú
    if (isDM) {
      spawnPoints.forEach((spawn, index) => {
        const x = spawn.x;
        const y = spawn.y;
        
        // –§–æ–Ω —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞
        ctx.fillStyle = spawn.playerId ? 'rgba(34, 197, 94, 0.7)' : 'rgba(59, 130, 246, 0.7)';
        ctx.fillRect(x - 16, y - 16, 32, 32);
        
        // –û–±–≤–æ–¥–∫–∞
        ctx.strokeStyle = spawn.playerId ? '#22c55e' : '#3b82f6';
        ctx.lineWidth = 2;
        ctx.strokeRect(x - 16, y - 16, 32, 32);
        
        // –ù–æ–º–µ—Ä —Ç–æ—á–∫–∏
        ctx.fillStyle = 'white';
        ctx.font = 'bold 14px Arial';
        ctx.textAlign = 'center';
        ctx.fillText((index + 1).toString(), x, y + 5);
      });
    }
  }, [fogGrid, gridWidth, gridHeight, cellSize, mapWidth, mapHeight, spawnPoints, isDM]);
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    drawFog();
  }, [drawFog, lastUpdated]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const [contextMenu, setContextMenu] = useState({
    visible: false,
    x: 0,
    y: 0,
    mapX: 0,
    mapY: 0
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextMenu = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDM) return;
    
    e.preventDefault();
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const mapX = (e.clientX - rect.left) / mapScale - mapOffset.x / mapScale;
    const mapY = (e.clientY - rect.top) / mapScale - mapOffset.y / mapScale;
    
    setContextMenu({
      visible: true,
      x: e.clientX,
      y: e.clientY,
      mapX,
      mapY
    });
  }, [isDM, mapScale, mapOffset]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const closeContextMenu = useCallback(() => {
    setContextMenu(prev => ({ ...prev, visible: false }));
  }, []);

  // –î–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleAddSpawn = useCallback(() => {
    const { mapX, mapY } = contextMenu;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–∏–º —Ç–æ—á–∫–∞–º —Å–ø–∞–≤–Ω–∞
    const minDistance = 64;
    const tooClose = spawnPoints.some(spawn => {
      const distance = Math.sqrt((spawn.x - mapX) ** 2 + (spawn.y - mapY) ** 2);
      return distance < minDistance;
    });
    
    if (!tooClose && spawnPoints.length < 6) {
      useFogOfWarStore.getState().addSpawnPoint(mapX, mapY);
    }
  }, [contextMenu, spawnPoints]);

  const handleAddToken = useCallback(() => {
    console.log('üé≠ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
  }, [contextMenu]);

  const handleAddAsset = useCallback(() => {
    console.log('üèõÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Å—Å–µ—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∞—Å—Å–µ—Ç–æ–≤
  }, [contextMenu]);

  const handleAddEffect = useCallback(() => {
    console.log('‚ö° –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  }, [contextMenu]);

  const handleAddTrap = useCallback(() => {
    console.log('üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≤—É—à–∫–∏ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≤—É—à–∫–∏
  }, [contextMenu]);
  
  return (
    <>
      <canvas
        ref={canvasRef}
        className="absolute inset-0 pointer-events-auto"
        style={{
          width: mapWidth,
          height: mapHeight,
          zIndex: 20,
          cursor: isDM ? 'context-menu' : 'default'
        }}
        onContextMenu={handleContextMenu}
      />
      
      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è DM */}
      {isDM && (
        <ContextMenu
          x={contextMenu.x}
          y={contextMenu.y}
          visible={contextMenu.visible}
          onClose={closeContextMenu}
          onAddSpawn={handleAddSpawn}
          onAddToken={handleAddToken}
          onAddAsset={handleAddAsset}
          onAddEffect={handleAddEffect}
          onAddTrap={handleAddTrap}
        />
      )}
      
      {/* –í–µ—Ä—Å–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ - —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ */}
      {!isDM && (
        <canvas
          ref={playerViewCanvasRef}
          className="absolute inset-0 pointer-events-none"
          style={{
            width: mapWidth,
            height: mapHeight,
            zIndex: 20
          }}
        />
      )}
    </>
  );
};