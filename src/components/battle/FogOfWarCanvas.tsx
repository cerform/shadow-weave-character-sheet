// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
import React, { useEffect, useRef, useCallback, useState } from 'react';
import { useFogOfWarStore } from '@/stores/fogOfWarStore';
import { useUnifiedBattleStore } from '@/stores/unifiedBattleStore';
import { ContextMenu } from './ContextMenu';

interface FogOfWarCanvasProps {
  mapWidth: number;
  mapHeight: number;
  mapScale: number;
  mapOffset: { x: number; y: number };
}

export const FogOfWarCanvas: React.FC<FogOfWarCanvasProps> = ({
  mapWidth,
  mapHeight,
  mapScale,
  mapOffset
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { 
    fogGrid, 
    gridWidth, 
    gridHeight, 
    cellSize, 
    spawnPoints,
    isInitialized,
    initializeFog,
    lastUpdated
  } = useFogOfWarStore();
  
  const { isDM } = useUnifiedBattleStore();
  const playerViewCanvasRef = useRef<HTMLCanvasElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const [contextMenu, setContextMenu] = useState<{
    visible: boolean;
    x: number;
    y: number;
    mapX: number;
    mapY: number;
    clickedSpawn?: any;
  }>({
    visible: false,
    x: 0,
    y: 0,
    mapX: 0,
    mapY: 0
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫ —Å–ø–∞–≤–Ω–∞
  const [dragState, setDragState] = useState<{
    isDragging: boolean;
    spawnId: string | null;
    offset: { x: number; y: number };
  }>({
    isDragging: false,
    spawnId: null,
    offset: { x: 0, y: 0 }
  });

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ (5 —Ñ–∏—Ç = 1 –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ = 32 –ø–∏–∫—Å–µ–ª—è –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ)
  const GRID_SIZE = 32; // —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  const SPAWN_SIZE = GRID_SIZE; // —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ = 1 –∫–≤–∞–¥—Ä–∞—Ç–∏–∫
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('üå´Ô∏è FogOfWarCanvas mounted, isInitialized:', isInitialized);
    console.log('üå´Ô∏è fogGrid:', fogGrid.length, 'gridWidth:', gridWidth, 'gridHeight:', gridHeight);
    
    if (!isInitialized) {
      console.log('üå´Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã, mapWidth:', mapWidth, 'mapHeight:', mapHeight);
      initializeFog(mapWidth, mapHeight, 32);
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    console.log('üå´Ô∏è FogOfWarCanvas effect - isInitialized:', isInitialized, 'fogGrid length:', fogGrid.length);
    if (!isInitialized && mapWidth > 0 && mapHeight > 0) {
      console.log('üå´Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏:', mapWidth, 'x', mapHeight);
      initializeFog(mapWidth, mapHeight, 32);
    }
  }, [isInitialized, mapWidth, mapHeight, initializeFog]);
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—É–º–∞–Ω–∞
  const drawFog = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas || !fogGrid.length) {
      console.log('üå´Ô∏è drawFog: canvas –∏–ª–∏ fogGrid –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, canvas:', !!canvas, 'fogGrid length:', fogGrid.length);
      return;
    }
    
    console.log('üå´Ô∏è –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç—É–º–∞–Ω, grid:', gridWidth, 'x', gridHeight, 'cells with fog:', 
      fogGrid.flat().filter(cell => cell === 0).length, 'revealed:', fogGrid.flat().filter(cell => cell === 1).length);
    
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å
    canvas.width = mapWidth;
    canvas.height = mapHeight;
    
    // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å
    ctx.clearRect(0, 0, mapWidth, mapHeight);
    
    // –†–∏—Å—É–µ–º —Ç—É–º–∞–Ω (—Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫)
    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)'; // –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Ç—É–º–∞–Ω –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
    
    let foggyCells = 0;
    for (let y = 0; y < gridHeight; y++) {
      for (let x = 0; x < gridWidth; x++) {
        if (fogGrid[y][x] === 0) { // –ó–∞–∫—Ä—ã—Ç–æ —Ç—É–º–∞–Ω–æ–º
          const worldX = x * cellSize;
          const worldY = y * cellSize;
          
          ctx.fillRect(worldX, worldY, cellSize, cellSize);
          foggyCells++;
        }
      }
    }
    
    console.log('üå´Ô∏è –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–æ', foggyCells, '—Ç—É–º–∞–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫');
    
    // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –¥–ª—è –î–ú
    if (isDM) {
      spawnPoints.forEach((spawn, index) => {
        const isBeingDragged = dragState.isDragging && dragState.spawnId === spawn.id;
        const size = SPAWN_SIZE;
        const halfSize = size / 2;
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ (snap to grid)
        const gridX = Math.round(spawn.x / GRID_SIZE) * GRID_SIZE;
        const gridY = Math.round(spawn.y / GRID_SIZE) * GRID_SIZE;
        
        const x = isBeingDragged ? spawn.x : gridX;
        const y = isBeingDragged ? spawn.y : gridY;
        
        // –§–æ–Ω —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ (–∫–≤–∞–¥—Ä–∞—Ç 32x32 –ø–∏–∫—Å–µ–ª—è = 5 —Ñ–∏—Ç)
        ctx.fillStyle = spawn.playerId 
          ? (isBeingDragged ? 'rgba(34, 197, 94, 0.9)' : 'rgba(34, 197, 94, 0.7)')
          : (isBeingDragged ? 'rgba(59, 130, 246, 0.9)' : 'rgba(59, 130, 246, 0.7)');
        ctx.fillRect(x - halfSize, y - halfSize, size, size);
        
        // –û–±–≤–æ–¥–∫–∞
        ctx.strokeStyle = spawn.playerId ? '#22c55e' : '#3b82f6';
        ctx.lineWidth = isBeingDragged ? 3 : 2;
        ctx.strokeRect(x - halfSize, y - halfSize, size, size);
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫ —Å–µ—Ç–∫–µ
        if (isBeingDragged) {
          ctx.setLineDash([4, 4]);
          ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
          ctx.lineWidth = 1;
          ctx.strokeRect(gridX - halfSize, gridY - halfSize, size, size);
          ctx.setLineDash([]);
        }
        
        // –ù–æ–º–µ—Ä —Ç–æ—á–∫–∏
        ctx.fillStyle = 'white';
        ctx.font = 'bold 14px Arial';
        ctx.textAlign = 'center';
        ctx.fillText((index + 1).toString(), x, y + 5);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ (5 —Ñ–∏—Ç)
        if (isBeingDragged) {
          ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
          ctx.fillRect(x - halfSize, y + halfSize + 2, size, 16);
          ctx.fillStyle = 'white';
          ctx.font = '10px Arial';
          ctx.fillText('5 ft', x, y + halfSize + 12);
        }
      });
    }
  }, [fogGrid, gridWidth, gridHeight, cellSize, mapWidth, mapHeight, spawnPoints, isDM, dragState]);
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    drawFog();
  }, [drawFog, lastUpdated]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ —Å–ø–∞–≤–Ω–∞
  const getClickedSpawnPoint = useCallback((x: number, y: number) => {
    const halfSize = SPAWN_SIZE / 2;
    return spawnPoints.find(spawn => {
      const gridX = Math.round(spawn.x / GRID_SIZE) * GRID_SIZE;
      const gridY = Math.round(spawn.y / GRID_SIZE) * GRID_SIZE;
      
      return x >= gridX - halfSize && x <= gridX + halfSize &&
             y >= gridY - halfSize && y <= gridY + halfSize;
    });
  }, [spawnPoints, GRID_SIZE, SPAWN_SIZE]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDM || e.button !== 0) return; // –¢–æ–ª—å–∫–æ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = (e.clientX - rect.left) / mapScale - mapOffset.x / mapScale;
    const y = (e.clientY - rect.top) / mapScale - mapOffset.y / mapScale;
    
    const clickedSpawn = getClickedSpawnPoint(x, y);
    if (clickedSpawn) {
      setDragState({
        isDragging: true,
        spawnId: clickedSpawn.id,
        offset: {
          x: x - clickedSpawn.x,
          y: y - clickedSpawn.y
        }
      });
      e.preventDefault();
    }
  }, [isDM, mapScale, mapOffset, getClickedSpawnPoint]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ)
  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!dragState.isDragging || !dragState.spawnId) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = (e.clientX - rect.left) / mapScale - mapOffset.x / mapScale;
    const y = (e.clientY - rect.top) / mapScale - mapOffset.y / mapScale;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞
    const newX = x - dragState.offset.x;
    const newY = y - dragState.offset.y;
    
    useFogOfWarStore.getState().updateSpawnPoint(dragState.spawnId, { x: newX, y: newY });
  }, [dragState, mapScale, mapOffset]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseUp = useCallback(() => {
    if (dragState.isDragging && dragState.spawnId) {
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–µ—Ç–∫–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      const spawn = spawnPoints.find(s => s.id === dragState.spawnId);
      if (spawn) {
        const gridX = Math.round(spawn.x / GRID_SIZE) * GRID_SIZE;
        const gridY = Math.round(spawn.y / GRID_SIZE) * GRID_SIZE;
        useFogOfWarStore.getState().updateSpawnPoint(dragState.spawnId, { x: gridX, y: gridY });
      }
    }
    
    setDragState({
      isDragging: false,
      spawnId: null,
      offset: { x: 0, y: 0 }
    });
  }, [dragState, spawnPoints, GRID_SIZE]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextMenu = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDM) return;
    
    e.preventDefault();
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const mapX = (e.clientX - rect.left) / mapScale - mapOffset.x / mapScale;
    const mapY = (e.clientY - rect.top) / mapScale - mapOffset.y / mapScale;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –ø–æ —Ç–æ—á–∫–µ —Å–ø–∞–≤–Ω–∞
    const clickedSpawn = getClickedSpawnPoint(mapX, mapY);
    
    setContextMenu({
      visible: true,
      x: e.clientX,
      y: e.clientY,
      mapX,
      mapY,
      clickedSpawn // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–Ω—É—Ç—É—é —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    });
  }, [isDM, mapScale, mapOffset, getClickedSpawnPoint]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const closeContextMenu = useCallback(() => {
    setContextMenu(prev => ({ ...prev, visible: false }));
  }, []);

  // –î–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleAddSpawn = useCallback(() => {
    const { mapX, mapY } = contextMenu;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ –¥—Ä—É–≥–∏–º —Ç–æ—á–∫–∞–º —Å–ø–∞–≤–Ω–∞
    const minDistance = 64;
    const tooClose = spawnPoints.some(spawn => {
      const distance = Math.sqrt((spawn.x - mapX) ** 2 + (spawn.y - mapY) ** 2);
      return distance < minDistance;
    });
    
    if (!tooClose && spawnPoints.length < 6) {
      useFogOfWarStore.getState().addSpawnPoint(mapX, mapY);
    }
  }, [contextMenu, spawnPoints]);

  const handleAddToken = useCallback(() => {
    console.log('üé≠ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞
  }, [contextMenu]);

  const handleAddAsset = useCallback(() => {
    console.log('üèõÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Å—Å–µ—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∞—Å—Å–µ—Ç–æ–≤
  }, [contextMenu]);

  const handleAddEffect = useCallback(() => {
    console.log('‚ö° –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  }, [contextMenu]);

  const handleAddTrap = useCallback(() => {
    console.log('üéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≤—É—à–∫–∏ –≤ –ø–æ–∑–∏—Ü–∏—é:', contextMenu.mapX, contextMenu.mapY);
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≤—É—à–∫–∏
  }, [contextMenu]);

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞
  const handleDeleteSpawn = useCallback(() => {
    if (contextMenu.clickedSpawn?.id) {
      useFogOfWarStore.getState().removeSpawnPoint(contextMenu.clickedSpawn.id);
    }
  }, [contextMenu]);
  
  return (
    <>
      <canvas
        ref={canvasRef}
        className="absolute inset-0 pointer-events-auto"
        style={{
          width: `${mapWidth}px`,
          height: `${mapHeight}px`,
          zIndex: 30, // –í—ã—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–æ –Ω–∏–∂–µ UI
          cursor: dragState.isDragging ? 'grabbing' : (isDM ? 'pointer' : 'default'),
          imageRendering: 'pixelated' // –ß–µ—Ç–∫–∏–µ –ø–∏–∫—Å–µ–ª–∏
        }}
        onContextMenu={handleContextMenu}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp} // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –º—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∫–∞–Ω–≤–∞—Å
      />
      
      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è DM */}
      {isDM && (
        <ContextMenu
          x={contextMenu.x}
          y={contextMenu.y}
          visible={contextMenu.visible}
          clickedSpawn={contextMenu.clickedSpawn}
          onClose={closeContextMenu}
          onAddSpawn={handleAddSpawn}
          onAddToken={handleAddToken}
          onAddAsset={handleAddAsset}
          onAddEffect={handleAddEffect}
          onAddTrap={handleAddTrap}
          onDeleteSpawn={handleDeleteSpawn}
        />
      )}
      
      {/* –í–µ—Ä—Å–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ - —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ */}
      {!isDM && (
        <canvas
          ref={playerViewCanvasRef}
          className="absolute inset-0 pointer-events-none"
          style={{
            width: `${mapWidth}px`,
            height: `${mapHeight}px`,
            zIndex: 30,
            imageRendering: 'pixelated'
          }}
        />
      )}
    </>
  );
};