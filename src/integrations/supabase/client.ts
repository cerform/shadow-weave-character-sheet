// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mqdjwhjtvjnktobgruuu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1xZGp3aGp0dmpua3RvYmdydXV1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyNjAxMjUsImV4cCI6MjA2ODgzNjEyNX0.2Uy6dZauJ-EtfJ9UprCDLHvo9TNDdh9mA7m2dkC0Q6s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Пытаемся использовать localStorage, если доступен, иначе используем in-memory storage
const getStorageAdapter = () => {
  try {
    // Проверяем, работает ли localStorage
    const testKey = '__supabase_test__';
    window.localStorage.setItem(testKey, 'test');
    window.localStorage.removeItem(testKey);
    console.log('✅ localStorage доступен');
    return window.localStorage;
  } catch (e) {
    console.warn('⚠️ localStorage недоступен, используем in-memory storage:', e);
    // In-memory storage для sandbox/iframe окружений
    const memoryStorage: Record<string, string> = {};
    return {
      getItem: (key: string) => memoryStorage[key] || null,
      setItem: (key: string, value: string) => { memoryStorage[key] = value; },
      removeItem: (key: string) => { delete memoryStorage[key]; },
    };
  }
};

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: getStorageAdapter() as any,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storageKey: 'sb-auth-token'
  }
});