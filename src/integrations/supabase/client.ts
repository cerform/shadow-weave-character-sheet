// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mqdjwhjtvjnktobgruuu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1xZGp3aGp0dmpua3RvYmdydXV1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyNjAxMjUsImV4cCI6MjA2ODgzNjEyNX0.2Uy6dZauJ-EtfJ9UprCDLHvo9TNDdh9mA7m2dkC0Q6s";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞–º–∏)
const globalMemoryStorage: Record<string, string> = {};

// –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sessionStorage (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ iframe), –∑–∞—Ç–µ–º localStorage, –∑–∞—Ç–µ–º memory
const getStorageAdapter = () => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º sessionStorage (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –≤ iframe)
  try {
    const testKey = '__supabase_test__';
    window.sessionStorage.setItem(testKey, 'test');
    window.sessionStorage.removeItem(testKey);
    console.log('‚úÖ sessionStorage –¥–æ—Å—Ç—É–ø–µ–Ω');
    return window.sessionStorage;
  } catch (e) {
    console.warn('‚ö†Ô∏è sessionStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
  }

  // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º localStorage
  try {
    const testKey = '__supabase_test__';
    window.localStorage.setItem(testKey, 'test');
    window.localStorage.removeItem(testKey);
    console.log('‚úÖ localStorage –¥–æ—Å—Ç—É–ø–µ–Ω');
    return window.localStorage;
  } catch (e) {
    console.warn('‚ö†Ô∏è localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e);
  }

  // Fallback: –≥–ª–æ–±–∞–ª—å–Ω–æ–µ in-memory storage
  console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ in-memory storage (—Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)');
  return {
    getItem: (key: string) => {
      console.log('üìñ memory.getItem:', key, '‚Üí', globalMemoryStorage[key]?.substring(0, 50));
      return globalMemoryStorage[key] || null;
    },
    setItem: (key: string, value: string) => {
      console.log('üíæ memory.setItem:', key, '‚Üí', value.substring(0, 50));
      globalMemoryStorage[key] = value;
    },
    removeItem: (key: string) => {
      console.log('üóëÔ∏è memory.removeItem:', key);
      delete globalMemoryStorage[key];
    },
  };
};

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: getStorageAdapter() as any,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storageKey: 'sb-auth-token'
  }
});