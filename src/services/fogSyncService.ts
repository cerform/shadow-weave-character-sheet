import { VisibleArea, FogSettings } from '@/stores/fogOfWarStore';

interface FogUpdateData {
  visibleAreas: VisibleArea[];
  fogSettings: FogSettings;
  updatedBy: string;
  timestamp: number;
}

type FogUpdateCallback = (data: FogUpdateData) => void;

class FogSyncService {
  private sessionId: string | null = null;
  private callbacks: Set<FogUpdateCallback> = new Set();
  public userId: string = Math.random().toString(36).substr(2, 9);
  private connected = false;

  async initialize(sessionId: string): Promise<void> {
    this.sessionId = sessionId;
    this.connected = true;
    console.log('üîÑ Fog sync service initialized for session:', sessionId);
  }

  onFogUpdate(callback: FogUpdateCallback): void {
    this.callbacks.add(callback);
  }

  offFogUpdate(callback: FogUpdateCallback): void {
    this.callbacks.delete(callback);
  }

  broadcastFogUpdate(visibleAreas: VisibleArea[], fogSettings: FogSettings): void {
    if (!this.connected || !this.sessionId) return;

    const updateData: FogUpdateData = {
      visibleAreas,
      fogSettings,
      updatedBy: this.userId,
      timestamp: Date.now()
    };

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log('üì° Broadcasting fog update:', updateData);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    setTimeout(() => {
      this.callbacks.forEach(callback => {
        if (Math.random() > 0.9) { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          callback({
            ...updateData,
            updatedBy: 'external_user_' + Math.random().toString(36).substr(2, 4)
          });
        }
      });
    }, 1000);
  }

  async disconnect(): Promise<void> {
    this.connected = false;
    this.sessionId = null;
    this.callbacks.clear();
    console.log('üîå Fog sync service disconnected');
  }
}

export const fogSyncService = new FogSyncService();