import {
  collection,
  doc,
  setDoc,
  onSnapshot,
  query,
  where,
  orderBy,
  deleteDoc,
  getDoc,
  getDocs,
  Unsubscribe
} from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { Character } from '@/types/character';
import { getCurrentUid } from '@/utils/authHelpers';
import { normalizeCharacterAbilities } from '@/utils/characterNormalizer';
import { LocalCharacterStore } from './characterStorage';

// –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ Firestore
const CHARACTERS_COLLECTION = 'characters';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const generateCharacterId = () => `character_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
const activeSubscriptions = new Map<string, Unsubscribe>();

// üî• –†–µ–∞–ª—Ç–∞–π–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const subscribeToCharacters = (callback: (characters: Character[]) => void): Unsubscribe | null => {
  const uid = getCurrentUid();
  
  if (!uid) {
    console.log('characterService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
    const localCharacters = LocalCharacterStore.getAll();
    callback(localCharacters);
    return null;
  }

  try {
    console.log('characterService: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', uid);
    
    const q = query(
      collection(db, CHARACTERS_COLLECTION),
      where('userId', '==', uid),
      orderBy('updatedAt', 'desc')
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const characters: Character[] = [];
      
      snapshot.docs.forEach((doc) => {
        const data = doc.data();
        const normalizedCharacter = normalizeCharacterAbilities({
          ...data,
          id: doc.id
        } as Character);
        characters.push(normalizedCharacter);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        try {
          localStorage.setItem(`character_${doc.id}`, JSON.stringify(normalizedCharacter));
        } catch (e) {
          console.warn('characterService: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:', doc.id);
        }
      });
      
      console.log('characterService: –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:', characters.length);
      callback(characters);
    }, (error) => {
      console.error('characterService: –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Firestore, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', error);
      // Fallback –Ω–∞ localStorage
      const localCharacters = LocalCharacterStore.getAll(uid);
      callback(localCharacters);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø–∏—Å–∫–∏
    const subscriptionKey = `characters_${uid}`;
    activeSubscriptions.set(subscriptionKey, unsubscribe);
    
    return unsubscribe;
  } catch (error) {
    console.error('characterService: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    // Fallback –Ω–∞ localStorage
    const localCharacters = LocalCharacterStore.getAll();
    callback(localCharacters);
    return null;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
export const getUserCharacters = async (userId?: string): Promise<Character[]> => {
  try {
    const uid = userId || getCurrentUid();
    console.log('characterService: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', uid);
    
    if (!uid) {
      console.log('characterService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
      return LocalCharacterStore.getAll();
    }
    
    try {
      const q = query(
        collection(db, CHARACTERS_COLLECTION),
        where('userId', '==', uid),
        orderBy('updatedAt', 'desc')
      );
      
      const snapshot = await getDocs(q);
      const characters: Character[] = [];
      
      snapshot.docs.forEach((doc) => {
        const data = doc.data();
        const normalizedCharacter = normalizeCharacterAbilities({
          ...data,
          id: doc.id
        } as Character);
        characters.push(normalizedCharacter);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å localStorage
        try {
          localStorage.setItem(`character_${doc.id}`, JSON.stringify(normalizedCharacter));
        } catch (e) {
          console.warn('characterService: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:', doc.id);
        }
      });
      
      console.log('characterService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ Firestore:', characters.length);
      return characters;
    } catch (firestoreError) {
      console.warn('characterService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firestore, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage:', firestoreError);
      return LocalCharacterStore.getAll(uid);
    }
  } catch (error) {
    console.error('characterService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
    return LocalCharacterStore.getAll();
  }
};

// –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const getCharactersByUserId = getUserCharacters;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID
export const getCharacterById = async (characterId: string): Promise<Character | null> => {
  try {
    console.log('characterService: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID:', characterId);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Firestore
      const characterRef = doc(db, CHARACTERS_COLLECTION, characterId);
      const snapshot = await getDoc(characterRef);
      
      if (snapshot.exists()) {
        const data = snapshot.data();
        const character = normalizeCharacterAbilities({
          ...data,
          id: characterId
        } as Character);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        localStorage.setItem(`character_${character.id}`, JSON.stringify(character));
        
        console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Firestore:', character.name);
        return character;
      }
    } catch (firestoreError) {
      console.warn('characterService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Firestore, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage:', firestoreError);
    }
    
    // Fallback –Ω–∞ localStorage
    const character = LocalCharacterStore.getById(characterId);
    if (character) {
      console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage:', character.name);
      return character;
    }
    
    console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Firestore, –Ω–∏ –≤ localStorage');
    return null;
  } catch (error) {
    console.error('characterService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    return LocalCharacterStore.getById(characterId);
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ª–æ–∫–∞–ª—å–Ω–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
export const saveCharacter = (character: Character): Character => {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º userId –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!character.userId) {
      character.userId = getCurrentUid();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —Å –ø–æ–º–æ—â—å—é —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const savedCharacter = LocalCharacterStore.save(character);
    
    console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', savedCharacter.name);
    return savedCharacter;
  } catch (error) {
    console.error('characterService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
  }
};

// üî• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ Firestore
export const saveCharacterToDatabase = async (character: Character): Promise<Character> => {
  const uid = getCurrentUid();
  
  if (!uid) {
    console.warn('characterService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ localStorage');
    return saveCharacter(character);
  }

  try {
    console.log('characterService: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ Firestore:', character.name);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const normalizedCharacter = normalizeCharacterAbilities(character);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const characterData = {
      ...normalizedCharacter,
      userId: uid,
      updatedAt: new Date().toISOString(),
      createdAt: normalizedCharacter.createdAt || new Date().toISOString()
    };
    
    let characterId = character.id;
    
    if (!characterId || !characterId.startsWith('character_')) {
      characterId = generateCharacterId();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    const characterRef = doc(db, CHARACTERS_COLLECTION, characterId);
    await setDoc(characterRef, characterData);
    
    const savedCharacter = {
      ...characterData,
      id: characterId
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    LocalCharacterStore.save(savedCharacter);
    
    console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore:', savedCharacter.id);
    return savedCharacter;
  } catch (error) {
    console.error('characterService: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ:', error);
    const localCharacter = saveCharacter(character);
    return localCharacter;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–ª–∏–∞—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
export const saveCharacterToFirestore = saveCharacterToDatabase;

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export const deleteCharacter = async (characterId: string): Promise<void> => {
  try {
    console.log('characterService: –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', characterId);
    
    const uid = getCurrentUid();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ Firestore —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (uid) {
      try {
        const characterRef = doc(db, CHARACTERS_COLLECTION, characterId);
        await deleteDoc(characterRef);
        console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω –∏–∑ Firestore');
      } catch (firestoreError) {
        console.warn('characterService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firestore:', firestoreError);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    LocalCharacterStore.delete(characterId);
    
    console.log('characterService: –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('characterService: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
  }
};

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
export const unsubscribeAll = (): void => {
  console.log('characterService: –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫');
  activeSubscriptions.forEach((unsubscribe) => {
    unsubscribe();
  });
  activeSubscriptions.clear();
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∏–∑ localStorage
export const getAllBackups = (): Array<{ id: string; character: Character; timestamp: string }> => {
  const backups: Array<{ id: string; character: Character; timestamp: string }> = [];
  
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key && key.startsWith('character_backup_')) {
      try {
        const data = JSON.parse(localStorage.getItem(key) || '');
        if (data.character) {
          backups.push({
            id: key.replace('character_backup_', ''),
            character: data.character,
            timestamp: data.timestamp
          });
        }
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', key, error);
      }
    }
  }
  
  return backups.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
export const restoreFromBackup = (backupId: string): Character | null => {
  try {
    const key = `character_backup_${backupId}`;
    const data = localStorage.getItem(key);
    if (data) {
      const backup = JSON.parse(data);
      return backup.character;
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    return null;
  }
};