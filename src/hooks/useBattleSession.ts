import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';

interface DMSession {
  id: string;
  dm_id: string;
  name: string;
  description?: string;
  current_map_url?: string;
  settings: any;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

interface BattleMap {
  id: string;
  session_id: string;
  name: string;
  image_url?: string;
  file_path?: string;
  file_url?: string;
  width?: number;
  height?: number;
  grid_size: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export const useBattleSession = (sessionId?: string) => {
  const { user, isAuthenticated } = useAuth();
  const { toast } = useToast();
  const [session, setSession] = useState<DMSession | null>(null);
  const [currentMap, setCurrentMap] = useState<BattleMap | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const ensureSession = async () => {
    if (!isAuthenticated || !user) return null;

    try {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω sessionId, –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –≤ game_sessions
      if (sessionId) {
        console.log('üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –≤ game_sessions:', sessionId);
        const { data: existingSession, error: sessionError } = await supabase
          .from('game_sessions')
          .select('*')
          .eq('id', sessionId)
          .maybeSingle();

        if (!sessionError && existingSession) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è:', existingSession.id);
          setSession(existingSession as any);
          return existingSession as any;
        }
      }

      // –ï—Å–ª–∏ sessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ —Å–µ—Å—Å–∏—é
      console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ game_sessions');
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —ç—Ç–æ–≥–æ DM
      await supabase
        .from('game_sessions')
        .update({ is_active: false })
        .eq('dm_id', user.id)
        .eq('is_active', true);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–µ—Å—Å–∏–∏
      const { data: codeData } = await supabase.rpc('generate_session_code');
      const sessionCode = codeData || Math.random().toString(36).substring(2, 8).toUpperCase();

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ game_sessions
      const { data: newSession, error: createError } = await supabase
        .from('game_sessions')
        .insert({
          dm_id: user.id,
          name: `–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è ${new Date().toLocaleString('ru')}`,
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è',
          session_code: sessionCode,
          is_active: true,
          current_map_url: null,
          max_players: 6
        })
        .select()
        .single();

      if (createError) throw createError;

      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –≤ game_sessions:', newSession);
      setSession(newSession as any);
      return newSession as any;
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', err);
      setError(err.message);
      return null;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã —Å–µ—Å—Å–∏–∏ –∏–∑ game_sessions
  const loadCurrentMap = async (sessionId: string) => {
    try {
      const { data: session, error: sessionError } = await supabase
        .from('game_sessions')
        .select('current_map_url')
        .eq('id', sessionId)
        .maybeSingle();

      if (sessionError) throw sessionError;

      if (session?.current_map_url) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ battle_maps –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const mapData: BattleMap = {
          id: sessionId,
          session_id: sessionId,
          name: '–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞',
          file_url: session.current_map_url,
          image_url: session.current_map_url,
          grid_size: 64,
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        setCurrentMap(mapData);
        return mapData;
      } else {
        setCurrentMap(null);
      }
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã:', err);
      setCurrentMap(null);
    }
    return null;
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ Supabase Storage –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const saveMapToSession = async (
    file: File,
    mapName?: string,
    dimensions?: { width: number; height: number }
  ) => {
    if (!session || !user) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã",
        variant: "destructive"
      });
      return null;
    }

    try {
      setLoading(true);
      
      // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: user_id/session_id/filename
      const fileName = `${file.name}`;
      const filePath = `${user.id}/${session.id}/${fileName}`;

      console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –≤ Storage:', filePath);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('battle-maps')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: true
        });

      if (uploadError) throw uploadError;

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: urlData } = supabase.storage
        .from('battle-maps')
        .getPublicUrl(filePath);

      console.log('üó∫Ô∏è –ü–æ–ª—É—á–µ–Ω URL –∫–∞—Ä—Ç—ã:', urlData.publicUrl);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const { data: mapData, error: mapError } = await supabase
        .from('battle_maps')
        .insert({
          session_id: session.id,
          name: mapName || file.name,
          image_url: urlData.publicUrl,
          file_path: filePath,
          file_url: urlData.publicUrl,
          width: dimensions?.width,
          height: dimensions?.height,
          grid_size: 64,
          is_active: true
        })
        .select()
        .single();

      if (mapError) throw mapError;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É —Å–µ—Å—Å–∏–∏ –≤ game_sessions
      await supabase
        .from('game_sessions')
        .update({
          current_map_url: urlData.publicUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', session.id);

      setCurrentMap(mapData);
      
      toast({
        title: "–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
        description: `–ö–∞—Ä—Ç–∞ "${mapData.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏`,
      });

      console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', mapData);
      return mapData;

    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', err);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É",
        variant: "destructive"
      });
      return null;
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –∏–∑ URL (blob –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π URL)
  const saveMapFromUrl = async (
    imageUrl: string, 
    mapName?: string,
    dimensions?: { width: number; height: number }
  ) => {
    if (!session || !user) return null;

    try {
      let blob: Blob;
      
      // –ï—Å–ª–∏ —ç—Ç–æ blob URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
      if (imageUrl.startsWith('blob:')) {
        const response = await fetch(imageUrl);
        blob = await response.blob();
      } else {
        // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º Edge Function –ø—Ä–æ–∫—Å–∏
        toast({
          title: "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
          description: "–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ —Å–∞–π—Ç–∞...",
        });
        
        const { data, error } = await supabase.functions.invoke('fetch-image', {
          body: { url: imageUrl }
        });

        if (error) throw error;
        if (!data?.data) throw new Error('No image data received');

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ blob
        const base64Response = await fetch(data.data);
        blob = await base64Response.blob();
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ MIME —Ç–∏–ø–∞
      const mimeType = blob.type;
      let extension = 'png';
      if (mimeType.includes('jpeg') || mimeType.includes('jpg')) {
        extension = 'jpg';
      } else if (mimeType.includes('webp')) {
        extension = 'webp';
      } else if (mimeType.includes('gif')) {
        extension = 'gif';
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
      const timestamp = Date.now();
      const fileName = `battle-map-${timestamp}.${extension}`;
      const file = new File([blob], fileName, { type: blob.type });

      return await saveMapToSession(file, mapName || fileName, dimensions);
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ URL –≤ —Ñ–∞–π–ª:', err);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã",
        description: err.message === 'Failed to fetch' 
          ? "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é."
          : err.details || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É",
        variant: "destructive"
      });
      return null;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initialize = async () => {
      setLoading(true);
      setError(null);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Å—Å–∏–∏ –î–û –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π
      console.log('üó∫Ô∏è –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–∏');
      setCurrentMap(null);

      const sessionData = await ensureSession();
      if (sessionData) {
        console.log('üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionData.id);
        await loadCurrentMap(sessionData.id);
      } else {
        console.log('‚ÑπÔ∏è –ù–µ—Ç —Å–µ—Å—Å–∏–∏ - –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π');
      }

      setLoading(false);
    };

    if (isAuthenticated) {
      initialize();
    } else {
      setLoading(false);
      setCurrentMap(null);
    }
  }, [isAuthenticated, user, sessionId]);

  return {
    session,
    currentMap,
    loading,
    error,
    saveMapToSession,
    saveMapFromUrl,
    ensureSession,
    loadCurrentMap
  };
};