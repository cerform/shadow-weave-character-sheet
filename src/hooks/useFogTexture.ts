import { useEffect, useMemo, useRef } from "react";
import * as THREE from "three";
import { useFogOfWarStore } from "@/stores/fogOfWarStore";

/**
 * –°–æ–∑–¥–∞–µ—Ç CanvasTexture —Ä–∞–∑–º–µ—Ä–∞ 2048x2048 –¥–ª—è —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã.
 * –†–∏—Å—É–µ—Ç —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Å –∞–ª—å—Ñ–æ–π –∏ –≤—ã—Ä–µ–∑–∞–µ—Ç –∫—Ä—É–≥–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ destination-out.
 */
export function useFogTexture() {
  const { visibleAreas, fogSettings } = useFogOfWarStore();
  
  const canvas = useMemo(() => {
    const c = document.createElement("canvas");
    c.width = 2048;
    c.height = 2048;
    return c;
  }, []);
  
  const ctx = useMemo(() => canvas.getContext("2d")!, [canvas]);
  const texRef = useRef(new THREE.CanvasTexture(canvas));

  useEffect(() => {
    console.log('üå´Ô∏è useFogTexture: Updating texture, fog enabled:', fogSettings.enabled, 'visible areas:', visibleAreas.length);
    
    const WORLD_SIZE = 50; // —Ä–∞–∑–º–µ—Ä –º–∏—Ä–∞ –≤ —é–Ω–∏—Ç–∞—Ö
    const toUV = (x: number, z: number) => ({
      u: ((x + WORLD_SIZE/2) / WORLD_SIZE) * canvas.width,
      v: ((z + WORLD_SIZE/2) / WORLD_SIZE) * canvas.height,
    });

    // –û—á–∏—â–∞–µ–º –∏ —Ä–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Å –∞–ª—å—Ñ–æ–π
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.globalCompositeOperation = "source-over";
    ctx.fillStyle = `rgba(0, 0, 0, ${fogSettings.fogOpacity})`;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –í—ã—Ä–µ–∑–∞–µ–º –≤–∏–¥–∏–º—ã–µ –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ destination-out
    ctx.globalCompositeOperation = "destination-out";
    visibleAreas.forEach(area => {
      if (area.type === 'circle') {
        const { u: ux, v: vz } = toUV(area.x, area.y);
        const r = (area.radius / WORLD_SIZE) * canvas.width;
        
        console.log('üå´Ô∏è Drawing visible area at UV:', ux, vz, 'radius:', r);
        
        // –°–æ–∑–¥–∞–µ–º –º—è–≥–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∫—Ä–∞—è
        const gradient = ctx.createRadialGradient(ux, vz, 0, ux, vz, r);
        gradient.addColorStop(0, "rgba(0,0,0,1)");
        gradient.addColorStop(0.7, "rgba(0,0,0,1)");
        gradient.addColorStop(1, "rgba(0,0,0,0)");
        
        // –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        ctx.beginPath();
        ctx.arc(ux, vz, r, 0, Math.PI * 2);
        ctx.fillStyle = gradient;
        ctx.fill();
      }
    });

    texRef.current.needsUpdate = true;
  }, [canvas, ctx, visibleAreas, fogSettings]);

  return texRef.current;
}