import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useEnhancedBattleStore, EnhancedToken } from '@/stores/enhancedBattleStore';
import { useToast } from '@/hooks/use-toast';

/**
 * –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—è —Å Supabase
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –ë–î –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
export const useBattleTokensSync = (sessionId: string) => {
  const { setTokens, updateToken, addToken, removeToken } = useEnhancedBattleStore();
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!sessionId) return;

    const loadTokens = async () => {
      try {
        console.log('üìç –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
        
        const { data: tokensData, error } = await supabase
          .from('battle_tokens')
          .select('*')
          .eq('session_id', sessionId);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
          return;
        }

        if (tokensData && tokensData.length > 0) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç EnhancedToken
          const mappedTokens: EnhancedToken[] = tokensData.map(token => ({
            id: token.id,
            name: token.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π',
            hp: token.current_hp || 0,
            maxHp: token.max_hp || 0,
            ac: token.armor_class || 10,
            position: [
              token.position_x || 0,
              0, // Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è 2D/3D
              token.position_y || 0 // Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è 3D
            ] as [number, number, number],
            conditions: Array.isArray(token.conditions) ? token.conditions as string[] : [],
            isEnemy: token.token_type === 'enemy',
            isVisible: !token.is_hidden_from_players && token.is_visible !== false,
            avatarUrl: token.image_url || undefined,
            size: token.size || 1,
            speed: 6, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            hasMovedThisTurn: false,
            color: token.color || undefined,
          }));

          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:', mappedTokens.length);
          setTokens(mappedTokens);
        } else {
          console.log('‚ÑπÔ∏è –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      }
    };

    loadTokens();
  }, [sessionId, setTokens]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (!sessionId) return;

    console.log('üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);

    const channel = supabase
      .channel(`battle-tokens-${sessionId}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'battle_tokens',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('‚ûï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:', payload.new);
          const token = payload.new;
          
          const newToken: EnhancedToken = {
            id: token.id,
            name: token.name || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π',
            hp: token.current_hp || 0,
            maxHp: token.max_hp || 0,
            ac: token.armor_class || 10,
            position: [
              token.position_x || 0,
              0,
              token.position_y || 0
            ] as [number, number, number],
            conditions: Array.isArray(token.conditions) ? token.conditions as string[] : [],
            isEnemy: token.token_type === 'enemy',
            isVisible: !token.is_hidden_from_players && token.is_visible !== false,
            avatarUrl: token.image_url || undefined,
            size: token.size || 1,
            speed: 6,
            hasMovedThisTurn: false,
            color: token.color || undefined,
          };

          addToken(newToken);
          
          toast({
            title: "–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω",
            description: `${newToken.name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É`,
          });
        }
      )
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'battle_tokens',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', payload.new);
          const token = payload.new;
          
          updateToken(token.id, {
            name: token.name,
            hp: token.current_hp,
            maxHp: token.max_hp,
            ac: token.armor_class,
            position: [
              token.position_x,
              0,
              token.position_y
            ] as [number, number, number],
            conditions: Array.isArray(token.conditions) ? token.conditions as string[] : [],
            isEnemy: token.token_type === 'enemy',
            isVisible: !token.is_hidden_from_players && token.is_visible !== false,
            avatarUrl: token.image_url,
            size: token.size,
            color: token.color,
          });
        }
      )
      .on(
        'postgres_changes',
        {
          event: 'DELETE',
          schema: 'public',
          table: 'battle_tokens',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:', payload.old);
          removeToken(payload.old.id);
          
          toast({
            title: "–¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω",
            description: `${payload.old.name || '–¢–æ–∫–µ–Ω'} —É–¥–∞–ª–µ–Ω —Å –∫–∞—Ä—Ç—ã`,
          });
        }
      )
      .subscribe();

    return () => {
      console.log('üîï –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤');
      supabase.removeChannel(channel);
    };
  }, [sessionId, addToken, updateToken, removeToken, toast]);
};
