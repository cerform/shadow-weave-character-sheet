
import { useState, useEffect } from 'react';
import { Character } from '@/types/character';
import { useNavigate } from 'react-router-dom';
import { createDefaultCharacter } from '@/utils/characterUtils';
import { useCharacter } from '@/contexts/CharacterContext';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ö—É–∫–∞
export interface UseCharacterCreationReturn {
  currentStep: number;
  setCurrentStep: (step: number) => void;
  character: Character;
  updateCharacter: (updates: Partial<Character>) => void;
  createCharacter: () => Promise<void>;
  isMagicClass: boolean;
  convertToCharacter: (data: any) => Character;
  nextStep: () => void;
  prevStep: () => void;
}

export const useCharacterCreation = (): UseCharacterCreationReturn => {
  const { saveCharacter } = useCharacter();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [character, setCharacter] = useState<Character>(createDefaultCharacter());

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
    const savedCharacterCreation = localStorage.getItem('character_creation_progress');
    if (savedCharacterCreation) {
      try {
        const parsedData = JSON.parse(savedCharacterCreation);
        setCharacter(parsedData.character);
        setCurrentStep(parsedData.step);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        setCharacter(createDefaultCharacter());
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
    try {
      localStorage.setItem('character_creation_progress', JSON.stringify({
        character,
        step: currentStep
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }, [character, currentStep]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –º–∞–≥–∏—á–µ—Å–∫–∏–º
  const isMagicClass = !!character.class && ['–í–æ–ª—à–µ–±–Ω–∏–∫', '–ö–æ–ª–¥—É–Ω', '–ß–∞—Ä–æ–¥–µ–π', '–ë–∞—Ä–¥', '–î—Ä—É–∏–¥', '–ñ—Ä–µ—Ü', '–ü–∞–ª–∞–¥–∏–Ω', '–°–ª–µ–¥–æ–ø—ã—Ç'].includes(character.class);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const updateCharacter = (updates: Partial<Character>) => {
    setCharacter(prev => ({ ...prev, ...updates }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const createCharacter = async () => {
    try {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å—Ç—å –∏–º—è
      if (!character.name || character.name.trim() === '') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const savedCharacter = await saveCharacter(character);

      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è
      localStorage.removeItem('character_creation_progress');

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      if (savedCharacter && savedCharacter.id) {
        navigate(`/characters/${savedCharacter.id}`);
      } else {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        navigate('/characters');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç Character
  const convertToCharacter = (data: any): Character => {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const baseCharacter = createDefaultCharacter();
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞–º–µ–Ω—è—è undefined –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const merged = { ...baseCharacter, ...data };
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –∏ –∑–∞–º–µ–Ω—è–µ–º undefined –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const result: any = {};
    for (const [key, value] of Object.entries(merged)) {
      if (value !== undefined) {
        result[key] = value;
      } else if (key in baseCharacter) {
        result[key] = (baseCharacter as any)[key];
      }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –±–µ—Ä–µ–º –∏–∑ stats –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
    if (result.stats) {
      result.strength = result.strength !== 10 ? result.strength : (result.stats.strength || 10);
      result.dexterity = result.dexterity !== 10 ? result.dexterity : (result.stats.dexterity || 10);
      result.constitution = result.constitution !== 10 ? result.constitution : (result.stats.constitution || 10);
      result.intelligence = result.intelligence !== 10 ? result.intelligence : (result.stats.intelligence || 10);
      result.wisdom = result.wisdom !== 10 ? result.wisdom : (result.stats.wisdom || 10);
      result.charisma = result.charisma !== 10 ? result.charisma : (result.stats.charisma || 10);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º stats –æ–±—ä–µ–∫—Ç —Ç–æ–∂–µ
      result.stats = {
        strength: result.strength,
        dexterity: result.dexterity,
        constitution: result.constitution,
        intelligence: result.intelligence,
        wisdom: result.wisdom,
        charisma: result.charisma,
      };
    }
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    result.name = result.name || '';
    result.race = result.race || '';
    result.class = result.class || '';
    result.level = result.level || 1;
    result.userId = result.userId || '';
    result.spells = result.spells || [];
    result.equipment = result.equipment || [];
    result.money = result.money || { gp: 0, sp: 0, cp: 0 };
    
    console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:', result);
    
    return result as Character;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const nextStep = () => {
    setCurrentStep(prev => prev + 1);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
  const prevStep = () => {
    setCurrentStep(prev => Math.max(0, prev - 1));
  };

  return {
    currentStep,
    setCurrentStep,
    character,
    updateCharacter,
    createCharacter,
    isMagicClass,
    convertToCharacter,
    nextStep,
    prevStep
  };
};
