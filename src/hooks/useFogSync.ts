// src/hooks/useFogSync.ts
import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useFogStore } from '@/stores/fogStore';

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã —á–µ—Ä–µ–∑ Supabase Realtime
 */
export function useFogSync(sessionId: string, mapId: string = 'main-map') {
  useEffect(() => {
    if (!sessionId || sessionId === 'default-session' || sessionId === 'current-session') {
      console.warn('‚ö†Ô∏è Invalid sessionId for fog sync:', sessionId);
      return;
    }
    
    console.log(`üå´Ô∏è Initializing fog sync for session ${sessionId}, map ${mapId}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
    const loadFogState = async () => {
      try {
        const { data, error } = await supabase
          .from('fog_of_war')
          .select('grid_x, grid_y, is_revealed')
          .eq('session_id', sessionId)
          .eq('map_id', mapId);

        if (error) {
          console.error('‚ùå Error loading fog state:', error);
          return;
        }

        console.log(`üì¶ Loaded ${data?.length || 0} fog cells from DB`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        let maxX = 0;
        let maxY = 0;
        
        if (data && data.length > 0) {
          data.forEach(cell => {
            if (cell.grid_x > maxX) maxX = cell.grid_x;
            if (cell.grid_y > maxY) maxY = cell.grid_y;
          });
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1 –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        const w = Math.max(maxX + 1, 50);
        const h = Math.max(maxY + 1, 50);
        const fogMap = new Uint8Array(w * h); // 0 = —Å–∫—Ä—ã—Ç–æ, 1 = –æ—Ç–∫—Ä—ã—Ç–æ

        if (data && data.length > 0) {
          // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
          data.forEach(cell => {
            if (cell.grid_x < w && cell.grid_y < h) {
              const idx = cell.grid_y * w + cell.grid_x;
              fogMap[idx] = cell.is_revealed ? 1 : 0;
            }
          });
          console.log(`‚úÖ Loaded fog state: ${w}x${h}, ${data.filter(c => c.is_revealed).length} revealed cells`);
        } else {
          console.log(`üå´Ô∏è Initialized empty fog map (${w}x${h})`);
        }

        useFogStore.getState().setMap(mapId, fogMap, w, h);
      } catch (error) {
        console.error('‚ùå Exception in loadFogState:', error);
      }
    };

    loadFogState();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ realtime
    const channel = supabase
      .channel(`fog:${sessionId}:${mapId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'fog_of_war',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üîÑ Real-time fog change:', payload.eventType, payload);
          
          if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {
            const cell = payload.new as any;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –∫–∞—Ä—Ç–∞
            if (cell.map_id !== mapId) {
              console.log(`‚è≠Ô∏è Skipping fog update for different map: ${cell.map_id}`);
              return;
            }
            
            const { maps, size } = useFogStore.getState();
            let map = maps[mapId];
            
            if (!map) {
              console.warn('‚ö†Ô∏è Fog map not initialized, creating new map');
              // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
              const w = Math.max(cell.grid_x + 1, 50);
              const h = Math.max(cell.grid_y + 1, 50);
              map = new Uint8Array(w * h);
              useFogStore.getState().setMap(mapId, map, w, h);
            }

            // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã, —Ä–∞—Å—à–∏—Ä—è–µ–º –∫–∞—Ä—Ç—É
            if (cell.grid_x >= size.w || cell.grid_y >= size.h) {
              const newW = Math.max(size.w, cell.grid_x + 10);
              const newH = Math.max(size.h, cell.grid_y + 10);
              const newMap = new Uint8Array(newW * newH);
              
              // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
              for (let y = 0; y < size.h; y++) {
                for (let x = 0; x < size.w; x++) {
                  newMap[y * newW + x] = map[y * size.w + x];
                }
              }
              
              map = newMap;
              console.log(`üìè Expanded fog map to ${newW}x${newH}`);
            } else {
              map = new Uint8Array(map);
            }

            const idx = cell.grid_y * (cell.grid_x >= size.w ? Math.max(size.w, cell.grid_x + 10) : size.w) + cell.grid_x;
            
            if (idx >= 0 && idx < map.length) {
              map[idx] = cell.is_revealed ? 1 : 0;
              useFogStore.getState().setMap(
                mapId, 
                map, 
                cell.grid_x >= size.w ? Math.max(size.w, cell.grid_x + 10) : size.w,
                cell.grid_y >= size.h ? Math.max(size.h, cell.grid_y + 10) : size.h
              );
              console.log(`‚úÖ Real-time update: cell (${cell.grid_x}, ${cell.grid_y}) = ${cell.is_revealed ? 'revealed' : 'hidden'}`);
            }
          }
        }
      )
      .subscribe((status) => {
        console.log(`üì° Fog sync subscription status: ${status}`);
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ Successfully subscribed to fog updates');
        } else if (status === 'CHANNEL_ERROR') {
          console.error('‚ùå Error subscribing to fog updates');
        }
      });

    return () => {
      console.log('üå´Ô∏è Cleaning up fog sync');
      supabase.removeChannel(channel);
    };
  }, [sessionId, mapId]);
}
