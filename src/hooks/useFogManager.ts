import { useState, useEffect, useRef, useCallback } from 'react';
import { FogManager } from '@/game/fog/FogManager';
import { FogGridOptions, VisionSource } from '@/game/fog/FogTypes';

interface UseFogManagerOptions {
  mapSize: number;
  cellSize: number;
  sessionId?: string;
  mapId?: string;
}

export function useFogManager({ mapSize, cellSize, sessionId, mapId }: UseFogManagerOptions) {
  const [isInitialized, setIsInitialized] = useState(false);
  const [updateCounter, setUpdateCounter] = useState(0);
  const fogManagerRef = useRef<FogManager | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—É–º–∞–Ω–∞
  useEffect(() => {
    const gridOptions: FogGridOptions = {
      cols: Math.ceil(mapSize / cellSize),
      rows: Math.ceil(mapSize / cellSize),
      cellSize: cellSize
    };

    console.log('üå´Ô∏è Initializing FogManager with options:', gridOptions);

    const manager = new FogManager(gridOptions);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    manager.setUpdateCallback(() => {
      console.log('üå´Ô∏è Fog updated, triggering re-render');
      setUpdateCounter(prev => prev + 1);
    });

    fogManagerRef.current = manager;
    setIsInitialized(true);

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—Å–µ —Å–∫—Ä—ã—Ç–æ
    manager.hideAll();

    console.log('üå´Ô∏è FogManager initialized successfully');
  }, [mapSize, cellSize]);

  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const revealArea = useCallback((x: number, y: number, radius: number = 5) => {
    if (!fogManagerRef.current) return;
    console.log('üå´Ô∏è Revealing area at:', x, y, 'radius:', radius);
    fogManagerRef.current.revealArea(x, y, radius);
  }, []);

  const hideArea = useCallback((x: number, y: number, radius: number = 5) => {
    if (!fogManagerRef.current) return;
    console.log('üå´Ô∏è Hiding area at:', x, y, 'radius:', radius);
    fogManagerRef.current.hideArea(x, y, radius);
  }, []);

  const revealAll = useCallback(() => {
    if (!fogManagerRef.current) return;
    console.log('üå´Ô∏è Revealing all areas');
    fogManagerRef.current.revealAll();
  }, []);

  const hideAll = useCallback(() => {
    if (!fogManagerRef.current) return;
    console.log('üå´Ô∏è Hiding all areas');
    fogManagerRef.current.hideAll();
  }, []);

  const updateVisionSources = useCallback((sources: VisionSource[]) => {
    if (!fogManagerRef.current) return;
    console.log('üå´Ô∏è Updating vision sources:', sources.length);
    fogManagerRef.current.updateVisionSources(sources);
  }, []);

  return {
    fogManager: fogManagerRef.current,
    isInitialized,
    updateCounter,
    revealArea,
    hideArea,
    revealAll,
    hideAll,
    updateVisionSources
  };
}