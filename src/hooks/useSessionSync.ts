import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏)
export interface SessionState {
  id: string;
  session_id: string;
  current_map_url: string | null;
  map_scale: number;
  fog_enabled: boolean;
  grid_visible: boolean;
  grid_scale: number;
  camera_position: { x: number; y: number; z: number };
  active_audio_id: string | null;
  created_at: string;
  updated_at: string;
}

export interface SessionMessage {
  id: string;
  session_id: string;
  user_id: string;
  sender_name: string;  // –ò—Å–ø–æ–ª—å–∑—É–µ–º sender_name –≤–º–µ—Å—Ç–æ username
  content: string;      // –ò—Å–ø–æ–ª—å–∑—É–µ–º content –≤–º–µ—Å—Ç–æ message
  message_type: 'chat' | 'system' | 'dice' | 'action';
  created_at: string;
}

export interface SessionAudio {
  id: string;
  session_id: string;
  name: string;
  file_url: string;
  volume: number;
  is_playing: boolean;
  is_loop: boolean;
  position: number;
  audio_type: 'background' | 'effect' | 'ambient';
  created_at: string;
  updated_at: string;
}

// –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
export const useSessionSync = (sessionId: string) => {
  const [sessionState, setSessionState] = useState<SessionState | null>(null);
  const [messages, setMessages] = useState<SessionMessage[]>([]);
  const [audio, setAudio] = useState<SessionAudio[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (!sessionId) return;

    const loadInitialData = async () => {
      try {
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ dm_sessions (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç)
        console.log('Loading session data for:', sessionId);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É)
        const { data: messagesData, error: messagesError } = await supabase
          .from('session_messages')
          .select('*')
          .eq('session_id', sessionId)
          .order('created_at', { ascending: true })
          .limit(50);

        if (messagesError) {
          console.error('Error loading messages:', messagesError);
        } else {
          // –ú–∞–ø–∏–º –∫ –Ω–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
          const mappedMessages = messagesData?.map(msg => ({
            id: msg.id,
            session_id: msg.session_id,
            user_id: msg.user_id,
            sender_name: msg.sender_name,
            content: msg.content,
            message_type: msg.message_type as 'chat' | 'system' | 'dice' | 'action',
            created_at: msg.created_at
          })) || [];
          setMessages(mappedMessages);
        }
      } catch (error) {
        console.error('Error loading initial data:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏",
          variant: "destructive"
        });
      } finally {
        setLoading(false);
      }
    };

    loadInitialData();
  }, [sessionId, toast]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (!sessionId) return;

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messagesChannel = supabase
      .channel('session-messages-changes')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'session_messages',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', payload);
          const newMessage = {
            id: payload.new.id,
            session_id: payload.new.session_id,
            user_id: payload.new.user_id,
            sender_name: payload.new.sender_name,
            content: payload.new.content,
            message_type: payload.new.message_type as 'chat' | 'system' | 'dice' | 'action',
            created_at: payload.new.created_at
          };
          setMessages(prev => [...prev, newMessage]);
        }
      )
      .subscribe();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π  
    const sessionChannel = supabase
      .channel('game-session-changes')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'game_sessions',
          filter: `id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', payload);
          toast({
            title: "–°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            description: "–ú–∞—Å—Ç–µ—Ä –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏",
          });
        }
      )
      .subscribe();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
    const tokensChannel = supabase
      .channel('battle-tokens-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'battle_tokens',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', payload);
          toast({
            title: "–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            description: "–ü–æ–∑–∏—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å",
          });
        }
      )
      .subscribe();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç
    const mapsChannel = supabase
      .channel('battle-maps-changes') 
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'battle_maps',
          filter: `session_id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üó∫Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:', payload);
          toast({
            title: "–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞",
            description: "–ú–∞—Å—Ç–µ—Ä —Å–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—É –±–æ—è",
          });
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(messagesChannel);
      supabase.removeChannel(sessionChannel);
      supabase.removeChannel(tokensChannel);
      supabase.removeChannel(mapsChannel);
    };
  }, [sessionId, toast]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ Supabase
  const updateSessionState = async (updates: Partial<Omit<SessionState, 'id' | 'session_id' | 'created_at' | 'updated_at'>>) => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏:', updates);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
      const { error } = await supabase
        .from('game_sessions')
        .update({
          fog_of_war_enabled: updates.fog_enabled,
          grid_enabled: updates.grid_visible,
          grid_size: updates.grid_scale,
          zoom_level: updates.map_scale,
          view_center_x: updates.camera_position?.x,
          view_center_y: updates.camera_position?.y,
          updated_at: new Date().toISOString()
        })
        .eq('id', sessionId);

      if (error) throw error;

      toast({
        title: "–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏",
        variant: "destructive"
      });
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É)
  const sendMessage = async (content: string, messageType: SessionMessage['message_type'] = 'chat') => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      const { error } = await supabase
        .from('session_messages')
        .insert({
          session_id: sessionId,
          user_id: user.id,
          sender_name: user.user_metadata?.display_name || user.email || '–ò–≥—Ä–æ–∫',
          content,
          message_type: messageType
        });

      if (error) {
        console.error('Error sending message:', error);
        throw error;
      }
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        variant: "destructive"
      });
    }
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
  const updateAudio = async (audioId: string, updates: Partial<SessionAudio>) => {
    try {
      console.log('Update audio:', audioId, updates);
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ session_audio –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
      toast({
        title: "–ê—É–¥–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ –∏–∑–º–µ–Ω–µ–Ω—ã",
      });
    } catch (error) {
      console.error('Error updating audio:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ",
        variant: "destructive"
      });
    }
  };

  return {
    sessionState,
    messages,
    audio,
    loading,
    updateSessionState,
    sendMessage,
    updateAudio
  };
};