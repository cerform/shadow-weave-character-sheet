
import React, { createContext, useContext, useCallback, useEffect } from 'react';
import { Character } from '@/types/character';
import { useCharacterState } from '@/hooks/useCharacterState';
import { useCharacterOperations } from '@/hooks/useCharacterOperations';
import { subscribeToCharacters } from '@/services/characterService';
import { auth } from '@/lib/firebase';

interface CharacterContextType {
  characters: Character[];
  character: Character | null;
  loading: boolean;
  error: string | null;
  setCharacter: (character: Character | null) => void;
  updateCharacter: (updates: Partial<Character>) => void;
  saveCharacter: (character: Character) => Promise<Character>;
  deleteCharacter: (id: string) => Promise<void>;
  getUserCharacters: () => Promise<void>;
  getCharacterById: (id: string) => Promise<Character | null>;
  refreshCharacters: () => Promise<void>;
  saveCurrentCharacter: () => Promise<void>;
}

const CharacterContext = createContext<CharacterContextType | undefined>(undefined);

export const useCharacter = () => {
  const context = useContext(CharacterContext);
  if (!context) {
    console.error('useCharacter: CharacterContext is undefined! Make sure CharacterProvider is wrapping the component');
    throw new Error('useCharacter must be used within a CharacterProvider');
  }
  return context;
};

export const CharacterProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const state = useCharacterState();
  const operations = useCharacterOperations();

  // üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—Ç–∞–π–º –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å fallback
  useEffect(() => {
    if (!auth.currentUser) return;
    
    console.log('CharacterContext: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—Ç–∞–π–º –ø–æ–¥–ø–∏—Å–∫–∏');
    
    let isSubscribed = true;
    
    const initializeSubscription = async () => {
      try {
        const unsubscribe = subscribeToCharacters((characters) => {
          if (isSubscribed) {
            console.log('CharacterContext: –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫—É:', characters.length);
            state.setCharacters(characters);
          }
        });

        return unsubscribe;
      } catch (error) {
        console.error('CharacterContext: –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
        // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
        const localCharacters = JSON.parse(localStorage.getItem('characters') || '[]')
          .filter((char: any) => char.userId === auth.currentUser?.uid);
        if (isSubscribed) {
          state.setCharacters(localCharacters);
        }
      }
    };

    let unsubscribePromise = initializeSubscription();

    return () => {
      isSubscribed = false;
      console.log('CharacterContext: –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∞–ª—Ç–∞–π–º –ø–æ–¥–ø–∏—Å–∫–∏');
      unsubscribePromise?.then((unsubscribe) => {
        if (unsubscribe) unsubscribe();
      });
      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    };
  }, [auth.currentUser]); // –£–±–∏—Ä–∞–µ–º state –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
  const saveCharacter = useCallback(async (character: Character): Promise<Character> => {
    try {
      state.setLoading(true);
      state.clearError();
      
      const savedCharacter = await operations.saveCharacter(character);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      state.addCharacter(savedCharacter);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω
      if (state.character?.id === savedCharacter.id) {
        state.setCharacter(savedCharacter);
      }
      
      return savedCharacter;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      state.setError(errorMessage);
      throw error;
    } finally {
      state.setLoading(false);
    }
  }, [state, operations]);

  const deleteCharacter = useCallback(async (id: string) => {
    try {
      state.setLoading(true);
      state.clearError();
      
      await operations.deleteCharacter(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      state.removeCharacter(id);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
      state.setError(errorMessage);
      throw err;
    } finally {
      state.setLoading(false);
    }
  }, [state, operations]);

  const getUserCharacters = useCallback(async () => {
    try {
      console.log('CharacterContext: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = true');
      state.setLoading(true);
      state.clearError();
      
      const userCharacters = await operations.getUserCharacters();
      console.log('CharacterContext: –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:', userCharacters.length);
      state.setCharacters(userCharacters);
      console.log('CharacterContext: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π';
      console.error('CharacterContext: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', err);
      state.setError(errorMessage);
      state.setCharacters([]); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      console.log('CharacterContext: –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading = false');
      state.setLoading(false);
    }
  }, [state, operations]);

  const getCharacterById = useCallback(async (id: string): Promise<Character | null> => {
    try {
      state.setLoading(true);
      state.clearError();
      
      const foundCharacter = await operations.getCharacterById(id);
      
      if (foundCharacter) {
        state.setCharacter(foundCharacter);
        return foundCharacter;
      }
      
      return null;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
      state.setError(errorMessage);
      throw err;
    } finally {
      state.setLoading(false);
    }
  }, [state, operations]);

  const refreshCharacters = useCallback(async () => {
    console.log('CharacterContext: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
    await getUserCharacters();
  }, [getUserCharacters]);

  const saveCurrentCharacter = useCallback(async () => {
    if (!state.character) {
      throw new Error('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
    
    try {
      state.setLoading(true);
      await operations.saveCurrentCharacter(state.character);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
      state.setError(errorMessage);
      throw err;
    } finally {
      state.setLoading(false);
    }
  }, [state, operations]);

  return (
    <CharacterContext.Provider
      value={{
        characters: state.characters,
        character: state.character,
        loading: state.loading,
        error: state.error,
        setCharacter: state.setCharacter,
        updateCharacter: state.updateCharacter,
        saveCharacter,
        deleteCharacter,
        getUserCharacters,
        getCharacterById,
        refreshCharacters,
        saveCurrentCharacter
      }}
    >
      {children}
    </CharacterContext.Provider>
  );
};
