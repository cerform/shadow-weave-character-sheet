
import React, { createContext, useContext, ReactNode, useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface SocketContextProps {
  sendUpdate: ((data: any) => void) | null;
  isConnected: boolean;
  connectionError: string | null;
  socket: any | null;
  connect: (sessionId: string, playerName?: string, characterId?: string) => void; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  sessionData: any | null;
  connected: boolean;
  lastUpdate: { character?: any; music?: any; timestamp?: Date } | null; // –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ –º—É–∑—ã–∫–µ
}

const defaultSocketContext: SocketContextProps = {
  sendUpdate: null,
  isConnected: false,
  connectionError: null,
  socket: null,
  connect: () => {}, // –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
  sessionData: null,
  connected: false,
  lastUpdate: null
};

const SocketContext = createContext<SocketContextProps>(defaultSocketContext);

export const useSocket = () => useContext(SocketContext);

interface SocketProviderProps {
  children: ReactNode;
}

export const SocketProvider: React.FC<SocketProviderProps> = ({ children }) => {
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [socket, setSocket] = useState<any | null>(null);
  const [sessionData, setSessionData] = useState<any | null>(null);
  const [connected, setConnected] = useState<boolean>(false);
  const [lastUpdate, setLastUpdate] = useState<{ character?: any; music?: any; timestamp?: Date } | null>(null);
  const { toast } = useToast();

  // –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase Realtime
  const sendUpdate = async (data: any) => {
    if (!sessionData?.id) {
      console.warn('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase:', data);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ broadcast –≤ –∫–∞–Ω–∞–ª —Å–µ—Å—Å–∏–∏
      const channel = supabase.channel(`session-${sessionData.id}`);
      const result = await channel.send({
        type: 'broadcast',
        event: 'session_update',
        payload: {
          ...data,
          timestamp: new Date().toISOString(),
          sessionId: sessionData.id
        }
      });

      if (result === 'ok') {
        setLastUpdate({ ...data, timestamp: new Date() });
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setConnectionError('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
        variant: "destructive"
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º Supabase –∫–∞–Ω–∞–ª–æ–º
  const connect = async (sessionId: string, playerName?: string, characterId?: string) => {
    try {
      console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏: ${sessionId}`);
      setConnectionError(null);

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–µ—Å—Å–∏–∏
      const channel = supabase.channel(`session-${sessionId}`, {
        config: {
          presence: {
            key: sessionId,
          },
          broadcast: {
            self: true,
          },
        },
      });

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
      channel
        .on('broadcast', { event: 'session_update' }, (payload) => {
          console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', payload);
          setLastUpdate({
            ...payload.payload,
            timestamp: new Date(payload.payload.timestamp)
          });
        })
        .on('presence', { event: 'sync' }, () => {
          const state = channel.presenceState();
          console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', state);
        })
        .on('presence', { event: 'join' }, ({ key, newPresences }) => {
          console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', key, newPresences);
        })
        .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
          console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–µ—Å—Å–∏—é:', key, leftPresences);
        })
        .subscribe(async (status) => {
          if (status === 'SUBSCRIBED') {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É —Å–µ—Å—Å–∏–∏');
            setIsConnected(true);
            setConnected(true);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await channel.track({
              user_id: (await supabase.auth.getUser()).data.user?.id,
              player_name: playerName,
              character_id: characterId,
              online_at: new Date().toISOString(),
            });
            
            setSessionData({ 
              id: sessionId, 
              name: `–°–µ—Å—Å–∏—è ${sessionId}`,
              playerName,
              characterId,
              channel
            });

            toast({
              title: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
              description: "–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Å—Å–∏–∏",
            });
          } else if (status === 'CHANNEL_ERROR') {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É');
          }
        });

      setSocket(channel);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏:', error);
      setConnectionError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏');
      setIsConnected(false);
      setConnected(false);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏",
        variant: "destructive"
      });
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (socket) {
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞ —Å–µ—Å—Å–∏–∏');
        supabase.removeChannel(socket);
      }
    };
  }, [socket]);

  return (
    <SocketContext.Provider 
      value={{ 
        sendUpdate, 
        isConnected, 
        connectionError, 
        socket, 
        connect, 
        sessionData, 
        connected, 
        lastUpdate 
      }}
    >
      {children}
    </SocketContext.Provider>
  );
};
