/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π D&D 5e
 * Conditions: prone, stunned, poisoned, etc.
 */

export type ConditionType = 
  | 'blinded'
  | 'charmed'
  | 'deafened'
  | 'frightened'
  | 'grappled'
  | 'incapacitated'
  | 'invisible'
  | 'paralyzed'
  | 'petrified'
  | 'poisoned'
  | 'prone'
  | 'restrained'
  | 'stunned'
  | 'unconscious'
  | 'exhaustion'
  | 'concentrating'
  | 'blessed'
  | 'cursed'
  | 'hasted'
  | 'slowed'
  | 'raging'
  | 'marked'
  | 'inspired';

export interface Condition {
  type: ConditionType;
  name: string;
  description: string;
  icon: string; // Unicode emoji –∏–ª–∏ CSS class
  color: string;
  duration?: {
    type: 'rounds' | 'minutes' | 'hours' | 'permanent' | 'concentration';
    value?: number;
    remaining?: number;
  };
  source?: string; // —á—Ç–æ –Ω–∞–ª–æ–∂–∏–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  saveType?: 'strength' | 'dexterity' | 'constitution' | 'intelligence' | 'wisdom' | 'charisma';
  saveDC?: number;
  effects: ConditionEffect[];
}

export interface ConditionEffect {
  type: 'advantage' | 'disadvantage' | 'immunity' | 'resistance' | 'vulnerability' | 'modifier' | 'prevent_action';
  target: 'attack_rolls' | 'saving_throws' | 'ability_checks' | 'damage' | 'speed' | 'ac' | 'all_actions' | 'movement';
  value?: number; // –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  damageTypes?: string[]; // –¥–ª—è —É—Ä–æ–Ω–∞
}

export interface TokenConditionState {
  tokenId: string;
  conditions: Map<ConditionType, Condition>;
  immunities: Set<ConditionType>;
  resistances: Set<ConditionType>;
}

export class ConditionsEngine {
  private tokenStates: Map<string, TokenConditionState> = new Map();
  private conditionDefinitions: Map<ConditionType, Omit<Condition, 'duration' | 'source'>> = new Map();
  private callbacks: Array<(tokenId: string, conditions: Condition[]) => void> = [];

  constructor() {
    this.initializeConditionDefinitions();
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω—É
   */
  addCondition(tokenId: string, condition: Condition): boolean {
    let tokenState = this.tokenStates.get(tokenId);
    if (!tokenState) {
      tokenState = {
        tokenId,
        conditions: new Map(),
        immunities: new Set(),
        resistances: new Set()
      };
      this.tokenStates.set(tokenId, tokenState);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–º—É–Ω–∏—Ç–µ—Ç
    if (tokenState.immunities.has(condition.type)) {
      return false;
    }

    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const existing = tokenState.conditions.get(condition.type);
    if (existing && existing.duration && condition.duration) {
      if (condition.duration.value && existing.duration.remaining) {
        existing.duration.remaining = Math.max(
          existing.duration.remaining,
          condition.duration.value
        );
      }
    } else {
      tokenState.conditions.set(condition.type, { ...condition });
    }

    this.notifyChange(tokenId);
    return true;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É —Ç–æ–∫–µ–Ω–∞
   */
  removeCondition(tokenId: string, conditionType: ConditionType): boolean {
    const tokenState = this.tokenStates.get(tokenId);
    if (!tokenState) return false;

    const removed = tokenState.conditions.delete(conditionType);
    if (removed) {
      this.notifyChange(tokenId);
    }
    return removed;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Ç–æ–∫–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  hasCondition(tokenId: string, conditionType: ConditionType): boolean {
    const tokenState = this.tokenStates.get(tokenId);
    return tokenState?.conditions.has(conditionType) || false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  getConditions(tokenId: string): Condition[] {
    const tokenState = this.tokenStates.get(tokenId);
    return tokenState ? Array.from(tokenState.conditions.values()) : [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   */
  getCondition(tokenId: string, conditionType: ConditionType): Condition | null {
    const tokenState = this.tokenStates.get(tokenId);
    return tokenState?.conditions.get(conditionType) || null;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
   */
  setImmunity(tokenId: string, conditionType: ConditionType, immune = true): void {
    let tokenState = this.tokenStates.get(tokenId);
    if (!tokenState) {
      tokenState = {
        tokenId,
        conditions: new Map(),
        immunities: new Set(),
        resistances: new Set()
      };
      this.tokenStates.set(tokenId, tokenState);
    }

    if (immune) {
      tokenState.immunities.add(conditionType);
      // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      tokenState.conditions.delete(conditionType);
    } else {
      tokenState.immunities.delete(conditionType);
    }

    this.notifyChange(tokenId);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
   */
  setResistance(tokenId: string, conditionType: ConditionType, resistant = true): void {
    let tokenState = this.tokenStates.get(tokenId);
    if (!tokenState) {
      tokenState = {
        tokenId,
        conditions: new Map(),
        immunities: new Set(),
        resistances: new Set()
      };
      this.tokenStates.set(tokenId, tokenState);
    }

    if (resistant) {
      tokenState.resistances.add(conditionType);
    } else {
      tokenState.resistances.delete(conditionType);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥)
   */
  updateDurations(tokenId: string): Condition[] {
    const tokenState = this.tokenStates.get(tokenId);
    if (!tokenState) return [];

    const expiredConditions: Condition[] = [];

    for (const [conditionType, condition] of tokenState.conditions.entries()) {
      if (!condition.duration || condition.duration.type === 'permanent') continue;

      if (condition.duration.type === 'rounds' && condition.duration.remaining !== undefined) {
        condition.duration.remaining--;
        if (condition.duration.remaining <= 0) {
          expiredConditions.push(condition);
          tokenState.conditions.delete(conditionType);
        }
      }
    }

    if (expiredConditions.length > 0) {
      this.notifyChange(tokenId);
    }

    return expiredConditions;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
   */
  breakConcentration(tokenId: string): Condition[] {
    const tokenState = this.tokenStates.get(tokenId);
    if (!tokenState) return [];

    const brokenConditions: Condition[] = [];

    for (const [conditionType, condition] of tokenState.conditions.entries()) {
      if (condition.duration?.type === 'concentration') {
        brokenConditions.push(condition);
        tokenState.conditions.delete(conditionType);
      }
    }

    if (brokenConditions.length > 0) {
      this.notifyChange(tokenId);
    }

    return brokenConditions;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–æ–∫–µ–Ω–∞
   */
  getEffects(tokenId: string): ConditionEffect[] {
    const conditions = this.getConditions(tokenId);
    const effects: ConditionEffect[] = [];

    for (const condition of conditions) {
      effects.push(...condition.effects);
    }

    return effects;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
   */
  canPerformAction(tokenId: string, actionType: 'action' | 'bonus_action' | 'reaction' | 'movement'): boolean {
    const effects = this.getEffects(tokenId);
    
    for (const effect of effects) {
      if (effect.type === 'prevent_action') {
        if (effect.target === 'all_actions') return false;
        if (effect.target === 'movement' && actionType === 'movement') return false;
      }
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (this.hasCondition(tokenId, 'stunned') || 
        this.hasCondition(tokenId, 'paralyzed') ||
        this.hasCondition(tokenId, 'petrified') ||
        this.hasCondition(tokenId, 'unconscious')) {
      return actionType === 'reaction' ? false : false; // –≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    }

    if (this.hasCondition(tokenId, 'incapacitated')) {
      return actionType === 'movement'; // –ù–µ–¥–µ–µ—Å–ø–æ—Å–æ–±–Ω—ã–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –¥–≤–∏–≥–∞—Ç—å—Å—è
    }

    return true;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  clearAllConditions(tokenId: string): void {
    const tokenState = this.tokenStates.get(tokenId);
    if (tokenState) {
      tokenState.conditions.clear();
      this.notifyChange(tokenId);
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  removeToken(tokenId: string): void {
    this.tokenStates.delete(tokenId);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ç–∏–ø—É
   */
  createCondition(
    type: ConditionType, 
    duration?: Condition['duration'], 
    source?: string
  ): Condition {
    const definition = this.conditionDefinitions.get(type);
    if (!definition) {
      throw new Error(`Unknown condition type: ${type}`);
    }

    return {
      ...definition,
      duration,
      source
    };
  }

  private initializeConditionDefinitions(): void {
    const conditions: Array<Omit<Condition, 'duration' | 'source'>> = [
      {
        type: 'blinded',
        name: '–û—Å–ª–µ–ø–ª—ë–Ω',
        description: '–û—Å–ª–µ–ø–ª—ë–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–∞–ª—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –ø–æ–ª–∞–≥–∞—é—â–∏–µ—Å—è –Ω–∞ –∑—Ä–µ–Ω–∏–µ.',
        icon: 'üëÅÔ∏è‚Äçüó®Ô∏è',
        color: '#6b7280',
        effects: [
          { type: 'disadvantage', target: 'attack_rolls' },
          { type: 'advantage', target: 'attack_rolls' } // –≤—Ä–∞–≥–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
        ]
      },
      {
        type: 'charmed',
        name: '–û—á–∞—Ä–æ–≤–∞–Ω',
        description: '–û—á–∞—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ –µ–≥–æ –æ—á–∞—Ä–æ–≤–∞–ª, –∏–ª–∏ –Ω–∞—Ü–µ–ª–∏–≤–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –≤—Ä–∞–∂–¥–µ–±–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.',
        icon: 'üíñ',
        color: '#ec4899',
        effects: []
      },
      {
        type: 'frightened',
        name: '–ò—Å–ø—É–≥–∞–Ω',
        description: '–ò—Å–ø—É–≥–∞–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å –ø–æ–º–µ—Ö–æ–π –±—Ä–æ—Å–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ –±—Ä–æ—Å–∫–∏ –∞—Ç–∞–∫–∏, –ø–æ–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä–∞—Ö–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏.',
        icon: 'üò®',
        color: '#7c3aed',
        effects: [
          { type: 'disadvantage', target: 'attack_rolls' },
          { type: 'disadvantage', target: 'ability_checks' }
        ]
      },
      {
        type: 'poisoned',
        name: '–û—Ç—Ä–∞–≤–ª–µ–Ω',
        description: '–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Å –ø–æ–º–µ—Ö–æ–π –±—Ä–æ—Å–∫–∏ –∞—Ç–∞–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.',
        icon: 'ü§¢',
        color: '#10b981',
        effects: [
          { type: 'disadvantage', target: 'attack_rolls' },
          { type: 'disadvantage', target: 'ability_checks' }
        ]
      },
      {
        type: 'prone',
        name: '–°–±–∏—Ç —Å –Ω–æ–≥',
        description: '–õ–µ–∂–∞—â–µ–µ —Å—É—â–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–∑–∞—Ç—å –∏–ª–∏ —Ç—Ä–∞—Ç–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É —Å–∫–æ—Ä–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å.',
        icon: '‚¨áÔ∏è',
        color: '#f59e0b',
        effects: [
          { type: 'disadvantage', target: 'attack_rolls' },
          { type: 'modifier', target: 'speed', value: 0 }
        ]
      },
      {
        type: 'stunned',
        name: '–û—à–µ–ª–æ–º–ª—ë–Ω',
        description: '–û—à–µ–ª–æ–º–ª—ë–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ, –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∏ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç—Ä—É–¥–æ–º.',
        icon: 'üòµ',
        color: '#ef4444',
        effects: [
          { type: 'prevent_action', target: 'all_actions' }
        ]
      },
      {
        type: 'unconscious',
        name: '–ë–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è',
        description: '–°—É—â–µ—Å—Ç–≤–æ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ–¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ, –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å, –∏ –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ.',
        icon: 'üò¥',
        color: '#374151',
        effects: [
          { type: 'prevent_action', target: 'all_actions' }
        ]
      },
      {
        type: 'paralyzed',
        name: '–ü–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω',
        description: '–ü–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–µ—Å–ø–æ—Å–æ–±–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å.',
        icon: 'ü•∂',
        color: '#06b6d4',
        effects: [
          { type: 'prevent_action', target: 'all_actions' }
        ]
      },
      {
        type: 'concentrating',
        name: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏.',
        icon: 'üß†',
        color: '#3b82f6',
        effects: []
      }
    ];

    for (const condition of conditions) {
      this.conditionDefinitions.set(condition.type, condition);
    }
  }

  private notifyChange(tokenId: string): void {
    const conditions = this.getConditions(tokenId);
    this.callbacks.forEach(callback => callback(tokenId, conditions));
  }

  onChange(callback: (tokenId: string, conditions: Condition[]) => void): () => void {
    this.callbacks.push(callback);
    return () => {
      const index = this.callbacks.indexOf(callback);
      if (index !== -1) {
        this.callbacks.splice(index, 1);
      }
    };
  }
}