import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { Plus, RefreshCw, AlertTriangle } from "lucide-react";
import { useAuth } from '@/hooks/use-auth';
import { useCharacter } from '@/contexts/CharacterContext';
import { Character } from '@/types/character';
import CharactersTable from "@/components/characters/CharactersTable";
import OBSLayout from '@/components/OBSLayout';
import IconOnlyNavigation from '@/components/navigation/IconOnlyNavigation';
import ErrorBoundary from '@/components/ErrorBoundary';
import CharacterNavigation from '@/components/characters/CharacterNavigation';
import ErrorDisplay from '@/components/characters/ErrorDisplay';
import LoadingState from '@/components/characters/LoadingState';
import { toast } from 'sonner';
import { diagnoseCharacterLoading } from '@/utils/characterLoadingDebug';
import { debugCharacterLoading, inspectLocalStorage } from '@/utils/localStorageDebug';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";

const CharactersListPage: React.FC = () => {
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuth();
  const [isRefreshing, setIsRefreshing] = useState(false);
  const { characters, loading, error, deleteCharacter, getUserCharacters } = useCharacter();
  const [diagnosticResults, setDiagnosticResults] = useState<any>(null);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const refreshCharacters = useCallback(async () => {
    try {
      setIsRefreshing(true);
      console.log('CharactersListPage: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
      await getUserCharacters();
      console.log('CharactersListPage: –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (err) {
      console.error('CharactersListPage: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', err);
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      toast.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${errorMessage}`);
    } finally {
      setIsRefreshing(false);
    }
  }, [getUserCharacters]);

  const debugLocalStorage = useCallback(async () => {
    try {
      console.log('CharactersListPage: –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ localStorage');
      inspectLocalStorage();
      
      if (user?.uid) {
        const debugResults = await debugCharacterLoading(user.uid);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏:', debugResults);
        toast.success(`–ù–∞–π–¥–µ–Ω–æ ${debugResults.userCharacters} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${debugResults.validCharacters} –≤–∞–ª–∏–¥–Ω—ã—Ö)`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ localStorage:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ localStorage');
    }
  }, [user?.uid]);

  const runDiagnostics = useCallback(async () => {
    try {
      console.log('CharactersListPage: –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      const results = await diagnoseCharacterLoading();
      console.log('CharactersListPage: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', results);
      setDiagnosticResults(results);
      
      if (!results.success) {
        toast.error('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (e) {
      console.error('CharactersListPage: –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', e);
    }
  }, []);

  // –ü—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  useEffect(() => {
    let mounted = true;
    
    const loadCharacters = async () => {
      if (isAuthenticated && mounted) {
        console.log('CharactersListPage: –í—ã–∑—ã–≤–∞–µ–º getUserCharacters –Ω–∞–ø—Ä—è–º—É—é –≤ useEffect');
        try {
          setIsRefreshing(true);
          await getUserCharacters();
        } catch (err) {
          console.error('CharactersListPage: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', err);
          const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          toast.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${errorMessage}`);
        } finally {
          setIsRefreshing(false);
        }
      }
    };

    loadCharacters();
    
    return () => {
      mounted = false;
    };
  }, [isAuthenticated, getUserCharacters]);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ —Å debounce
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    if (error) {
      timeoutId = setTimeout(() => {
        runDiagnostics();
      }, 300);
    }
    
    return () => {
      if (timeoutId) clearTimeout(timeoutId);
    };
  }, [error, runDiagnostics]);
  
  const handleDeleteCharacter = useCallback(async (id: string) => {
    try {
      await deleteCharacter(id);
      console.log('CharactersListPage: –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (err) {
      console.error('CharactersListPage: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', err);
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      toast.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${errorMessage}`);
    }
  }, [deleteCharacter]);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex flex-col justify-center items-center bg-gradient-to-br from-background to-background/80">
        <div className="max-w-md text-center p-6">
          <h1 className="text-3xl font-bold mb-6">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
          <p className="mb-8">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
          <Button 
            onClick={() => navigate('/auth', { state: { returnPath: '/characters' } })}
            className="w-full"
          >
            –í–æ–π—Ç–∏
          </Button>
        </div>
      </div>
    );
  }
  
  return (
    <ErrorBoundary>
      <OBSLayout
        topPanelContent={
          <div className="flex justify-between items-center p-3">
            <h1 className="text-xl font-bold text-foreground">
              –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
            </h1>
            <IconOnlyNavigation includeThemeSelector />
          </div>
        }
      >
        <div className="container mx-auto p-6 max-w-5xl">
          {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Realtime Database */}
          <div className="mb-4 p-3 bg-green-900/20 border border-green-600/30 rounded-lg text-sm">
            <p className="text-green-400 font-bold">‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Realtime Database</p>
            <p><strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {loading ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'}</p>
            <p><strong>–ï—Å—Ç—å –æ—à–∏–±–∫–∞:</strong> {error ? '–î–∞' : '–ù–µ—Ç'}</p>
            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:</strong> {characters?.length || 0}</p>
            <p><strong>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:</strong> {isAuthenticated ? '–î–∞' : '–ù–µ—Ç'}</p>
            <p><strong>User ID:</strong> {user?.uid || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
            <p><strong>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</strong> Realtime Database (https://shadow-char-default-rtdb.europe-west1.firebasedatabase.app/)</p>
            {error && <p><strong>–û—à–∏–±–∫–∞:</strong> {typeof error === 'string' ? error : (error as Error).message}</p>}
          </div>
          
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */}
          <CharacterNavigation />
          
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold text-accent">
              –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
            </h2>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={debugLocalStorage}
              >
                üîç Debug localStorage
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={refreshCharacters}
                disabled={isRefreshing || loading}
              >
                <RefreshCw size={16} className={`mr-2 ${isRefreshing || loading ? 'animate-spin' : ''}`} />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button
                onClick={() => navigate('/character-creation')}
              >
                <Plus size={16} className="mr-2" />
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              </Button>
            </div>
          </div>
          
          {/* –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {loading && <LoadingState />}
          
          {/* –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ */}
          {error && !loading && (
            <ErrorDisplay 
              errorMessage={typeof error === 'string' ? error : (error as Error).message} 
              onRetry={refreshCharacters} 
              technicalDetails={diagnosticResults}
            />
          )}
          
          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {!loading && !error && (
            <>
              {/* –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏ */}
              {diagnosticResults && !diagnosticResults.success && (
                <Card className="mb-6 bg-muted border-muted-foreground/30">
                  <CardHeader className="pb-2">
                    <CardTitle className="flex items-center gap-2 text-foreground">
                      <AlertTriangle size={18} />
                      –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
                    </CardTitle>
                    <CardDescription>
                      –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground mb-2">{diagnosticResults.error}</p>
                    <pre className="whitespace-pre-wrap text-xs bg-muted/50 p-3 rounded max-h-40 overflow-auto">
                      {JSON.stringify(diagnosticResults.debug, null, 2)}
                    </pre>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" size="sm" onClick={runDiagnostics}>
                      –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                    </Button>
                  </CardFooter>
                </Card>
              )}
              
              <CharactersTable
                characters={characters || []}
                onDelete={handleDeleteCharacter}
              />
            </>
          )}
        </div>
      </OBSLayout>
    </ErrorBoundary>
  );
};

export default CharactersListPage;