import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { socketService } from '@/services/socket';
import DiceRoller from '@/components/session/DiceRoller';
import SessionChat from '@/components/session/SessionChat';
import { useTheme } from '@/hooks/use-theme';
import { themes } from '@/lib/themes';
import { useAuth } from '@/hooks/use-auth';
import { supabase } from '@/integrations/supabase/client';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  ArrowLeft,
  Send,
  Clock,
  UserPlus
} from "lucide-react";

// Define the Player type since it doesn't exist in session.ts
interface Player {
  id: string;
  name: string;
  character?: any;
  connected: boolean;
}

const DMSessionPage = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const navigate = useNavigate();
  const { user, isAuthenticated } = useAuth();
  const [currentSession, setCurrentSession] = useState<any | null>(null);
  const [players, setPlayers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [isAddingPlayer, setIsAddingPlayer] = useState(false);
  const [newPlayerName, setNewPlayerName] = useState('');
  const [isEndingSession, setIsEndingSession] = useState(false);
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<any[]>([]);
  const { toast } = useToast();
  const { theme, setTheme } = useTheme();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/auth');
      return;
    }
    
    const loadSession = async () => {
      if (!sessionId) {
        navigate('/dm');
        return;
      }

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
        const { data: session, error: sessionError } = await supabase
          .from('game_sessions')
          .select('*')
          .eq('id', sessionId)
          .single();

        if (sessionError || !session) {
          toast({
            title: "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            variant: "destructive"
          });
          navigate('/dm');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (session.dm_id !== user?.id) {
          toast({
            title: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
            description: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏",
            variant: "destructive"
          });
          navigate('/dm');
          return;
        }

        setCurrentSession(session);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
        const { data: sessionPlayers, error: playersError } = await supabase
          .from('session_players')
          .select(`
            *,
            characters (
              id,
              name,
              class,
              level
            )
          `)
          .eq('session_id', sessionId);

        if (!playersError && sessionPlayers) {
          setPlayers(sessionPlayers);
        }

      } catch (error) {
        console.error('Error loading session:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é",
          variant: "destructive"
        });
        navigate('/dm');
      } finally {
        setLoading(false);
      }
    };
    
    loadSession();
  }, [isAuthenticated, navigate, sessionId, user?.id, toast]);

  // Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∫–∞—Ä—Ç
  useEffect(() => {
    if (!sessionId || !user?.id) return;

    console.log('üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–æ–Ω–ª–∞–π–Ω" –¥–ª—è DM
    const updateDMStatus = async () => {
      try {
        const { error } = await supabase
          .from('game_sessions')
          .update({ updated_at: new Date().toISOString() })
          .eq('id', sessionId)
          .eq('dm_id', user.id);

        if (!error) {
          console.log('‚úÖ DM —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ DM:', error);
      }
    };

    updateDMStatus();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    const playersChannel = supabase
      .channel(`session-players-${sessionId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'session_players',
          filter: `session_id=eq.${sessionId}`
        },
        async (payload) => {
          console.log('üë• –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ session_players:', payload);
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
          const { data: sessionPlayers } = await supabase
            .from('session_players')
            .select(`
              *,
              characters (
                id,
                name,
                class,
                level
              )
            `)
            .eq('session_id', sessionId);

          if (sessionPlayers) {
            setPlayers(sessionPlayers);
            toast({
              title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
              description: `–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω (${sessionPlayers.length} –∏–≥—Ä–æ–∫–æ–≤)`,
            });
          }
        }
      )
      .subscribe();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    const sessionChannel = supabase
      .channel(`game-session-${sessionId}`)
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'game_sessions',
          filter: `id=eq.${sessionId}`
        },
        (payload) => {
          console.log('üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', payload);
          setCurrentSession(payload.new);
          toast({
            title: "–°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã",
          });
        }
      )
      .subscribe();

    // Heartbeat –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const heartbeatInterval = setInterval(updateDMStatus, 30000);

    return () => {
      console.log('üîå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç real-time –∫–∞–Ω–∞–ª–æ–≤');
      clearInterval(heartbeatInterval);
      supabase.removeChannel(playersChannel);
      supabase.removeChannel(sessionChannel);
    };
  }, [sessionId, user?.id, toast]);

  const handleEndSession = async () => {
    if (!sessionId) return;

    try {
      const { error } = await supabase
        .from('game_sessions')
        .update({ is_active: false, ended_at: new Date().toISOString() })
        .eq('id', sessionId);

      if (error) throw error;

      navigate('/dm');
      toast({
        title: "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      });
    } catch (error) {
      console.error('Error ending session:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é",
        variant: "destructive"
      });
    }
  };

  const handleRemovePlayer = async (playerId: string) => {
    try {
      const { error } = await supabase
        .from('session_players')
        .delete()
        .eq('id', playerId);

      if (error) throw error;

      toast({
        title: "–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω",
        description: "–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏",
      });
    } catch (error) {
      console.error('Error removing player:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞",
        variant: "destructive"
      });
    }
  };

  const handleAddPlayer = () => {
    if (!newPlayerName.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞",
        variant: "destructive"
      });
      return;
    }
    
    setNewPlayerName('');
    setIsAddingPlayer(false);
    toast({
      title: "–£—Å–ø–µ—Ö",
      description: `–ò–≥—Ä–æ–∫ ${newPlayerName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é`
    });
  };

  const handleSendMessage = () => {
    if (!message.trim()) return;
    
    const newMessage = {
      id: Date.now().toString(),
      sender: user?.user_metadata?.full_name || 'DM',
      content: message,
      timestamp: new Date().toISOString(),
      isDM: true
    };
    
    setMessages(prev => [...prev, newMessage]);
    setMessage('');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
  };

  if (loading) {
    return (
      <div className="container p-6">
        <h1>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...</h1>
        <Button onClick={() => navigate('/dm')}>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Å—Å–∏–π</Button>
      </div>
    );
  }

  if (!currentSession) {
    return (
      <div className="container p-6">
        <h1>–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
        <Button onClick={() => navigate('/dm')}>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Å—Å–∏–π</Button>
      </div>
    );
  }

  return (
    <div className="container py-6 px-4">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center gap-4">
          <Button variant="ghost" onClick={() => navigate('/dm')}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            –ù–∞–∑–∞–¥
          </Button>
          <h1 className="text-3xl font-bold">{currentSession.name}</h1>
          <div className="px-2 py-1 rounded bg-green-100 text-green-800 text-sm">
            –ö–æ–¥: {currentSession.session_code}
          </div>
        </div>
        
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button variant="destructive">–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é</Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</AlertDialogTitle>
              <AlertDialogDescription>
                –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
              <AlertDialogAction onClick={handleEndSession}>–ó–∞–≤–µ—Ä—à–∏—Ç—å</AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
      
      {currentSession.description && (
        <Card className="mb-6">
          <CardContent className="pt-6">
            <p>{currentSession.description}</p>
          </CardContent>
        </Card>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Å—Å–∏–∏</CardTitle>
              <CardDescription>–ò–≥—Ä–æ–∫–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–µ—Å—è –∫ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="overflow-hidden">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>–ò–º—è</TableHead>
                      <TableHead>–ü–µ—Ä—Å–æ–Ω–∞–∂</TableHead>
                      <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                      <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                    </TableRow>
                  </TableHeader>
                   <TableBody>
                     {players && players.length > 0 ? (
                       players.map((player: any) => (
                         <TableRow key={player.id}>
                           <TableCell className="font-medium">{player.player_name}</TableCell>
                           <TableCell>
                             {player.characters ? player.characters.name : '–ù–µ –≤—ã–±—Ä–∞–Ω'}
                           </TableCell>
                           <TableCell>
                             <div className={`w-3 h-3 rounded-full ${player.is_online ? 'bg-green-500' : 'bg-red-500'} mr-2 inline-block`}></div>
                             {player.is_online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}
                           </TableCell>
                            <TableCell>
                              <Button 
                                variant="ghost" 
                                size="sm"
                                onClick={() => handleRemovePlayer(player.id)}
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </Button>
                            </TableCell>
                         </TableRow>
                       ))
                     ) : (
                       <TableRow>
                         <TableCell colSpan={4} className="text-center py-4">
                           –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
                         </TableCell>
                       </TableRow>
                     )}
                   </TableBody>
                </Table>
              </div>
              
              <div className="mt-4">
                <Button onClick={() => setIsAddingPlayer(true)}>
                  <UserPlus className="mr-2 h-4 w-4" />
                  –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
                </Button>
              </div>
            </CardContent>
          </Card>
          
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π</CardTitle>
              <CardDescription>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ú–∞—Å—Ç–µ—Ä–∞ –ü–æ–¥–∑–µ–º–µ–ª–∏–π</CardDescription>
            </CardHeader>
            <CardContent className="flex flex-wrap gap-4">
              <Button onClick={() => navigate(`/dm/battle-map/${sessionId}`)}>–ö–∞—Ä—Ç–∞ –±–æ—è</Button>
              <Button>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π</Button>
              <Button>–ëesti–∞—Ä–∏–π</Button>
              <Button>–¢–∞–±–ª–∏—Ü—ã –ª—É—Ç–∞</Button>
            </CardContent>
          </Card>
        </div>
        
        <div>
          <Card className="h-[500px] flex flex-col">
            <CardHeader>
              <CardTitle>–ß–∞—Ç —Å–µ—Å—Å–∏–∏</CardTitle>
            </CardHeader>
            <CardContent className="flex-grow overflow-y-auto min-h-[300px] p-4">
              {messages.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
                </div>
              ) : (
                <div className="space-y-3">
                  {messages.map(msg => (
                    <div key={msg.id} className={`p-2 rounded-lg ${msg.isDM ? 'bg-amber-100 ml-6' : 'bg-blue-100 mr-6'}`}>
                      <div className="font-bold flex justify-between">
                        <span>{msg.sender}</span>
                        <span className="text-xs text-gray-500">
                          <Clock className="h-3 w-3 inline mr-1" />
                          {new Date(msg.timestamp).toLocaleTimeString()}
                        </span>
                      </div>
                      <div>{msg.content}</div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
            <div className="p-4 border-t flex">
              <Input 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                className="flex-grow"
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              />
              <Button onClick={handleSendMessage} className="ml-2">
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </Card>
          
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>–ó–∞–º–µ—Ç–∫–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <textarea 
                className="w-full h-40 p-2 border rounded"
                placeholder="–ó–∞–ø–∏—Å–∏ –¥–ª—è –ú–∞—Å—Ç–µ—Ä–∞..."
              ></textarea>
            </CardContent>
          </Card>
        </div>
      </div>
      
      <Dialog open={isAddingPlayer} onOpenChange={setIsAddingPlayer}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞</DialogTitle>
            <DialogDescription>
              –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏—é
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="name">–ò–º—è –∏–≥—Ä–æ–∫–∞</Label>
              <Input 
                id="name" 
                value={newPlayerName} 
                onChange={(e) => setNewPlayerName(e.target.value)} 
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddingPlayer(false)}>–û—Ç–º–µ–Ω–∞</Button>
            <Button onClick={handleAddPlayer}>–î–æ–±–∞–≤–∏—Ç—å</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default DMSessionPage;
