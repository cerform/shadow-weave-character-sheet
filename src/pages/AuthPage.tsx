import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { useAuth } from '@/hooks/use-auth';
import { ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import SupabaseAuthForm from '@/components/auth/SupabaseAuthForm';


const AuthPage = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { user, isAuthenticated, loading } = useAuth();
  const isCallback = searchParams.get('callback') === 'true';
  const [redirectAttempted, setRedirectAttempted] = useState(false);

  console.log('üîç AuthPage: —Ä–µ–Ω–¥–µ—Ä —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:', { user: !!user, isAuthenticated, loading, isCallback, redirectAttempted });

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
  useEffect(() => {
    // –ï—Å–ª–∏ —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
    if (redirectAttempted) {
      console.log('‚è≠Ô∏è AuthPage: —Ä–µ–¥–∏—Ä–µ–∫—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫');
      return;
    }

    // –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    const shouldRedirect = isAuthenticated && user && !loading;

    if (shouldRedirect) {
      console.log('üöÄ AuthPage: –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', {
        isAuthenticated,
        hasUser: !!user,
        loading,
        isCallback
      });
      
      setRedirectAttempted(true);
      
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è OAuth callback —á—Ç–æ–±—ã Supabase —É—Å–ø–µ–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
      const delay = isCallback ? 1000 : 300;
      
      setTimeout(() => {
        navigate('/', { replace: true });
      }, delay);
    } else if (isCallback) {
      console.log('‚è≥ AuthPage: OAuth callback –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ–∂–∏–¥–∞–Ω–∏–µ...', { 
        isAuthenticated, 
        user: !!user, 
        loading 
      });
    }
  }, [isAuthenticated, user, loading, isCallback, navigate, redirectAttempted]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (loading) {
    console.log('‚è≥ AuthPage: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É (loading=true)');
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full"></div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isAuthenticated) {
    console.log('üîÑ AuthPage: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É (isAuthenticated=true)');
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full"></div>
      </div>
    );
  }

  console.log('üìù AuthPage: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');

  const handleAuthSuccess = () => {
    console.log('‚úÖ AuthPage: —É—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
    navigate('/', { replace: true });
  };

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      <div className="w-full max-w-md space-y-6">
        <Button 
          variant="outline" 
          onClick={() => navigate('/')} 
          className="mb-4 bg-background/80 backdrop-blur-sm"
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </Button>
        
        <Card className="bg-card/90 backdrop-blur-sm border-border/50 shadow-xl">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl text-foreground">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</CardTitle>
            <CardDescription className="text-muted-foreground">
              –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
            </CardDescription>
          </CardHeader>
          <CardContent>
            <SupabaseAuthForm onSuccess={handleAuthSuccess} />
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AuthPage;