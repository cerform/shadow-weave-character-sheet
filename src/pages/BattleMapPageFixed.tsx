import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Home, Save, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';
import TacticalBattleMap, { Token } from '@/components/battle/TacticalBattleMap';
import { sessionService } from '@/services/sessionService';
import type { BattleToken, GameSession } from '@/services/sessionService';

const BattleMapPageFixed: React.FC = () => {
  console.log('üîç BattleMapPageFixed: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
  const navigate = useNavigate();
  const { id: sessionId } = useParams<{ id: string }>();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–∞—Ä—Ç—ã
  const [tokens, setTokens] = useState<Token[]>([]);
  const [mapUrl, setMapUrl] = useState<string>('');
  const [session, setSession] = useState<GameSession | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (!sessionId) {
      toast.error('ID —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      navigate('/dm');
      return;
    }

    loadSessionData();
  }, [sessionId]);

  const loadSessionData = async () => {
    try {
      setIsLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
      const sessionData = await sessionService.getSession(sessionId!);
      setSession(sessionData);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã —Å–µ—Å—Å–∏–∏
      const maps = await sessionService.getSessionMaps(sessionId!);
      const activeMap = maps.find(m => m.is_active);
      if (activeMap) {
        setMapUrl(activeMap.image_url || '');
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
      const battleTokens = await sessionService.getMapTokens(sessionId!, activeMap?.id);
      const convertedTokens = battleTokens.map(convertBattleTokenToToken);
      setTokens(convertedTokens);
      
      toast.success('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
  const convertBattleTokenToToken = (battleToken: BattleToken): Token => ({
    id: battleToken.id,
    name: battleToken.name,
    avatar: battleToken.image_url,
    x: battleToken.position_x,
    y: battleToken.position_y,
    color: battleToken.color,
    size: battleToken.size * 50, // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ä–∞–∑–º–µ—Ä—É –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    hp: battleToken.current_hp || 30,
    maxHp: battleToken.max_hp || 30,
    ac: battleToken.armor_class || 15,
    speed: 30, // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    type: battleToken.token_type as 'player' | 'monster' | 'npc',
    controlledBy: battleToken.token_type === 'player' ? 'player1' : 'dm',
    tags: battleToken.conditions || [],
    notes: battleToken.notes
  });

  const convertTokenToBattleToken = (token: Token): Omit<BattleToken, 'id' | 'session_id' | 'created_at' | 'updated_at'> => ({
    map_id: session?.current_map_id,
    character_id: undefined,
    name: token.name,
    image_url: token.avatar,
    position_x: token.x,
    position_y: token.y,
    size: token.size / 50, // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
    color: token.color,
    token_type: token.type,
    current_hp: token.hp,
    max_hp: token.maxHp,
    armor_class: token.ac,
    is_visible: true,
    is_hidden_from_players: token.type === 'monster' && token.controlledBy === 'dm',
    conditions: token.tags || [],
    notes: token.notes
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const handleTokensChange = useCallback(async (newTokens: Token[]) => {
    console.log('üîÑ BattleMapPageFixed: —Ç–æ–∫–µ–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:', newTokens);
    setTokens(newTokens);
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if (!sessionId || isLoading) return;
    
    try {
      setIsSaving(true);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã
      const currentBattleTokens = await sessionService.getMapTokens(sessionId, session?.current_map_id);
      const currentTokenIds = new Set(currentBattleTokens.map(t => t.id));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
      for (const token of newTokens) {
        if (currentTokenIds.has(token.id)) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
          await sessionService.updateToken(token.id, {
            name: token.name,
            image_url: token.avatar,
            position_x: token.x,
            position_y: token.y,
            color: token.color,
            current_hp: token.hp,
            max_hp: token.maxHp,
            armor_class: token.ac,
            conditions: token.tags || [],
            notes: token.notes
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
          await sessionService.createToken(sessionId, convertTokenToBattleToken(token));
        }
      }
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      const newTokenIds = new Set(newTokens.map(t => t.id));
      for (const battleToken of currentBattleTokens) {
        if (!newTokenIds.has(battleToken.id)) {
          await sessionService.deleteToken(battleToken.id);
        }
      }
      
      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤');
    } finally {
      setIsSaving(false);
    }
  }, [sessionId, session, isLoading]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  const handleMapChange = useCallback(async (newMapUrl: string) => {
    setMapUrl(newMapUrl);
    
    if (!sessionId) return;
    
    try {
      setIsSaving(true);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
      if (session?.current_map_id) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
        await sessionService.updateSessionSettings(sessionId, {
          current_map_id: session.current_map_id
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        const newMap = await sessionService.createMap(sessionId, 'Battle Map', newMapUrl);
        await sessionService.setActiveMap(sessionId, newMap.id);
      }
      
      toast.success('–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã');
    } finally {
      setIsSaving(false);
    }
  }, [sessionId, session]);

  // –†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleManualSave = async () => {
    if (!sessionId) return;
    
    try {
      setIsSaving(true);
      await handleTokensChange(tokens);
      toast.success('–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–µ–≤–æ–π –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  };

  if (isLoading) {
    return (
      <div className="w-screen h-screen bg-slate-900 text-white flex items-center justify-center">
        <div className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...</div>
      </div>
    );
  }

  if (!session) {
    return (
      <div className="w-screen h-screen bg-slate-900 text-white flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-16 h-16 mx-auto mb-4 text-yellow-500" />
          <div className="text-xl mb-4">–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>
          <Button onClick={() => navigate('/dm')}>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ DM</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-screen h-screen bg-slate-900 text-white overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-30">
        <div className="flex items-center justify-between gap-4">
          <div>
            <h1 className="text-xl font-bold text-white">{session.name} - –ë–æ–µ–≤–∞—è –∫–∞—Ä—Ç–∞</h1>
            <div className="text-sm text-slate-400">
              –°–µ—Å—Å–∏—è: {session.session_code} 
              {isSaving && <span className="ml-2 text-yellow-400">‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>}
            </div>
          </div>
          <div className="flex gap-2">
            <Button 
              onClick={handleManualSave}
              className="bg-green-600 hover:bg-green-700"
              size="sm"
              disabled={isSaving}
            >
              <Save className="w-4 h-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
            <Button 
              onClick={() => navigate('/battle-map-3d')}
              className="bg-purple-600 hover:bg-purple-700"
              size="sm"
            >
              –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ 3D
            </Button>
            <Button 
              onClick={() => navigate('/dm')}
              className="bg-slate-600 hover:bg-slate-700"
              size="sm"
            >
              <Home className="w-4 h-4 mr-2" />
              –ü–∞–Ω–µ–ª—å DM
            </Button>
          </div>
        </div>
      </div>

      {/* –ö–∞—Ä—Ç–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
      <div className="w-full h-full pt-20">
        <TacticalBattleMap
          isDM={true}
          tokens={tokens}
          onTokensChange={handleTokensChange}
          mapImageUrl={mapUrl}
          onMapChange={handleMapChange}
        />
      </div>
    </div>
  );
};

export default BattleMapPageFixed;