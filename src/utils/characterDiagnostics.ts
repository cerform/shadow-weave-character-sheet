import { getCurrentUid, isAuthenticated } from '@/utils/authHelpers';
import { LocalCharacterStore } from '@/services/characterStorage';

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
export interface CharacterSystemStatus {
  isAuthenticated: boolean;
  userId: string | null;
  localStorage: {
    charactersCount: number;
    totalSizeBytes: number;
    isAvailable: boolean;
  };
  firebase: {
    isConfigured: boolean;
    isConnected: boolean;
  };
  recommendations: string[];
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
export const getCharacterSystemStatus = async (): Promise<CharacterSystemStatus> => {
  const status: CharacterSystemStatus = {
    isAuthenticated: false,
    userId: null,
    localStorage: {
      charactersCount: 0,
      totalSizeBytes: 0,
      isAvailable: false
    },
    firebase: {
      isConfigured: false,
      isConnected: false
    },
    recommendations: []
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  try {
    status.isAuthenticated = isAuthenticated();
    status.userId = getCurrentUid();
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    status.recommendations.push('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  try {
    const stats = LocalCharacterStore.getStats();
    status.localStorage.charactersCount = stats.total;
    status.localStorage.totalSizeBytes = stats.sizeInBytes;
    status.localStorage.isAvailable = typeof Storage !== 'undefined';
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage:', error);
    status.localStorage.isAvailable = false;
    status.recommendations.push('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Firebase
    status.firebase.isConfigured = true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ Firebase —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    status.firebase.isConnected = true; // –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase:', error);
    status.firebase.isConfigured = false;
    status.recommendations.push('Firebase –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (!status.isAuthenticated) {
    status.recommendations.push('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ');
  }

  if (!status.localStorage.isAvailable) {
    status.recommendations.push('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  } else if (status.localStorage.charactersCount === 0) {
    status.recommendations.push('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
  }

  if (!status.firebase.isConfigured) {
    status.recommendations.push('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Firebase –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏');
  }

  return status;
};

// –í—ã–≤–µ—Å—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
export const logCharacterSystemDiagnostics = async (): Promise<void> => {
  const status = await getCharacterSystemStatus();
  
  console.group('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π D&D');
  
  console.log('üë§ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:');
  console.log(`  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${status.isAuthenticated ? '‚úÖ' : '‚ùå'}`);
  console.log(`  User ID: ${status.userId || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
  
  console.log('üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:');
  console.log(`  –î–æ—Å—Ç—É–ø–Ω–æ: ${status.localStorage.isAvailable ? '‚úÖ' : '‚ùå'}`);
  console.log(`  –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${status.localStorage.charactersCount}`);
  console.log(`  –†–∞–∑–º–µ—Ä: ${(status.localStorage.totalSizeBytes / 1024).toFixed(2)} KB`);
  
  console.log('üî• Firebase:');
  console.log(`  –°–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω: ${status.firebase.isConfigured ? '‚úÖ' : '‚ùå'}`);
  console.log(`  –ü–æ–¥–∫–ª—é—á–µ–Ω: ${status.firebase.isConnected ? '‚úÖ' : '‚ùå'}`);
  
  if (status.recommendations.length > 0) {
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    status.recommendations.forEach(rec => console.log(`  ‚Ä¢ ${rec}`));
  }
  
  console.groupEnd();
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const exportUserCharacters = (userId?: string): string => {
  try {
    const characters = LocalCharacterStore.getAll(userId);
    const exportData = {
      exportDate: new Date().toISOString(),
      userId: userId || 'anonymous',
      charactersCount: characters.length,
      characters: characters
    };
    
    return JSON.stringify(exportData, null, 2);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ JSON
export const importUserCharacters = (jsonData: string, overwrite: boolean = false): number => {
  try {
    const importData = JSON.parse(jsonData);
    
    if (!importData.characters || !Array.isArray(importData.characters)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    }
    
    let importedCount = 0;
    
    for (const character of importData.characters) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (!overwrite && LocalCharacterStore.exists(character.id)) {
          console.warn(`–ü–µ—Ä—Å–æ–Ω–∞–∂ ${character.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        LocalCharacterStore.save(character);
        importedCount++;
      } catch (charError) {
        console.warn(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${character.name}:`, charError);
      }
    }
    
    return importedCount;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π');
  }
};

// –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
export const cleanupCorruptedData = (): number => {
  let cleanedCount = 0;
  
  try {
    for (let i = localStorage.length - 1; i >= 0; i--) {
      const key = localStorage.key(i);
      if (key && key.startsWith('character_')) {
        try {
          const data = localStorage.getItem(key);
          if (data) {
            const parsed = JSON.parse(data);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            if (!parsed.id || !parsed.name) {
              localStorage.removeItem(key);
              cleanedCount++;
              console.log(`–£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: ${key}`);
            }
          }
        } catch (parseError) {
          localStorage.removeItem(key);
          cleanedCount++;
          console.log(`–£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: ${key}`);
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
  
  return cleanedCount;
};