/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
 */
export const parseComponents = (componentString: string): {
  verbal: boolean;
  somatic: boolean;
  material: boolean;
  ritual: boolean;
  concentration: boolean;
} => {
  return {
    verbal: componentString.includes('–í'),
    somatic: componentString.includes('–°'),
    material: componentString.includes('–ú'),
    ritual: componentString.includes('–†'),
    concentration: componentString.includes('–ö')
  };
};

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
 */
export const componentsToString = (components: {
  verbal?: boolean;
  somatic?: boolean;
  material?: boolean;
  ritual?: boolean;
  concentration?: boolean;
}): string => {
  let result = '';
  if (components.verbal) result += '–í';
  if (components.somatic) result += '–°';
  if (components.material) result += '–ú';
  if (components.ritual) result += '–†';
  if (components.concentration) result += '–ö';
  return result;
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
 */
export const spellLevelToText = (level: number): string => {
  switch(level) {
    case 0: return '–ó–∞–≥–æ–≤–æ—Ä';
    case 1: return '1-–π —É—Ä–æ–≤–µ–Ω—å';
    case 2: return '2-–π —É—Ä–æ–≤–µ–Ω—å';
    case 3: return '3-–π —É—Ä–æ–≤–µ–Ω—å';
    case 4: return '4-–π —É—Ä–æ–≤–µ–Ω—å';
    case 5: return '5-–π —É—Ä–æ–≤–µ–Ω—å';
    case 6: return '6-–π —É—Ä–æ–≤–µ–Ω—å';
    case 7: return '7-–π —É—Ä–æ–≤–µ–Ω—å';
    case 8: return '8-–π —É—Ä–æ–≤–µ–Ω—å';
    case 9: return '9-–π —É—Ä–æ–≤–µ–Ω—å';
    default: return `${level}-–π —É—Ä–æ–≤–µ–Ω—å`;
  }
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã –º–∞–≥–∏–∏ –≤ –∏–∫–æ–Ω–∫—É –∏–ª–∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥
 */
export const getSchoolIcon = (school: string): string => {
  switch(school.toLowerCase()) {
    case '–≤—ã–∑–æ–≤': return 'üî•';
    case '–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ': return 'üíû';
    case '–ø—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ': return 'üîÆ';
    case '–∏–ª–ª—é–∑–∏—è': return '‚ú®';
    case '–Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è': return 'üíÄ';
    case '–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ': return 'üõ°Ô∏è';
    case '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': return 'üßô‚Äç‚ôÇÔ∏è';
    case '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ': return '‚ö°';
    default: return 'üìö';
  }
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —à–∫–æ–ª—ã –º–∞–≥–∏–∏
 */
export const getSchoolColor = (school: string): string => {
  switch(school.toLowerCase()) {
    case '–≤—ã–∑–æ–≤': return '#ff7043';
    case '–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ': return '#ec407a';
    case '–ø—Ä–æ—Ä–∏—Ü–∞–Ω–∏–µ': return '#7e57c2';
    case '–∏–ª–ª—é–∑–∏—è': return '#26c6da';
    case '–Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∏—è': return '#546e7a';
    case '–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ': return '#66bb6a';
    case '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': return '#ffca28';
    case '–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ': return '#42a5f5';
    default: return '#9e9e9e';
  }
};

/**
 * –†–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å—É –∏ —É—Ä–æ–≤–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 */
export const calculateAvailableSpellsByClassAndLevel = (
  characterClass: string,
  level: number,
  abilities?: {
    wisdom?: number;
    charisma?: number;
    intelligence?: number;
  }
): { cantrips: number; spells: number } => {
  // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  let cantrips = 0;
  let spells = 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const intMod = abilities?.intelligence ? Math.floor((abilities.intelligence - 10) / 2) : 0;
  const wisMod = abilities?.wisdom ? Math.floor((abilities.wisdom - 10) / 2) : 0;
  const chaMod = abilities?.charisma ? Math.floor((abilities.charisma - 10) / 2) : 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
  switch (characterClass) {
    case '–ë–∞—Ä–¥':
      // –ó–∞–≥–æ–≤–æ—Ä—ã: 2 –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, +1 –Ω–∞ 4, 10 —É—Ä–æ–≤–Ω—è—Ö
      cantrips = 2 + (level >= 4 ? 1 : 0) + (level >= 10 ? 1 : 0);
      // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ –±–∞—Ä–¥–∞
      spells = level + 3;
      break;
      
    case '–ñ—Ä–µ—Ü':
      // –ó–∞–≥–æ–≤–æ—Ä—ã: 3 –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, +1 –Ω–∞ 4, 10 —É—Ä–æ–≤–Ω—è—Ö
      cantrips = 3 + (level >= 4 ? 1 : 0) + (level >= 10 ? 1 : 0);
      // –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: —É—Ä–æ–≤–µ–Ω—å + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º—É–¥—Ä–æ—Å—Ç–∏
      spells = level + Math.max(1, wisMod);
      break;
      
    case '–î—Ä—É–∏–¥':
      // –ó–∞–≥–æ–≤–æ—Ä—ã: 2 –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, +1 –Ω–∞ 4, 10 —É—Ä–æ–≤–Ω—è—Ö
      cantrips = 2 + (level >= 4 ? 1 : 0) + (level >= 10 ? 1 : 0);
      // –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: —É—Ä–æ–≤–µ–Ω—å + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º—É–¥—Ä–æ—Å—Ç–∏
      spells = level + Math.max(1, wisMod);
      break;
      
    case '–ö–æ–ª–¥—É–Ω':
    case '–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫':
      // –ó–∞–≥–æ–≤–æ—Ä—ã: 2 –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, +1 –Ω–∞ 4, 10 —É—Ä–æ–≤–Ω—è—Ö
      cantrips = 2 + (level >= 4 ? 1 : 0) + (level >= 10 ? 1 : 0);
      // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–ª–¥—É–Ω–∞
      if (level === 1) spells = 2;
      else if (level <= 3) spells = 3 + (level - 2);
      else if (level <= 9) spells = 4 + Math.floor((level - 3) / 2);
      else spells = 10 + Math.floor((level - 9) / 2);
      break;
      
    case '–í–æ–ª—à–µ–±–Ω–∏–∫':
      // –ó–∞–≥–æ–≤–æ—Ä—ã: 3 –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, +1 –Ω–∞ 4, 10 —É—Ä–æ–≤–Ω—è—Ö
      cantrips = 3 + (level >= 4 ? 1 : 0) + (level >= 10 ? 1 : 0);
      // –ú–∏–Ω–∏–º—É–º 2 –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤ –∫–Ω–∏–≥—É + –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
      spells = level + Math.max(1, intMod);
      break;
      
    case '–ü–∞–ª–∞–¥–∏–Ω':
      cantrips = 0; // –£ –ø–∞–ª–∞–¥–∏–Ω–æ–≤ –Ω–µ—Ç –∑–∞–≥–æ–≤–æ—Ä–æ–≤
      // –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è: 1/2 —É—Ä–æ–≤–Ω—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∏–∑–º—ã
      spells = Math.floor(level / 2) + Math.max(1, chaMod);
      break;
      
    case '–°–ª–µ–¥–æ–ø—ã—Ç':
      cantrips = 0; // –£ —Å–ª–µ–¥–æ–ø—ã—Ç–æ–≤ –Ω–µ—Ç –∑–∞–≥–æ–≤–æ—Ä–æ–≤
      // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Å–ª–µ–¥–æ–ø—ã—Ç–∞
      if (level >= 2) spells = 2 + Math.floor((level - 2) / 2);
      else spells = 0;
      break;
      
    case '–ß–∞—Ä–æ–¥–µ–π':
      // –ó–∞–≥–æ–≤–æ—Ä—ã: 4 –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ, +1 –Ω–∞ 4, 10 —É—Ä–æ–≤–Ω—è—Ö
      cantrips = 4 + (level >= 4 ? 1 : 0) + (level >= 10 ? 1 : 0);
      // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ —á–∞—Ä–æ–¥–µ—è
      if (level === 1) spells = 2;
      else if (level === 2) spells = 3;
      else if (level === 3) spells = 4;
      else spells = 4 + Math.floor((level - 3) / 2);
      break;
      
    default:
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–ª–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª–∞—Å—Å–∞
      cantrips = 0;
      spells = 0;
  }
  
  return { cantrips, spells };
};
