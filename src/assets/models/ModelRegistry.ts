/**
 * –†–æ–¥–æ–≤–æ–π –º–∞–ø–ø–∏–Ω–≥ –º–æ–Ω—Å—Ç—Ä–æ–≤ D&D 5e –Ω–∞ 3D –º–æ–¥–µ–ª–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ ‚Üí 3D –º–æ–¥–µ–ª—å
 */

export interface ModelMapping {
  path: string;
  scale: number;
  yOffset: number;
  fallbackColor?: string;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–º–µ–π—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤ –∏ –∏—Ö –º–æ–¥–µ–ª–∏
export const CREATURE_FAMILIES: Record<string, ModelMapping> = {
  // –ì—É–º–∞–Ω–æ–∏–¥—ã
  human: { path: '/models/creatures/human.glb', scale: 1.0, yOffset: 0 },
  elf: { path: '/models/creatures/elf.glb', scale: 1.0, yOffset: 0 },
  dwarf: { path: '/models/creatures/dwarf.glb', scale: 0.9, yOffset: 0 },
  halfling: { path: '/models/creatures/halfling.glb', scale: 0.8, yOffset: 0 },
  
  // –ì–æ–±–ª–∏–Ω–æ–∏–¥—ã
  goblin: { path: '/models/creatures/goblin.glb', scale: 0.8, yOffset: 0, fallbackColor: '#8B4513' },
  hobgoblin: { path: '/models/creatures/hobgoblin.glb', scale: 1.1, yOffset: 0, fallbackColor: '#8B0000' },
  orc: { path: '/models/creatures/orc.glb', scale: 1.2, yOffset: 0, fallbackColor: '#556B2F' },
  bugbear: { path: '/models/creatures/bugbear.glb', scale: 1.3, yOffset: 0, fallbackColor: '#654321' },
  
  // –ù–µ–∂–∏—Ç—å
  skeleton: { path: '/models/creatures/skeleton.glb', scale: 1.0, yOffset: 0, fallbackColor: '#F5F5DC' },
  zombie: { path: '/models/creatures/zombie.glb', scale: 1.0, yOffset: 0, fallbackColor: '#696969' },
  ghoul: { path: '/models/creatures/ghoul.glb', scale: 1.0, yOffset: 0, fallbackColor: '#2F4F4F' },
  wight: { path: '/models/creatures/wight.glb', scale: 1.0, yOffset: 0, fallbackColor: '#1C1C1C' },
  
  // –ó–≤–µ—Ä–∏
  wolf: { path: '/models/creatures/wolf.glb', scale: 1.0, yOffset: 0, fallbackColor: '#708090' },
  bear: { path: '/models/creatures/bear.glb', scale: 1.5, yOffset: 0, fallbackColor: '#8B4513' },
  lion: { path: '/models/creatures/lion.glb', scale: 1.3, yOffset: 0, fallbackColor: '#DAA520' },
  eagle: { path: '/models/creatures/eagle.glb', scale: 0.8, yOffset: 0.5, fallbackColor: '#8B4513' },
  
  // –î—Ä–∞–∫–æ–Ω—ã
  dragon: { path: '/models/creatures/dragon.glb', scale: 3.0, yOffset: 0, fallbackColor: '#8B0000' },
  wyrmling: { path: '/models/creatures/dragon_young.glb', scale: 1.5, yOffset: 0, fallbackColor: '#8B0000' },
  
  // –í–µ–ª–∏–∫–∞–Ω—ã
  giant: { path: '/models/creatures/giant.glb', scale: 2.5, yOffset: 0, fallbackColor: '#A0522D' },
  ogre: { path: '/models/creatures/ogre.glb', scale: 2.0, yOffset: 0, fallbackColor: '#8B4513' },
  troll: { path: '/models/creatures/troll.glb', scale: 2.2, yOffset: 0, fallbackColor: '#228B22' },
  
  // –ê–±–µ—Ä—Ä–∞—Ü–∏–∏
  beholder: { path: '/models/creatures/beholder.glb', scale: 2.0, yOffset: 1.0, fallbackColor: '#8B008B' },
  mindflayer: { path: '/models/creatures/mindflayer.glb', scale: 1.1, yOffset: 0, fallbackColor: '#4B0082' },
  
  // –≠–ª–µ–º–µ–Ω—Ç–∞–ª–∏
  elemental: { path: '/models/creatures/elemental.glb', scale: 1.5, yOffset: 0, fallbackColor: '#4169E1' },
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  default: { path: '/models/creatures/default.glb', scale: 1.0, yOffset: 0, fallbackColor: '#696969' },
};

// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤
export const SPECIFIC_MAPPINGS: Record<string, ModelMapping> = {
  // –ó–Ω–∞–º–µ–Ω–∏—Ç—ã–µ –º–æ–Ω—Å—Ç—Ä—ã
  'tarrasque': { path: '/models/creatures/tarrasque.glb', scale: 4.0, yOffset: 0, fallbackColor: '#8B0000' },
  'lich': { path: '/models/creatures/lich.glb', scale: 1.0, yOffset: 0, fallbackColor: '#2F4F4F' },
  'ancient-red-dragon': { path: '/models/creatures/ancient_dragon.glb', scale: 5.0, yOffset: 0, fallbackColor: '#DC143C' },
  
  // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ D&D –º–æ–Ω—Å—Ç—Ä—ã
  'owlbear': { path: '/models/creatures/owlbear.glb', scale: 1.8, yOffset: 0, fallbackColor: '#8B4513' },
  'bulette': { path: '/models/creatures/bulette.glb', scale: 1.6, yOffset: 0, fallbackColor: '#A0522D' },
  'displacer-beast': { path: '/models/creatures/displacer_beast.glb', scale: 1.4, yOffset: 0, fallbackColor: '#4B0082' },
  'rust-monster': { path: '/models/creatures/rust_monster.glb', scale: 1.2, yOffset: 0, fallbackColor: '#B8860B' },
  
  // –ü–ª–∞–Ω–∞—Ä–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞
  'balor': { path: '/models/creatures/balor.glb', scale: 2.8, yOffset: 0, fallbackColor: '#8B0000' },
  'solar': { path: '/models/creatures/solar.glb', scale: 2.0, yOffset: 0.5, fallbackColor: '#FFD700' },
  'pit-fiend': { path: '/models/creatures/pit_fiend.glb', scale: 2.5, yOffset: 0, fallbackColor: '#8B0000' },
};

export class ModelRegistry {
  private loadedModels: Map<string, boolean> = new Map();
  private failedModels: Set<string> = new Set();

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–æ–Ω—Å—Ç—Ä–∞
   */
  getModelMapping(monsterName: string, monsterType: string): ModelMapping {
    const normalizedName = this.normalizeMonsterName(monsterName);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
    if (SPECIFIC_MAPPINGS[normalizedName]) {
      return SPECIFIC_MAPPINGS[normalizedName];
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É/—Å–µ–º–µ–π—Å—Ç–≤—É
    const family = this.getCreatureFamily(normalizedName, monsterType);
    return CREATURE_FAMILIES[family] || CREATURE_FAMILIES.default;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –º–æ–Ω—Å—Ç—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  private normalizeMonsterName(name: string): string {
    return name
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^\w-]/g, '');
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–µ–π—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞
   */
  private getCreatureFamily(normalizedName: string, type: string): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
    for (const family of Object.keys(CREATURE_FAMILIES)) {
      if (normalizedName.includes(family)) {
        return family;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É
    const typeMapping: Record<string, string> = {
      'humanoid': 'human',
      'undead': 'skeleton',
      'beast': 'wolf',
      'dragon': 'dragon',
      'giant': 'giant',
      'aberration': 'beholder',
      'elemental': 'elemental',
      'fiend': 'balor',
      'celestial': 'solar',
      'fey': 'elf',
      'monstrosity': 'owlbear',
      'ooze': 'default',
      'plant': 'default',
      'construct': 'default',
    };

    return typeMapping[type.toLowerCase()] || 'default';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
   */
  async checkModelAvailability(path: string): Promise<boolean> {
    if (this.loadedModels.has(path)) {
      return this.loadedModels.get(path)!;
    }

    if (this.failedModels.has(path)) {
      return false;
    }

    try {
      const response = await fetch(path, { method: 'HEAD' });
      const isAvailable = response.ok;
      
      this.loadedModels.set(path, isAvailable);
      if (!isAvailable) {
        this.failedModels.add(path);
      }
      
      return isAvailable;
    } catch {
      this.failedModels.add(path);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ fallback –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
   */
  getFallbackMapping(originalMapping: ModelMapping): ModelMapping {
    return {
      ...CREATURE_FAMILIES.default,
      fallbackColor: originalMapping.fallbackColor || CREATURE_FAMILIES.default.fallbackColor,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤
   */
  getAllFamilies(): string[] {
    return Object.keys(CREATURE_FAMILIES);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  getStatistics(): {
    totalFamilies: number;
    specificMappings: number;
    loadedModels: number;
    failedModels: number;
  } {
    return {
      totalFamilies: Object.keys(CREATURE_FAMILIES).length,
      specificMappings: Object.keys(SPECIFIC_MAPPINGS).length,
      loadedModels: this.loadedModels.size,
      failedModels: this.failedModels.size,
    };
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
   */
  async preloadCommonModels(): Promise<void> {
    const commonModels = [
      'goblin', 'orc', 'skeleton', 'zombie', 'wolf', 'human', 'default'
    ];

    const preloadPromises = commonModels.map(async (family) => {
      const mapping = CREATURE_FAMILIES[family];
      if (mapping) {
        await this.checkModelAvailability(mapping.path);
      }
    });

    await Promise.allSettled(preloadPromises);
    console.log('üé≠ Preloaded common monster models');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.loadedModels.clear();
    this.failedModels.clear();
  }
}