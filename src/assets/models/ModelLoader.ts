/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ 3D –º–æ–¥–µ–ª–µ–π
 * –ö—ç—à, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, placeholder –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
 */

import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';
import * as THREE from 'three';

export interface LoadedModel {
  scene: THREE.Group;
  animations: THREE.AnimationClip[];
  gltf: GLTF;
  path: string;
  loadTime: number;
}

export interface ModelLoadOptions {
  enableDraco?: boolean;
  timeout?: number;
  retries?: number;
  scale?: number;
  yOffset?: number;
}

export class ModelLoader {
  private loader: GLTFLoader;
  private dracoLoader?: DRACOLoader;
  private cache: Map<string, LoadedModel> = new Map();
  private loading: Map<string, Promise<LoadedModel>> = new Map();
  private failed: Set<string> = new Set();

  constructor(options: ModelLoadOptions = {}) {
    this.loader = new GLTFLoader();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DRACO –¥–µ–∫–æ–¥–µ—Ä–∞ –¥–ª—è —Å–∂–∞—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π
    if (options.enableDraco !== false) {
      this.dracoLoader = new DRACOLoader();
      this.dracoLoader.setDecoderPath('/draco/');
      this.loader.setDRACOLoader(this.dracoLoader);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  async loadModel(
    path: string, 
    options: ModelLoadOptions = {}
  ): Promise<LoadedModel | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.cache.has(path)) {
      return this.cache.get(path)!;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
    if (this.loading.has(path)) {
      return this.loading.get(path)!;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π
    if (this.failed.has(path)) {
      console.warn(`üö´ Model ${path} previously failed to load`);
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const loadPromise = this.performLoad(path, options);
    this.loading.set(path, loadPromise);

    try {
      const result = await loadPromise;
      this.cache.set(path, result);
      this.loading.delete(path);
      return result;
    } catch (error) {
      console.error(`üö´ Failed to load model ${path}:`, error);
      this.failed.add(path);
      this.loading.delete(path);
      return null;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   */
  private async performLoad(
    path: string, 
    options: ModelLoadOptions
  ): Promise<LoadedModel> {
    const startTime = Date.now();
    const timeout = options.timeout || 10000; // 10 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const retries = options.retries || 2;

    for (let attempt = 0; attempt <= retries; attempt++) {
      try {
        const gltf = await this.loadWithTimeout(path, timeout);
        
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const scene = gltf.scene.clone();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (options.scale && options.scale !== 1) {
          scene.scale.setScalar(options.scale);
        }
        
        if (options.yOffset) {
          scene.position.y = options.yOffset;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç–µ–Ω–∏
        this.setupMaterials(scene);
        
        const loadTime = Date.now() - startTime;
        console.log(`‚úÖ Model loaded: ${path} (${loadTime}ms)`);

        return {
          scene,
          animations: gltf.animations,
          gltf,
          path,
          loadTime,
        };
      } catch (error) {
        if (attempt === retries) {
          throw error;
        }
        console.warn(`‚ö†Ô∏è Model load attempt ${attempt + 1} failed for ${path}, retrying...`);
        await this.delay(1000 * (attempt + 1)); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }
    }

    throw new Error(`Failed to load ${path} after ${retries + 1} attempts`);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   */
  private loadWithTimeout(path: string, timeout: number): Promise<GLTF> {
    return new Promise((resolve, reject) => {
      const timer = setTimeout(() => {
        reject(new Error(`Loading timeout for ${path}`));
      }, timeout);

      this.loader.load(
        path,
        (gltf) => {
          clearTimeout(timer);
          resolve(gltf);
        },
        (progress) => {
          // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          console.log(`üì¶ Loading ${path}: ${(progress.loaded / progress.total * 100).toFixed(1)}%`);
        },
        (error) => {
          clearTimeout(timer);
          reject(error);
        }
      );
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ–Ω–µ–π
   */
  private setupMaterials(scene: THREE.Group): void {
    scene.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        // –í–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏
        child.castShadow = true;
        child.receiveShadow = true;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if (child.material instanceof THREE.Material) {
          if (child.material instanceof THREE.MeshStandardMaterial) {
            // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            child.material.envMapIntensity = 1;
            child.material.needsUpdate = true;
          }
        }
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ placeholder –º–æ–¥–µ–ª–∏
   */
  createPlaceholder(
    color: string = '#696969',
    scale: number = 1,
    yOffset: number = 0
  ): LoadedModel {
    const geometry = new THREE.CapsuleGeometry(0.4 * scale, 1.2 * scale, 8, 16);
    const material = new THREE.MeshStandardMaterial({ 
      color: color,
      metalness: 0.1,
      roughness: 0.8,
    });
    
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.y = yOffset;
    mesh.castShadow = true;
    mesh.receiveShadow = true;

    const scene = new THREE.Group();
    scene.add(mesh);

    return {
      scene,
      animations: [],
      gltf: {} as GLTF, // –ó–∞–≥–ª—É—à–∫–∞
      path: 'placeholder',
      loadTime: 0,
    };
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   */
  async preloadModels(
    paths: string[], 
    options: ModelLoadOptions = {}
  ): Promise<(LoadedModel | null)[]> {
    console.log(`üì¶ Preloading ${paths.length} models...`);
    
    const promises = paths.map(path => this.loadModel(path, options));
    const results = await Promise.allSettled(promises);
    
    const successful = results.filter(r => r.status === 'fulfilled').length;
    console.log(`‚úÖ Preloaded ${successful}/${paths.length} models`);
    
    return results.map(r => r.status === 'fulfilled' ? r.value : null);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞
   */
  getCachedModel(path: string): LoadedModel | null {
    return this.cache.get(path) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
   */
  isModelLoaded(path: string): boolean {
    return this.cache.has(path);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
   */
  isModelFailed(path: string): boolean {
    return this.failed.has(path);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    for (const model of this.cache.values()) {
      this.disposeModel(model);
    }
    
    this.cache.clear();
    this.loading.clear();
    this.failed.clear();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞
   */
  removeFromCache(path: string): void {
    const model = this.cache.get(path);
    if (model) {
      this.disposeModel(model);
      this.cache.delete(path);
    }
    this.failed.delete(path);
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–æ–¥–µ–ª–∏
   */
  private disposeModel(model: LoadedModel): void {
    model.scene.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        if (child.geometry) {
          child.geometry.dispose();
        }
        if (child.material) {
          if (Array.isArray(child.material)) {
            child.material.forEach(material => material.dispose());
          } else {
            child.material.dispose();
          }
        }
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStatistics(): {
    cached: number;
    loading: number;
    failed: number;
    memoryUsage: string;
  } {
    const memoryUsage = this.cache.size > 0 ? 
      `~${(this.cache.size * 0.5).toFixed(1)}MB` : '0MB';
    
    return {
      cached: this.cache.size,
      loading: this.loading.size,
      failed: this.failed.size,
      memoryUsage,
    };
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è retry –ª–æ–≥–∏–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
   */
  dispose(): void {
    this.clearCache();
    
    if (this.dracoLoader) {
      this.dracoLoader.dispose();
    }
  }
}