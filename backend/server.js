
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);

app.use(cors({
  origin: "*",
  methods: ["GET", "POST"]
}));

const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π D&D
const gameSessions = new Map();
const players = new Map(); // socketId -> playerInfo

function generateSessionCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

function createGameSession(sessionData) {
  const code = generateSessionCode();
  const session = {
    id: Date.now().toString(),
    code,
    name: sessionData.name,
    dmId: sessionData.dmId,
    dmName: sessionData.dmName,
    players: [],
    isActive: true,
    createdAt: new Date().toISOString(),
    messages: [],
    diceRolls: [],
    battleMap: {
      width: 800,
      height: 600,
      gridSize: 30,
      tokens: [],
      isActive: false
    },
    initiative: {
      order: [],
      currentTurn: 0,
      round: 1
    },
    notes: [],
    handouts: []
  };
  
  gameSessions.set(code, session);
  return session;
}

io.on('connection', (socket) => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (DM)
  socket.on('session:create', (data, callback) => {
    try {
      console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', data);
      
      const session = createGameSession({
        name: data.name,
        dmId: socket.id,
        dmName: data.dmName,
        character: data.character
      });

      // –î–æ–±–∞–≤–ª—è–µ–º DM –∫–∞–∫ –∏–≥—Ä–æ–∫–∞
      const dmPlayer = {
        id: socket.id,
        name: data.dmName,
        character: data.character,
        isDM: true,
        isOnline: true,
        joinedAt: new Date().toISOString()
      };
      
      session.players.push(dmPlayer);
      players.set(socket.id, { ...dmPlayer, sessionCode: session.code });
      
      socket.join(session.code);
      
      console.log(`üéÆ –°–µ—Å—Å–∏—è "${session.name}" —Å–æ–∑–¥–∞–Ω–∞ —Å –∫–æ–¥–æ–º: ${session.code}`);
      
      callback({ 
        success: true, 
        session: session 
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      io.to(session.code).emit('session:updated', session);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      callback({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ (Player)
  socket.on('session:join', (data, callback) => {
    try {
      const { code, playerName, character } = data;
      const session = gameSessions.get(code);
      
      if (!session) {
        callback({ 
          success: false, 
          error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
      const existingPlayer = session.players.find(p => p.name === playerName);
      let player;
      
      if (existingPlayer && !existingPlayer.isOnline) {
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        existingPlayer.id = socket.id;
        existingPlayer.isOnline = true;
        player = existingPlayer;
      } else if (!existingPlayer) {
        // –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫
        player = {
          id: socket.id,
          name: playerName,
          character: character,
          isDM: false,
          isOnline: true,
          joinedAt: new Date().toISOString()
        };
        session.players.push(player);
      } else {
        callback({ 
          success: false, 
          error: '–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –≤ —Å–µ—Å—Å–∏–∏' 
        });
        return;
      }

      players.set(socket.id, { ...player, sessionCode: code });
      socket.join(code);
      
      console.log(`üë• ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${code}`);
      
      callback({ 
        success: true, 
        session: session 
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
      io.to(code).emit('session:updated', session);
      io.to(code).emit('session:player_joined', player);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      callback({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('session:send_message', (data) => {
    try {
      const player = players.get(socket.id);
      if (!player) return;

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      const message = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 5),
        type: data.type || 'chat',
        sender: player.name,
        content: data.content,
        timestamp: new Date().toISOString(),
        sessionId: session.id,
        isDM: player.isDM
      };

      session.messages.push(message);
      
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ ${player.sessionCode}: ${player.name}: ${data.content}`);
      
      io.to(player.sessionCode).emit('session:message', message);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
  socket.on('session:roll_dice', (data) => {
    try {
      const player = players.get(socket.id);
      if (!player) return;

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      // –ü–∞—Ä—Å–∏–º —Ç–∏–ø –∫—É–±–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "d20", "2d6")
      const diceMatch = data.diceType.match(/(\d*)d(\d+)/);
      if (!diceMatch) return;

      const count = parseInt(diceMatch[1]) || 1;
      const sides = parseInt(diceMatch[2]);
      
      let total = 0;
      const rolls = [];
      
      for (let i = 0; i < count; i++) {
        const roll = Math.floor(Math.random() * sides) + 1;
        rolls.push(roll);
        total += roll;
      }
      
      const finalTotal = total + (data.modifier || 0);
      
      const diceResult = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 5),
        playerId: socket.id,
        playerName: player.name,
        diceType: data.diceType,
        result: total,
        rolls: rolls,
        modifier: data.modifier || 0,
        total: finalTotal,
        reason: data.reason || '',
        timestamp: new Date().toISOString()
      };

      session.diceRolls.push(diceResult);
      
      console.log(`üé≤ ${player.name} –±—Ä–æ—Å–∏–ª ${data.diceType}: ${rolls.join(', ')} = ${total} + ${data.modifier || 0} = ${finalTotal}`);
      
      io.to(player.sessionCode).emit('session:dice_roll', diceResult);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤:', error);
    }
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  socket.on('session:update_character', (data) => {
    try {
      const player = players.get(socket.id);
      if (!player) return;

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–µ—Å—Å–∏–∏
      const sessionPlayer = session.players.find(p => p.id === socket.id);
      if (sessionPlayer) {
        sessionPlayer.character = { ...sessionPlayer.character, ...data.character };
        players.set(socket.id, { ...player, character: sessionPlayer.character });
      }
      
      console.log(`üßô ${player.name} –æ–±–Ω–æ–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`);
      
      io.to(player.sessionCode).emit('session:character_updated', {
        playerId: socket.id,
        character: sessionPlayer.character
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–≤–æ–π –∫–∞—Ä—Ç–æ–π
  socket.on('battle:token_add', (data) => {
    try {
      const player = players.get(socket.id);
      if (!player || !player.isDM) return; // –¢–æ–ª—å–∫–æ DM –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω—ã

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      const token = {
        ...data.token,
        id: Date.now().toString() + Math.random().toString(36).substr(2, 5)
      };

      session.battleMap.tokens.push(token);
      
      io.to(player.sessionCode).emit('battle:token_added', token);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
  });

  socket.on('battle:token_move', (data) => {
    try {
      const player = players.get(socket.id);
      if (!player) return;

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      const tokenIndex = session.battleMap.tokens.findIndex(t => t.id === data.tokenId);
      if (tokenIndex >= 0) {
        session.battleMap.tokens[tokenIndex].x = data.x;
        session.battleMap.tokens[tokenIndex].y = data.y;
        
        io.to(player.sessionCode).emit('battle:token_moved', {
          tokenId: data.tokenId,
          x: data.x,
          y: data.y
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π
  socket.on('initiative:start', (data) => {
    try {
      const player = players.get(socket.id);
      if (!player || !player.isDM) return;

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      session.initiative.order = data.order;
      session.initiative.currentTurn = 0;
      session.initiative.round = 1;
      
      io.to(player.sessionCode).emit('initiative:started', session.initiative);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã:', error);
    }
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  socket.on('session:end', () => {
    try {
      const player = players.get(socket.id);
      if (!player || !player.isDM) return;

      const session = gameSessions.get(player.sessionCode);
      if (!session) return;

      session.isActive = false;
      session.endedAt = new Date().toISOString();
      
      io.to(player.sessionCode).emit('session:ended', { reason: 'DM ended session' });
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      const roomSockets = io.sockets.adapter.rooms.get(player.sessionCode);
      if (roomSockets) {
        roomSockets.forEach(socketId => {
          const roomSocket = io.sockets.sockets.get(socketId);
          if (roomSocket) {
            roomSocket.leave(player.sessionCode);
          }
        });
      }
      
      console.log(`üîö –°–µ—Å—Å–∏—è ${player.sessionCode} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  socket.on('disconnect', () => {
    try {
      const player = players.get(socket.id);
      if (!player) return;

      const session = gameSessions.get(player.sessionCode);
      if (session) {
        const sessionPlayer = session.players.find(p => p.id === socket.id);
        if (sessionPlayer) {
          sessionPlayer.isOnline = false;
          
          console.log(`‚ùå ${player.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ ${player.sessionCode}`);
          
          io.to(player.sessionCode).emit('session:player_disconnected', {
            playerId: socket.id,
            playerName: player.name
          });
        }
      }
      
      players.delete(socket.id);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  });

  // Ping-pong –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  socket.on('ping', () => {
    socket.emit('pong');
  });
});

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  const thirtyMinutes = 30 * 60 * 1000;
  
  for (const [code, session] of gameSessions.entries()) {
    const lastActivity = new Date(session.createdAt).getTime();
    const onlinePlayers = session.players.filter(p => p.isOnline).length;
    
    if (now - lastActivity > thirtyMinutes && onlinePlayers === 0) {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: ${code}`);
      gameSessions.delete(code);
    }
  }
}, 30 * 60 * 1000);

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ D&D Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üéÆ –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º!`);
});
