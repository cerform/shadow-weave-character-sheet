
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: "*",
  methods: ["GET", "POST"]
}));

const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const rooms = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç

function generateRoomCode() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return code;
}

io.on('connection', (socket) => {
  console.log('‚úÖ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

  socket.on('createRoom', (nickname, callback) => {
    try {
      const roomCode = generateRoomCode();
      rooms[roomCode] = {
        players: [{ id: socket.id, nickname, connected: true }],
        createdAt: new Date().toISOString()
      };
      socket.join(roomCode);
      console.log(`üéØ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomCode} –¥–ª—è ${nickname}`);
      
      if (callback) {
        callback({ roomCode });
      }
      
      io.to(roomCode).emit('updatePlayers', rooms[roomCode].players);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã:', error);
      if (callback) {
        callback({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É' });
      }
    }
  });

  socket.on('joinRoom', ({ roomCode, nickname }, callback) => {
    try {
      const room = rooms[roomCode];
      if (room) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        const existingPlayer = room.players.find(p => p.nickname === nickname);
        if (existingPlayer) {
          existingPlayer.id = socket.id;
          existingPlayer.connected = true;
        } else {
          room.players.push({ id: socket.id, nickname, connected: true });
        }
        
        socket.join(roomCode);
        console.log(`üë• ${nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}`);
        
        if (callback) {
          callback({ success: true });
        }
        
        io.to(roomCode).emit('updatePlayers', room.players);
      } else {
        console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${roomCode} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        if (callback) {
          callback({ success: false, message: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      if (callback) {
        callback({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
      }
    }
  });

  socket.on('chatMessage', ({ roomCode, nickname, message }) => {
    try {
      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ ${roomCode} –æ—Ç ${nickname}: ${message}`);
      io.to(roomCode).emit('chatMessage', { nickname, message, timestamp: new Date().toISOString() });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  socket.on('rollDice', ({ roomCode, nickname, diceType }) => {
    try {
      const diceSides = parseInt(diceType.replace('d', ''), 10);
      const result = Math.floor(Math.random() * diceSides) + 1;
      console.log(`üé≤ ${nickname} –±—Ä–æ—Å–∏–ª ${diceType}: ${result}`);
      io.to(roomCode).emit('diceResult', { nickname, diceType, result, timestamp: new Date().toISOString() });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞:', error);
    }
  });

  socket.on('disconnect', () => {
    console.log('‚ùå –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö
    for (const roomCode in rooms) {
      const room = rooms[roomCode];
      const player = room.players.find(p => p.id === socket.id);
      if (player) {
        player.connected = false;
        console.log(`üë§ ${player.nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã ${roomCode}`);
        io.to(roomCode).emit('updatePlayers', room.players);
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        setTimeout(() => {
          const connectedPlayers = room.players.filter(p => p.connected);
          if (connectedPlayers.length === 0) {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã ${roomCode}`);
            delete rooms[roomCode];
          }
        }, 5 * 60 * 1000);
      }
    }
  });

  // Ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const pingInterval = setInterval(() => {
    if (socket.connected) {
      socket.emit('ping');
    } else {
      clearInterval(pingInterval);
    }
  }, 30000);

  socket.on('pong', () => {
    console.log('üèì Pong –ø–æ–ª—É—á–µ–Ω –æ—Ç', socket.id);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  });
});

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
});
